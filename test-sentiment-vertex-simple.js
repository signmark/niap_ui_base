import fetch from 'node-fetch';
import { vertexAIAuth } from './services/vertex-ai-auth.js';

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Vertex AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...');

async function testSentimentAnalysis() {
    try {
        console.log('üîë –ü–æ–ª—É—á–∞–µ–º access token –¥–ª—è Vertex AI...');
        const accessToken = await vertexAIAuth.getAccessToken();
        
        if (!accessToken) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token');
        }
        
        console.log('‚úÖ Access token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üîë –¢–æ–∫–µ–Ω: ${accessToken.substring(0, 50)}...`);
        
        const url = vertexAIAuth.getVertexAIUrl('gemini-2.5-flash');
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        const testComments = [
            "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç! –û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π!",
            "–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é",
            "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ"
        ];
        
        const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:
${testComments.map((comment, i) => `${i+1}. ${comment}`).join('\n')}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞):
{
  "analysis": [
    {
      "comment": "—Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
      "sentiment": "positive|negative|neutral",
      "confidence": 0.95,
      "keywords": ["–∫–ª—é—á–µ–≤–æ–µ", "—Å–ª–æ–≤–æ"]
    }
  ]
}`;

        const requestData = {
            contents: [
                {
                    role: "user",
                    parts: [
                        {
                            text: prompt
                        }
                    ]
                }
            ],
            generationConfig: {
                temperature: 0.3,
                topP: 0.9,
                topK: 40,
                maxOutputTokens: 2048  // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è MAX_TOKENS
            }
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...');
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${accessToken}`
            },
            body: JSON.stringify(requestData)
        });
        
        const result = await response.json();
        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Vertex AI:', response.status);
        
        if (response.ok) {
            console.log('üéâ Vertex AI —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!');
            
            if (result.candidates && result.candidates.length > 0) {
                const candidate = result.candidates[0];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
                if (candidate.finishReason === 'MAX_TOKENS') {
                    console.log('‚ö†Ô∏è Vertex AI –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤');
                    console.log('üìä –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', result.usageMetadata);
                } else if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
                    const generatedText = candidate.content.parts[0].text;
                    console.log('üìÑ –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:');
                    console.log(generatedText);
                    
                    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                    try {
                        const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
                        if (jsonMatch) {
                            const analysis = JSON.parse(jsonMatch[0]);
                            console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:');
                            console.log(JSON.stringify(analysis, null, 2));
                        }
                    } catch (parseError) {
                        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –Ω–æ —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω');
                    }
                } else {
                    console.log('‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ, –Ω–æ —Å—Ç–∞—Ç—É—Å 200');
                    console.log('üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(result, null, 2));
                }
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç candidates –≤ –æ—Ç–≤–µ—Ç–µ');
                console.log('üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(result, null, 2));
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ Vertex AI:', result);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        console.error('–°—Ç–µ–∫:', error.stack);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSentimentAnalysis();