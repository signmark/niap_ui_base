/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã Global API Keys
 * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ Directus
 */

import axios from 'axios';
import pkg from 'pg';
const { Client } = pkg;

const DIRECTUS_URL = process.env.DIRECTUS_URL || 'https://directus.roboflow.tech';
const ADMIN_EMAIL = process.env.DIRECTUS_ADMIN_EMAIL;
const ADMIN_PASSWORD = process.env.DIRECTUS_ADMIN_PASSWORD;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const dbConfig = {
    host: process.env.PGHOST,
    port: process.env.PGPORT,
    database: process.env.PGDATABASE,
    user: process.env.PGUSER,
    password: process.env.PGPASSWORD,
    ssl: false
};

async function executeSQL() {
    console.log('=== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Global API Keys ===\n');
    
    const client = new Client(dbConfig);
    
    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        const createTableSQL = `
            -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã global_api_keys —Å —á–∏—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            CREATE TABLE IF NOT EXISTS global_api_keys (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                service_name VARCHAR(100) NOT NULL UNIQUE,
                api_key TEXT NOT NULL,
                is_active BOOLEAN DEFAULT true,
                description TEXT
            );

            -- –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            CREATE INDEX IF NOT EXISTS idx_global_api_keys_service ON global_api_keys(service_name);
            CREATE INDEX IF NOT EXISTS idx_global_api_keys_active ON global_api_keys(is_active);

            -- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            COMMENT ON TABLE global_api_keys IS '–ì–ª–æ–±–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤';
            COMMENT ON COLUMN global_api_keys.id IS 'ID';
            COMMENT ON COLUMN global_api_keys.service_name IS '–°–µ—Ä–≤–∏—Å';
            COMMENT ON COLUMN global_api_keys.api_key IS 'API –ö–ª—é—á';
            COMMENT ON COLUMN global_api_keys.is_active IS '–ê–∫—Ç–∏–≤–µ–Ω';
            COMMENT ON COLUMN global_api_keys.description IS '–û–ø–∏—Å–∞–Ω–∏–µ';

            -- –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è)
            INSERT INTO global_api_keys (service_name, api_key, is_active, description) 
            SELECT * FROM (VALUES
                ('gemini', 'your_gemini_key_here', true, 'Google Gemini API'),
                ('claude', 'your_claude_key_here', true, 'Anthropic Claude API'),
                ('deepseek', 'your_deepseek_key_here', true, 'DeepSeek API'),
                ('qwen', 'your_qwen_key_here', true, 'Qwen API'),
                ('fal_ai', 'your_fal_ai_key_here', true, 'FAL AI API')
            ) AS t(service_name, api_key, is_active, description)
            WHERE NOT EXISTS (SELECT 1 FROM global_api_keys WHERE global_api_keys.service_name = t.service_name);
        `;
        
        await client.query(createTableSQL);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ global_api_keys —Å–æ–∑–¥–∞–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const result = await client.query('SELECT service_name, is_active, description FROM global_api_keys ORDER BY service_name');
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${result.rows.length} –∑–∞–ø–∏—Å–µ–π:`);
        result.rows.forEach(row => {
            console.log(`   - ${row.service_name}: ${row.description} (${row.is_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'})`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error.message);
        throw error;
    } finally {
        await client.end();
    }
}

async function authenticate() {
    console.log('\n=== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Directus ===\n');
    
    try {
        const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
            email: ADMIN_EMAIL,
            password: ADMIN_PASSWORD
        });
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return response.data.data.access_token;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.data || error.message);
        throw error;
    }
}

async function refreshSchema(token) {
    console.log('\n=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã Directus ===\n');
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É
        await axios.post(`${DIRECTUS_URL}/schema/snapshot`, {}, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        console.log('‚úÖ –°—Ö–µ–º–∞ Directus –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        const collectionsResponse = await axios.get(`${DIRECTUS_URL}/collections`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        const globalApiKeysCollection = collectionsResponse.data.data.find(c => c.collection === 'global_api_keys');
        if (globalApiKeysCollection) {
            console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è global_api_keys –Ω–∞–π–¥–µ–Ω–∞ –≤ Directus');
        } else {
            console.log('‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è global_api_keys –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã:', error.response?.data || error.message);
        throw error;
    }
}

async function setupInterface(token) {
    console.log('\n=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===\n');
    
    try {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–µ–π
        const fieldsConfig = [
            {
                field: 'service_name',
                interface: 'input',
                options: { placeholder: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞' },
                display: 'raw',
                readonly: false,
                hidden: false,
                sort: 1,
                width: 'half'
            },
            {
                field: 'api_key',
                interface: 'input-hash',
                options: { placeholder: 'API –∫–ª—é—á', masked: true },
                display: 'raw',
                readonly: false,
                hidden: false,
                sort: 2,
                width: 'full'
            },
            {
                field: 'is_active',
                interface: 'boolean',
                options: {},
                display: 'boolean',
                readonly: false,
                hidden: false,
                sort: 3,
                width: 'half'
            },
            {
                field: 'description',
                interface: 'input',
                options: { placeholder: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞' },
                display: 'raw',
                readonly: false,
                hidden: false,
                sort: 4,
                width: 'full'
            }
        ];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        for (const fieldConfig of fieldsConfig) {
            try {
                await axios.patch(`${DIRECTUS_URL}/fields/global_api_keys/${fieldConfig.field}`, fieldConfig, {
                    headers: { Authorization: `Bearer ${token}` }
                });
                console.log(`‚úÖ –ü–æ–ª–µ ${fieldConfig.field} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ`);
            } catch (error) {
                console.log(`‚ö†Ô∏è  –ü–æ–ª–µ ${fieldConfig.field}: ${error.response?.data?.errors?.[0]?.message || '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞'}`);
            }
        }
        
        console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', error.response?.data || error.message);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
}

async function main() {
    try {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Global API Keys\n');
        
        // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await executeSQL();
        
        // 2. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Directus
        const token = await authenticate();
        
        // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É Directus
        await refreshSchema(token);
        
        // 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await setupInterface(token);
        
        console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');
        console.log('–¢–µ–ø–µ—Ä—å –≤ Directus –∞–¥–º–∏–Ω–∫–µ —Ç–∞–±–ª–∏—Ü–∞ Global API Keys –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:');
        console.log('- ID');
        console.log('- –°–µ—Ä–≤–∏—Å');
        console.log('- API –ö–ª—é—á (—Å–∫—Ä—ã—Ç—ã–π)');
        console.log('- –ê–∫—Ç–∏–≤–µ–Ω');
        console.log('- –û–ø–∏—Å–∞–Ω–∏–µ');
        
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error.message);
        process.exit(1);
    }
}

main();