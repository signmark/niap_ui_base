/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø–æ–ª—è metadata –≤ production –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É Stories –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é campaign_content
 */

import axios from 'axios';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const PRODUCTION_DIRECTUS_URL = 'https://directus.nplanner.ru';
const PRODUCTION_ADMIN_EMAIL = process.env.PRODUCTION_ADMIN_EMAIL || 'admin@nplanner.ru';
const PRODUCTION_ADMIN_PASSWORD = process.env.PRODUCTION_ADMIN_PASSWORD;

async function authenticate() {
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ production Directus...');
    
    const response = await axios.post(`${PRODUCTION_DIRECTUS_URL}/auth/login`, {
      email: PRODUCTION_ADMIN_EMAIL,
      password: PRODUCTION_ADMIN_PASSWORD
    });
    
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    return response.data.data.access_token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.data || error.message);
    throw error;
  }
}

async function checkFieldExists(token) {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—è metadata...');
    
    const response = await axios.get(
      `${PRODUCTION_DIRECTUS_URL}/fields/campaign_content`,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const metadataField = response.data.data.find(field => field.field === 'metadata');
    
    if (metadataField) {
      console.log('‚úÖ –ü–æ–ª–µ metadata —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return true;
    } else {
      console.log('‚ùå –ü–æ–ª–µ metadata –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—è:', error.response?.data || error.message);
    throw error;
  }
}

async function addMetadataField(token) {
  try {
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è metadata...');
    
    const fieldData = {
      field: 'metadata',
      type: 'json',
      schema: {
        default_value: {},
        is_nullable: true
      },
      meta: {
        interface: 'input-code',
        options: {
          language: 'json',
          template: '{}'
        },
        display: 'formatted-json-value',
        note: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (Stories, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç.–¥.)',
        hidden: false,
        readonly: false,
        required: false,
        sort: 20,
        width: 'full'
      }
    };
    
    const response = await axios.post(
      `${PRODUCTION_DIRECTUS_URL}/fields/campaign_content`,
      fieldData,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ –ü–æ–ª–µ metadata —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');
    return response.data.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—è:', error.response?.data || error.message);
    throw error;
  }
}

async function updateContentTypeConstraint(token) {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è content_type...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—è content_type
    const response = await axios.get(
      `${PRODUCTION_DIRECTUS_URL}/fields/campaign_content/content_type`,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    const currentField = response.data.data;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –ø–æ–ª—è, –¥–æ–±–∞–≤–ª—è—è 'stories' –≤ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const updatedOptions = {
      ...currentField.meta.options,
      choices: [
        { text: '–¢–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º', value: 'text-image' },
        { text: '–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç', value: 'text-only' },
        { text: '–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', value: 'image-only' },
        { text: '–í–∏–¥–µ–æ', value: 'video' },
        { text: 'Stories', value: 'stories' }
      ]
    };
    
    const updateData = {
      meta: {
        ...currentField.meta,
        options: updatedOptions
      }
    };
    
    await axios.patch(
      `${PRODUCTION_DIRECTUS_URL}/fields/campaign_content/content_type`,
      updateData,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è content_type –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:', error.response?.data || error.message);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
  }
}

async function refreshDirectusSchema(token) {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã Directus...');
    
    await axios.post(
      `${PRODUCTION_DIRECTUS_URL}/schema/snapshot`,
      {},
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ –°—Ö–µ–º–∞ Directus –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  } catch (error) {
    console.error('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã:', error.response?.data || error.message);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
  }
}

async function testMetadataField(token) {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è metadata...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    const response = await axios.get(
      `${PRODUCTION_DIRECTUS_URL}/items/campaign_content?limit=1&fields=id,content_type,metadata`,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('‚úÖ –ü–æ–ª–µ metadata —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${response.data.data.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—è:', error.response?.data || error.message);
    throw error;
  }
}

async function main() {
  try {
    console.log('üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Stories –≤ production...');
    console.log(`üåê Directus URL: ${PRODUCTION_DIRECTUS_URL}`);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${PRODUCTION_ADMIN_EMAIL}`);
    console.log('‚îÄ'.repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!PRODUCTION_ADMIN_PASSWORD) {
      throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (PRODUCTION_ADMIN_PASSWORD)');
    }
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const token = await authenticate();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è
    const fieldExists = await checkFieldExists(token);
    
    if (!fieldExists) {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ metadata
      await addMetadataField(token);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è content_type
    await updateContentTypeConstraint(token);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É Directus
    await refreshDirectusSchema(token);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–µ
    await testMetadataField(token);
    
    console.log('‚îÄ'.repeat(50));
    console.log('üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('');
    console.log('üìù –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:');
    console.log('  ‚úÖ –ü–æ–ª–µ metadata —Å–æ–∑–¥–∞–Ω–æ/–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ');
    console.log('  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ "Stories"');
    console.log('  ‚úÖ –°—Ö–µ–º–∞ Directus –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    console.log('  ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    console.log('');
    console.log('üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å Stories –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ!');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main();