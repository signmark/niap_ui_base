/**
 * –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

import imageSearchService from './server/services/image-search-service.js';

async function testRealImageSearch() {
  console.log('üîç –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  
  const testCases = [
    {
      text: 'technology innovation future',
      keywords: ['technology', 'innovation', 'future']
    },
    {
      text: 'food cooking recipes',
      keywords: ['food', 'cooking', 'recipes'] 
    },
    {
      text: 'travel nature mountains',
      keywords: ['travel', 'nature', 'mountains']
    },
    {
      text: 'sports fitness workout',
      keywords: ['sports', 'fitness', 'workout']
    }
  ];

  const results = [];
  let successCount = 0;
  let failCount = 0;

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    
    try {
      console.log(`üì∏ –¢–µ—Å—Ç ${i + 1}/4: –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è "${testCase.text}"`);
      console.log(`   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: [${testCase.keywords.join(', ')}]`);
      
      const startTime = Date.now();
      const result = await imageSearchService.findAndPrepareImage(testCase.text, testCase.keywords);
      const duration = Date.now() - startTime;
      
      const testResult = {
        testNumber: i + 1,
        query: testCase.text,
        keywords: testCase.keywords,
        success: result.success,
        size: result.size,
        source: result.source || 'fallback',
        originalUrl: result.originalUrl || '–Ω–µ—Ç URL',
        hasBuffer: !!result.imageBuffer,
        duration: duration
      };
      
      results.push(testResult);
      
      if (result.success && result.source !== 'fallback') {
        console.log(`   ‚úÖ –£—Å–ø–µ—Ö! –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.source}, –†–∞–∑–º–µ—Ä: ${result.size} bytes`);
        if (result.originalUrl) {
          console.log(`   üåê URL: ${result.originalUrl}`);
        }
        successCount++;
      } else {
        console.log(`   ‚ö†Ô∏è  –§–æ–ª–ª–±—ç–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –ø–∏–∫—Å–µ–ª—å), —Ä–∞–∑–º–µ—Ä: ${result.size} bytes`);
        failCount++;
      }
      
      console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms\n`);
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
      results.push({
        testNumber: i + 1,
        query: testCase.text,
        keywords: testCase.keywords,
        error: error.message,
        duration: 0
      });
      failCount++;
    }
  }
  
  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
  console.log(`   üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testCases.length}`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount} (—Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)`);
  console.log(`   ‚ö†Ô∏è  –§–æ–ª–ª–±—ç–∫–æ–≤: ${failCount} (1x1 –ø–∏–∫—Å–µ–ª—å –∏–ª–∏ –æ—à–∏–±–∫–∏)`);
  console.log(`   üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successCount / testCases.length) * 100).toFixed(1)}%`);
  
  // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  results.forEach((result, index) => {
    console.log(`${index + 1}. "${result.query}"`);
    if (result.error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
    } else {
      console.log(`   ${result.success && result.source !== 'fallback' ? '‚úÖ' : '‚ö†Ô∏è'} ${result.source} (${result.size} bytes, ${result.duration}ms)`);
    }
  });
  
  console.log('\nüéâ –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRealImageSearch().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  process.exit(1);
});