#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
 * –£–±–µ–∂–¥–∞–µ—Ç—Å—è —á—Ç–æ –¥–æ—Å—Ä–æ—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
 */

import fs from 'fs';
import path from 'path';

function checkSchedulerLogic() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π...\n');
  
  try {
    const schedulerPath = 'server/services/publish-scheduler.ts';
    const content = fs.readFileSync(schedulerPath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    const fixes = [
      {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è pending/scheduled',
        pattern: /–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–∂–µ –¥–ª—è pending\/scheduled/,
        description: '–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤ —Å—Ç–∞—Ç—É—Å–µ pending/scheduled'
      },
      {
        name: '–£—Å–ª–æ–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
        pattern: /timeUntilPublish <= 60000/,
        description: '–î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–æ–ø—É—Å–∫–æ–º 1 –º–∏–Ω—É—Ç–∞'
      },
      {
        name: '–õ–æ–≥–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è',
        pattern: /–≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ.*–û–ñ–ò–î–ê–ù–ò–ï/,
        description: '–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π'
      },
      {
        name: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
        pattern: /–ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ø—É–±–ª–∏–∫—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ \(–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\)/,
        description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π'
      }
    ];
    
    let fixedCount = 0;
    
    for (const fix of fixes) {
      if (fix.pattern.test(content)) {
        console.log(`‚úÖ ${fix.name}: ${fix.description}`);
        fixedCount++;
      } else {
        console.log(`‚ùå ${fix.name}: –ù–ï –ù–ê–ô–î–ï–ù–û`);
      }
    }
    
    console.log(`\nüìä –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${fixedCount}/${fixes.length}`);
    
    if (fixedCount === fixes.length) {
      console.log('üü¢ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´');
      console.log('\nüìã –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
      console.log('‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∞–∂–µ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤ —Å—Ç–∞—Ç—É—Å–µ pending/scheduled');
      console.log('‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Å –¥–æ–ø—É—Å–∫–æ–º 1 –º–∏–Ω—É—Ç–∞)');
      console.log('‚Ä¢ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –í–ö –∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º');
      console.log('‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      
      return true;
    } else {
      console.log('üî¥ –ù–ï –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´');
      return false;
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: ${error.message}`);
    return false;
  }
}

function checkForAntiPatterns() {
  console.log('\nüö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã...\n');
  
  try {
    const schedulerPath = 'server/services/publish-scheduler.ts';
    const content = fs.readFileSync(schedulerPath, 'utf8');
    
    const antiPatterns = [
      {
        name: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è pending',
        pattern: /anyPlatformPending\s*=\s*true.*return\s+true/s,
        problem: '–í–æ–∑–º–æ–∂–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏',
        severity: 'HIGH'
      },
      {
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏',
        pattern: /status.*pending.*publishContent/s,
        problem: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ scheduledAt',
        severity: 'CRITICAL'
      }
    ];
    
    let issuesFound = 0;
    
    for (const pattern of antiPatterns) {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
      if (content.includes('–ø—É–±–ª–∏–∫—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ') && !content.includes('–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û')) {
        console.log(`üî¥ ${pattern.name}: ${pattern.problem} (${pattern.severity})`);
        issuesFound++;
      }
    }
    
    if (issuesFound === 0) {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return true;
    } else {
      console.log(`üî¥ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issuesFound}`);
      return false;
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${error.message}`);
    return false;
  }
}

function checkDeploymentReadiness() {
  console.log('\nüöÄ –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é...\n');
  
  const checks = [
    { name: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞', result: checkSchedulerLogic() },
    { name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤', result: checkForAntiPatterns() }
  ];
  
  const passedChecks = checks.filter(check => check.result).length;
  const readiness = (passedChecks / checks.length) * 100;
  
  console.log(`\nüìà –ì–û–¢–û–í–ù–û–°–¢–¨ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ö –î–ï–ü–õ–û–Æ: ${readiness}%`);
  
  if (readiness === 100) {
    console.log('üü¢ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£');
    console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ä–æ—á–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –í–ö');
    console.log('‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–±–ª—é–¥–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è');
    console.log('‚Ä¢ –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω');
    return true;
  } else {
    console.log('üî¥ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('=' .repeat(80));
  console.log('üîß –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ô');
  console.log('=' .repeat(80));
  
  const isReady = checkDeploymentReadiness();
  
  console.log('\n' + '=' .repeat(80));
  console.log(isReady ? 
    '‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ' : 
    '‚ùå –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø'
  );
  console.log('=' .repeat(80));
  
  process.exit(isReady ? 0 : 1);
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}