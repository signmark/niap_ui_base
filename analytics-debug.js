/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
 * –í—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
 */

import axios from 'axios';
import fs from 'fs';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DIRECTUS_URL = process.env.DIRECTUS_URL || 'https://directus.nplanner.ru';
const ADMIN_EMAIL = process.env.DIRECTUS_ADMIN_EMAIL || 'lbrspb@gmail.com';
const ADMIN_PASSWORD = process.env.DIRECTUS_ADMIN_PASSWORD || 'QtpZ3dh7';
const API_URL = 'http://localhost:5000';

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = (message) => {
  const logMessage = `${new Date().toISOString()} - ${message}`;
  console.log(logMessage);
  fs.appendFileSync('analytics-debug.log', logMessage + '\n');
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
async function getToken() {
  try {
    const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD
    });
    
    if (response.data && response.data.data && response.data.data.access_token) {
      log('üîë –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      return response.data.data.access_token;
    } else {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
async function getAnalyticsFromLocalApi(token) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
    const platformsResponse = await axios.get(`${API_URL}/api/analytics/platforms`, {
      params: { period: '7days' },
      headers: { Authorization: `Bearer ${token}` }
    });
    
    log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö:');
    log(JSON.stringify(platformsResponse.data, null, 2));
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö
    const postsResponse = await axios.get(`${API_URL}/api/analytics/posts`, {
      params: { period: '7days' },
      headers: { Authorization: `Bearer ${token}` }
    });
    
    log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö:');
    log(JSON.stringify(postsResponse.data, null, 2));
    
    return {
      platforms: platformsResponse.data,
      posts: postsResponse.data
    };
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${error.message}`);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Directus –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
async function getPostsFromDirectus(token, userId) {
  try {
    const filter = {
      _and: [
        { user_id: { _eq: userId } },
        { status: { _in: ['published'] } }
      ]
    };
    
    const response = await axios.get(`${DIRECTUS_URL}/items/campaign_content`, {
      params: {
        filter: JSON.stringify(filter),
        limit: 5
      },
      headers: {
        Authorization: `Bearer ${token}`
      }
    });
    
    if (response.data && response.data.data) {
      const posts = response.data.data;
      log(`üìÑ –ü–æ–ª—É—á–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤ –∏–∑ Directus`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –∫–∞–∂–¥–æ–º –ø–æ—Å—Ç–µ
      for (const post of posts) {
        const platformsWithAnalytics = [];
        let totalViews = 0;
        
        // –î–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if (post.social_platforms) {
          for (const [platform, data] of Object.entries(post.social_platforms)) {
            if (data && data.analytics) {
              platformsWithAnalytics.push(platform);
              totalViews += data.analytics.views || 0;
            }
          }
        }
        
        log(`  üìä –ü–æ—Å—Ç ${post.id}: ${platformsWithAnalytics.length} –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π, –≤—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${totalViews}`);
      }
      
      return posts;
    } else {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ Directus: ${error.message}`);
    return null;
  }
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –∏ Directus
function compareData(apiData, directusData) {
  if (!apiData || !directusData) {
    log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ API –∏–ª–∏ Directus');
    return;
  }
  
  log('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –∏ Directus:');
  
  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ API
  const apiStats = apiData.posts.data.aggregated || {};
  
  // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö Directus
  let directusTotalViews = 0;
  let directusTotalEngagements = 0;
  
  for (const post of directusData) {
    if (post.social_platforms) {
      for (const [platform, data] of Object.entries(post.social_platforms)) {
        if (data && data.analytics) {
          directusTotalViews += data.analytics.views || 0;
          directusTotalEngagements += (data.analytics.likes || 0) +
                                     (data.analytics.comments || 0) +
                                     (data.analytics.shares || 0) +
                                     (data.analytics.clicks || 0);
        }
      }
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
  log(`  API –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${apiStats.totalViews}, Directus –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${directusTotalViews}`);
  log(`  API –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: ${apiStats.totalEngagements}, Directus –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: ${directusTotalEngagements}`);
  
  // –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
  const apiPlatforms = apiData.platforms.data.platforms || {};
  log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –∏–∑ API:');
  for (const [platform, data] of Object.entries(apiPlatforms)) {
    log(`  ${platform}: ${data.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, ${data.posts} –ø–æ—Å—Ç–æ–≤`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    log('üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = await getToken();
    
    // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω ID –∏–∑ —Å–∏—Å—Ç–µ–º—ã)
    const userId = '53921f16-f51d-4591-80b9-8caa4fde4d13';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API...');
    const apiData = await getAnalyticsFromLocalApi(token);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Directus
    log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Directus...');
    const directusData = await getPostsFromDirectus(token, userId);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    compareData(apiData, directusData);
    
    log('‚úÖ –û—Ç–ª–∞–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
main().catch(error => {
  log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});