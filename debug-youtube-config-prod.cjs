/**
 * –û—Ç–ª–∞–¥–∫–∞ YouTube –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
 */

const axios = require('axios');

async function debugYouTubeConfigProd() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ YouTube –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...');
    
    const prodUrl = 'https://smm.nplanner.ru';
    const directusUrl = 'https://directus.roboflow.space';
    
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:');
    console.log(`–ü—Ä–æ–¥–∞–∫—à–µ–Ω URL: ${prodUrl}`);
    console.log(`Directus URL: ${directusUrl}`);
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    try {
      const healthResponse = await axios.get(`${prodUrl}/health`);
      console.log('‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`–í–µ—Ä—Å–∏—è: ${healthResponse.data?.version || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      console.log(`–°—Ä–µ–¥–∞: ${healthResponse.data?.environment || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      console.log(`Uptime: ${Math.floor((healthResponse.data?.uptime || 0) / 60)} –º–∏–Ω—É—Ç`);
    } catch (error) {
      console.error('‚ùå –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return;
    }
    
    console.log('');
    console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Directus —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
    
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    const testToken = '–í–í–ï–î–ò–¢–ï_–ù–û–í–´–ô_DIRECTUS_TOKEN_–ó–î–ï–°–¨';
    
    if (testToken === '–í–í–ï–î–ò–¢–ï_–ù–û–í–´–ô_DIRECTUS_TOKEN_–ó–î–ï–°–¨') {
      console.log('‚ö†Ô∏è  –í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π DIRECTUS_TOKEN –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      console.log('   –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: https://directus.roboflow.space');
      console.log('   Settings > Access Tokens > Create new token');
      return;
    }
    
    try {
      const directusResponse = await axios.get(`${directusUrl}/server/info`, {
        headers: {
          Authorization: `Bearer ${testToken}`
        }
      });
      console.log('‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } catch (error) {
      console.error('‚ùå –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response?.status);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º YouTube –∫–ª—é—á–∏ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
    console.log('');
    console.log('üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º YouTube –∫–ª—é—á–∏ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
    
    const apiKeysResponse = await axios.get(`${directusUrl}/items/global_api_keys`, {
      params: {
        fields: ['service_name', 'api_key', 'is_active'],
        filter: {
          service_name: { _in: ['YOUTUBE_CLIENT_ID', 'YOUTUBE_CLIENT_SECRET', 'YOUTUBE_REDIRECT_URI'] },
          is_active: { _eq: true }
        }
      },
      headers: {
        Authorization: `Bearer ${testToken}`
      }
    });
    
    const apiKeys = apiKeysResponse.data?.data || [];
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${apiKeys.length} YouTube –∫–ª—é—á–µ–π`);
    
    if (apiKeys.length > 0) {
      console.log('‚úÖ YouTube –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã:');
      apiKeys.forEach(key => {
        if (key.service_name === 'YOUTUBE_REDIRECT_URI') {
          console.log(`   - ${key.service_name}: ${key.api_key}`);
          if (!key.api_key.includes('smm.nplanner.ru')) {
            console.log('   ‚ö†Ô∏è  Redirect URI –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω URL');
          }
        } else {
          console.log(`   - ${key.service_name}: ${key.api_key ? '–µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ' : '–ø—É—Å—Ç–æ–µ'}`);
        }
      });
    } else {
      console.log('‚ùå YouTube –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    console.log('');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç—å DIRECTUS_TOKEN –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
    console.log('2. –û–±–Ω–æ–≤–∏—Ç—å YOUTUBE_REDIRECT_URI –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('3. –û–±–Ω–æ–≤–∏—Ç—å Google OAuth –∫–æ–Ω—Å–æ–ª—å');
    console.log('4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  debugYouTubeConfigProd();
}

module.exports = { debugYouTubeConfigProd };