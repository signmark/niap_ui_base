/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã YouTube credentials –≤ global_api_keys
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç YOUTUBE_CLIENT_ID –∏ YOUTUBE_CLIENT_SECRET –≤ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å "YouTube"
 */

const DIRECTUS_URL = process.env.DIRECTUS_URL?.replace(/\/+$/, '') || 'https://directus.roboflow.tech';
const DIRECTUS_TOKEN = process.env.DIRECTUS_TOKEN;

async function fixYouTubeCredentials() {
  console.log('=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï YOUTUBE CREDENTIALS ===\n');

  if (!DIRECTUS_TOKEN) {
    console.error('‚ùå DIRECTUS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ global_api_keys
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ global_api_keys...');
    const response = await fetch(`${DIRECTUS_URL}/items/global_api_keys`, {
      headers: {
        'Authorization': `Bearer ${DIRECTUS_TOKEN}`
      }
    });

    const data = await response.json();
    const records = data.data || [];

    // –ò—â–µ–º YouTube –¥–∞–Ω–Ω—ã–µ
    const clientIdRecord = records.find(r => r.service_name === 'YOUTUBE_CLIENT_ID');
    const clientSecretRecord = records.find(r => r.service_name === 'YOUTUBE_CLIENT_SECRET');
    const youtubeRecord = records.find(r => r.service_name === 'YouTube');

    if (!clientIdRecord || !clientSecretRecord) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã YOUTUBE_CLIENT_ID –∏–ª–∏ YOUTUBE_CLIENT_SECRET –∑–∞–ø–∏—Å–∏');
      return;
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã YouTube credentials:');
    console.log(`   Client ID: ${clientIdRecord.api_key}`);
    console.log(`   Client Secret: ${clientSecretRecord.api_key}`);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å "YouTube"
    const youtubeData = {
      service_name: 'YouTube',
      api_key: clientIdRecord.api_key,
      api_secret: clientSecretRecord.api_key
    };

    if (youtubeRecord) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      console.log('\nüìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å YouTube...');
      const updateResponse = await fetch(`${DIRECTUS_URL}/items/global_api_keys/${youtubeRecord.id}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${DIRECTUS_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(youtubeData)
      });

      if (updateResponse.ok) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å YouTube —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ YouTube');
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      console.log('\nüìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å YouTube...');
      const createResponse = await fetch(`${DIRECTUS_URL}/items/global_api_keys`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${DIRECTUS_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(youtubeData)
      });

      if (createResponse.ok) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å YouTube —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ YouTube');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const checkResponse = await fetch(`${DIRECTUS_URL}/items/global_api_keys`, {
      headers: {
        'Authorization': `Bearer ${DIRECTUS_TOKEN}`
      }
    });

    const checkData = await checkResponse.json();
    const updatedYouTube = checkData.data?.find(r => r.service_name === 'YouTube');

    if (updatedYouTube) {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å YouTube –Ω–∞–π–¥–µ–Ω–∞:');
      console.log(`   Service: ${updatedYouTube.service_name}`);
      console.log(`   API Key: ${updatedYouTube.api_key}`);
      console.log(`   API Secret: ${updatedYouTube.api_secret ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    } else {
      console.error('‚ùå –ó–∞–ø–∏—Å—å YouTube –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ credentials:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixYouTubeCredentials();