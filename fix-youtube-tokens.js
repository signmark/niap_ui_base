/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è YouTube —Ç–æ–∫–µ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ accessToken –∏ refreshToken
 */

const DIRECTUS_URL = process.env.DIRECTUS_URL || "https://directus.roboflow.space";
const DIRECTUS_TOKEN = process.env.DIRECTUS_TOKEN || "qmn9oTXdwCKrCR3Pj-FmPNZsj-0WayJz";

async function fixYouTubeTokens() {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ YouTube —Ç–æ–∫–µ–Ω–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏
    const campaignsResponse = await fetch(`${DIRECTUS_URL}/items/user_campaigns?limit=-1`, {
      headers: {
        'Authorization': `Bearer ${DIRECTUS_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!campaignsResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: ${campaignsResponse.statusText}`);
    }

    const campaignsData = await campaignsResponse.json();
    const campaigns = campaignsData.data;

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: ${campaigns.length}`);

    let fixedCount = 0;
    let checkedCount = 0;

    for (const campaign of campaigns) {
      const socialSettings = campaign.social_media_settings;
      
      if (socialSettings && socialSettings.youtube) {
        checkedCount++;
        const youtube = socialSettings.youtube;
        
        console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é: ${campaign.title} (ID: ${campaign.id})`);
        
        let needsUpdate = false;
        const updatedYoutube = { ...youtube };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º accessToken
        if (youtube.accessToken) {
          const originalToken = youtube.accessToken;
          const cleanToken = originalToken.trim().replace(/\s+/g, '');
          
          if (originalToken !== cleanToken) {
            console.log(`   ‚ö†Ô∏è  AccessToken —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã (–¥–ª–∏–Ω–∞: ${originalToken.length} ‚Üí ${cleanToken.length})`);
            updatedYoutube.accessToken = cleanToken;
            needsUpdate = true;
          } else {
            console.log(`   ‚úÖ AccessToken —á–∏—Å—Ç—ã–π (–¥–ª–∏–Ω–∞: ${cleanToken.length})`);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º refreshToken
        if (youtube.refreshToken) {
          const originalRefresh = youtube.refreshToken;
          const cleanRefresh = originalRefresh.trim().replace(/\s+/g, '');
          
          if (originalRefresh !== cleanRefresh) {
            console.log(`   ‚ö†Ô∏è  RefreshToken —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã (–¥–ª–∏–Ω–∞: ${originalRefresh.length} ‚Üí ${cleanRefresh.length})`);
            updatedYoutube.refreshToken = cleanRefresh;
            needsUpdate = true;
          } else {
            console.log(`   ‚úÖ RefreshToken —á–∏—Å—Ç—ã–π (–¥–ª–∏–Ω–∞: ${cleanRefresh.length})`);
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (needsUpdate) {
          const updatedSettings = {
            ...socialSettings,
            youtube: updatedYoutube
          };
          
          const updateResponse = await fetch(`${DIRECTUS_URL}/items/user_campaigns/${campaign.id}`, {
            method: 'PATCH',
            headers: {
              'Authorization': `Bearer ${DIRECTUS_TOKEN}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              social_media_settings: updatedSettings
            })
          });
          
          if (updateResponse.ok) {
            console.log(`   üîß –¢–æ–∫–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
            fixedCount++;
          } else {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${updateResponse.statusText}`);
          }
        }
      }
    }
    
    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –ö–∞–º–ø–∞–Ω–∏–π —Å YouTube: ${checkedCount}`);
    console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${fixedCount}`);
    
    if (fixedCount > 0) {
      console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! YouTube —Ç–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤.`);
      console.log(`üí° –¢–µ–ø–µ—Ä—å YouTube Setup Wizard –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`);
    } else {
      console.log(`\n‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–∂–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixYouTubeTokens();