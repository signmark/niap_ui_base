/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É API –º–∞—Ä—à—Ä—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * –¥–ª—è Telegram –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Telegram API. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 * —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
 */

import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testCases = [
  {
    name: '–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    html: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è API',
    expectedStatus: 200
  },
  {
    name: 'HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    html: '<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> –∏ <i>–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>',
    expectedStatus: 200
  },
  {
    name: '–°–ø–∏—Å–æ–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
    html: `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞:</b>
    
    ‚Ä¢ –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç
    ‚Ä¢ <b>–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç</b> —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    ‚Ä¢ –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Å <i>–∫—É—Ä—Å–∏–≤–æ–º</i>`,
    expectedStatus: 200
  },
  {
    name: '–°–ª–æ–∂–Ω—ã–π HTML —Å —ç–º–æ–¥–∑–∏',
    html: `üî• <b>–ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!</b> üî•
    
    –°–µ–≥–æ–¥–Ω—è –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ:
    
    ‚Ä¢ üçé –Ø–±–ª–æ–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π 20%
    ‚Ä¢ üçå –ë–∞–Ω–∞–Ω—ã - 2 –∫–≥ –ø–æ —Ü–µ–Ω–µ 1
    ‚Ä¢ üçì –°–≤–µ–∂–∞—è –∫–ª—É–±–Ω–∏–∫–∞
    
    üõí –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏!`,
    expectedStatus: 200
  },
  {
    name: '–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏',
    html: '<b>–¢–µ—Å—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–≥–∞<i>–ö—É—Ä—Å–∏–≤ –∏ –∂–∏—Ä–Ω—ã–π',
    expectedStatus: 200
  }
];

/**
 * –í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞
 */
function printHeader() {
  console.log(`${colors.cyan}========== –¢–ï–°–¢–´ API –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø HTML ==========${colors.reset}`);
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 * @param {string} name –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
 * @param {boolean} success –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {object} response –û—Ç–≤–µ—Ç –æ—Ç API
 */
function printTestResult(name, success, response) {
  const statusText = success 
    ? `${colors.green}‚úì –ü–†–û–ô–î–ï–ù${colors.reset}` 
    : `${colors.red}‚úó –ü–†–û–í–ê–õ–ï–ù${colors.reset}`;
  
  console.log(`\n${colors.bright}=== –¢–µ—Å—Ç: ${name} ===${colors.reset}`);
  console.log(`–°—Ç–∞—Ç—É—Å: ${statusText}`);
  
  if (response) {
    console.log(`\n${colors.blue}–û—Ç–≤–µ—Ç:${colors.reset}`);
    console.log(JSON.stringify(response.data, null, 2));
    
    if (response.data.hasOwnProperty('fixedText') || response.data.hasOwnProperty('processedHtml')) {
      console.log(`\n${colors.yellow}–ò—Å—Ö–æ–¥–Ω—ã–π HTML:${colors.reset}`);
      console.log(response.input || testCase.html);
      
      console.log(`\n${colors.green}–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π HTML:${colors.reset}`);
      console.log(response.data.fixedText || response.data.processedHtml || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
    }
  }
  
  console.log('='.repeat(80));
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
 * @param {object} testCase –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
async function testFixHtmlRoute(testCase) {
  try {
    console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ /api/test/fix-html –¥–ª—è —Å–ª—É—á–∞—è '${testCase.name}'...`);
    
    const response = await axios.post('http://localhost:5000/api/test/fix-html', {
      text: testCase.html,
      aggressive: true
    });
    
    return {
      success: response.status === testCase.expectedStatus && response.data.success === true,
      data: response.data,
      status: response.status,
      input: testCase.html
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ /api/test/fix-html:', error.message);
    return {
      success: false,
      error: error.message,
      data: error.response?.data,
      status: error.response?.status,
      input: testCase.html
    };
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function runTests() {
  printHeader();
  
  let passedTests = 0;
  
  for (const [index, testCase] of testCases.entries()) {
    console.log(`\n${colors.yellow}–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ ${index + 1}/${testCases.length}: ${testCase.name}${colors.reset}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTML
    const result = await testFixHtmlRoute(testCase);
    
    printTestResult(testCase.name, result.success, result);
    
    if (result.success) {
      passedTests++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (index < testCases.length - 1) {
      console.log(`${colors.yellow}–ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...${colors.reset}`);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log(`${colors.cyan}========== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==========${colors.reset}`);
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testCases.length}`);
  console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
  console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testCases.length - passedTests}`);
  
  if (passedTests === testCases.length) {
    console.log(`${colors.green}‚úì –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${colors.reset}`);
    return true;
  } else {
    console.log(`${colors.red}‚úó –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API.${colors.reset}`);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();