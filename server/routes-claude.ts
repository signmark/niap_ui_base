import { Router, Request, Response } from 'express';
import { ClaudeService } from './services/claude';
import { ApiKeyService } from './services/api-keys';
import * as logger from './utils/logger';

/**
 * –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Request –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ userId
 */
declare global {
  namespace Express {
    interface Request {
      userId?: string;
    }
  }
}

export function registerClaudeRoutes(app: Router) {
  const router = app;
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ApiKeyService
  const apiKeyServiceInstance = new ApiKeyService();
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞ Claude –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async function getClaudeApiKey(req: Request): Promise<string | null> {
    try {
      const userId = req.userId;
      if (!userId) {
        logger.error('[claude-routes] Cannot get Claude API key: userId is missing in request');
        return null;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
      const authHeader = req.headers.authorization;
      const authToken = authHeader?.startsWith('Bearer ') ? authHeader.substring(7) : undefined;
      
      logger.log(`[claude-routes] Getting Claude API key for user ${userId}`, 'claude');
      logger.log(`[claude-routes] Auth token present: ${!!authToken}`, 'claude');
      
      const apiKey = await apiKeyServiceInstance.getApiKey(userId, 'claude', authToken);
      
      if (apiKey) {
        logger.log(`[claude-routes] Successfully retrieved Claude API key for user ${userId} (length: ${apiKey.length})`, 'claude');
        // –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞
        const maskedKey = apiKey.substring(0, 4) + '...' + apiKey.substring(apiKey.length - 4);
        logger.log(`[claude-routes] Claude API key starts with: ${maskedKey}`, 'claude');
      } else {
        logger.error(`[claude-routes] Claude API key not found for user ${userId}`, 'claude');
      }
      
      return apiKey;
    } catch (error) {
      logger.error('[claude-routes] Error getting Claude API key:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ Claude —Å API –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async function getClaudeService(req: Request): Promise<ClaudeService | null> {
    const apiKey = await getClaudeApiKey(req);
    
    if (!apiKey) {
      return null;
    }
    
    return new ClaudeService(apiKey);
  }

  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–∞ Claude
   */
  router.post('/api/claude/test-api-key', async (req: Request, res: Response) => {
    try {
      const { apiKey } = req.body;
      
      if (!apiKey) {
        logger.error('[claude-routes] API key not provided in test-api-key request');
        return res.status(400).json({
          success: false,
          error: 'API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω'
        });
      }
      
      logger.log(`[claude-routes] Testing Claude API key, length: ${apiKey.length}, starts with: ${apiKey.substring(0, 4)}...`);
      const claudeService = new ClaudeService(apiKey);
      const isValid = await claudeService.testApiKey();
      
      logger.log(`[claude-routes] Claude API key test result: ${isValid ? 'Valid' : 'Invalid'}`);
      
      return res.json({
        success: true,
        isValid: isValid
      });
    } catch (error) {
      logger.error('[claude-routes] Error testing Claude API key:', error);
      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞'
      });
    }
  });

  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞ Claude
   */
  router.post('/api/claude/save-api-key', async (req: Request, res: Response) => {
    try {
      const { apiKey } = req.body;
      const userId = req.userId;
      
      if (!userId) {
        return res.status(401).json({
          success: false,
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
        });
      }
      
      if (!apiKey) {
        return res.status(400).json({
          success: false,
          error: 'API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω'
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      const claudeService = new ClaudeService(apiKey);
      const isValid = await claudeService.testApiKey();
      
      if (!isValid) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á Claude'
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const success = await apiKeyServiceInstance.saveApiKey(userId, 'claude', apiKey);
      
      if (!success) {
        return res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞'
        });
      }
      
      return res.json({
        success: true
      });
    } catch (error) {
      logger.error('[claude-routes] Error saving Claude API key:', error);
      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞'
      });
    }
  });

  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Claude
   */
  router.post('/api/claude/improve-text', async (req: Request, res: Response) => {
    try {
      const { text, prompt, model } = req.body;
      const userId = req.userId;
      
      logger.log(`[claude-routes] Received improve-text request from user ${userId}`, 'claude');
      
      if (!text || !prompt) {
        logger.error('[claude-routes] Missing text or prompt in improve-text request', 'claude');
        return res.status(400).json({
          success: false,
          error: '–¢–µ–∫—Å—Ç –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
        });
      }
      
      logger.log(`[claude-routes] Getting Claude service for user ${userId}`, 'claude');
      const claudeService = await getClaudeService(req);
      
      if (!claudeService) {
        logger.error(`[claude-routes] Claude API key not configured for user ${userId}`, 'claude');
        return res.status(400).json({
          success: false,
          error: 'API –∫–ª—é—á Claude –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          needApiKey: true
        });
      }
      
      logger.log(`[claude-routes] Calling improveText with model ${model || 'default'}`, 'claude');
      const improvedText = await claudeService.improveText({ text, prompt, model });
      
      logger.log('[claude-routes] Text improved successfully, returning response', 'claude');
      return res.json({
        success: true,
        text: improvedText
      });
    } catch (error) {
      logger.error('[claude-routes] Error improving text with Claude:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      if (error instanceof Error) {
        logger.error(`[claude-routes] Error message: ${error.message}`, 'claude');
        if ('stack' in error) {
          logger.error(`[claude-routes] Error stack: ${error.stack}`, 'claude');
        }
      }
      
      return res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞'
      });
    }
  });

  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é Claude
   */
  router.post('/api/claude/generate-content', async (req: Request, res: Response) => {
    try {
      console.log('üöÄ –ó–ê–ü–†–û–° –í CLAUDE ENDPOINT –ü–û–õ–£–ß–ï–ù');
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ Claude:', req.body);
      
      const { prompt, model, useCampaignData, campaignId } = req.body;
      
      if (!prompt) {
        return res.status(400).json({
          success: false,
          error: '–ü—Ä–æ–º–ø—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
      }
      
      let enrichedPrompt = prompt;
      
      // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏, –ø–æ–ª—É—á–∞–µ–º –∏—Ö
      if (useCampaignData) {
        console.log('üéØ Claude: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏');
        try {
          // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          const authHeader = req.headers['authorization'] as string;
          if (authHeader && authHeader.startsWith('Bearer ')) {
            const token = authHeader.replace('Bearer ', '');
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userId (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            const userId = '53921f16-f51d-4591-80b9-8caa4fde4d13'; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π ID
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getCampaignContext –∏–∑ routes.ts
            const getCampaignContext = async (userId: string, campaignId: string, token: string): Promise<string | null> => {
              const { directusAuthManager } = await import('../services/directus-auth-manager.js');
              const axios = await import('axios');
              
              try {
                console.log(`INFO: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏ ${campaignId} —á–µ—Ä–µ–∑ DirectusAuthManager`);
                
                const userToken = await directusAuthManager.getAuthToken(userId);
                
                if (!userToken) {
                  console.log('WARN: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ DirectusAuthManager');
                  return null;
                }
                
                const directusApi = axios.default.create({
                  baseURL: 'https://directus.nplanner.ru',
                  timeout: 10000
                });
                
                const campaignResponse = await directusApi.get(`/items/user_campaigns/${campaignId}`, {
                  headers: {
                    'Authorization': `Bearer ${userToken}`,
                    'Content-Type': 'application/json'
                  }
                });
                
                console.log('INFO: –î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Directus');
                
                const campaignData = campaignResponse.data?.data;
                
                if (!campaignData) {
                  console.log('WARN: –î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                  return null;
                }
                
                console.log('INFO: –î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
                
                let context = '';
                
                if (campaignData.link) {
                  console.log(`INFO: –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –∫–∞–º–ø–∞–Ω–∏–∏: ${campaignData.link}`);
                  context += `\n\n–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∞–π—Ç –∫–∞–º–ø–∞–Ω–∏–∏: ${campaignData.link}`;
                }
                
                if (campaignData.name) {
                  context += `\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: ${campaignData.name}`;
                }
                if (campaignData.description) {
                  context += `\n–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: ${campaignData.description}`;
                }
                
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
                if (campaignData.questionnaire_id) {
                  try {
                    console.log(`INFO: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã ${campaignData.questionnaire_id}`);
                    const questionnaireResponse = await directusApi.get(`/items/campaign_questionnaires/${campaignData.questionnaire_id}`, {
                      headers: {
                        'Authorization': `Bearer ${userToken}`,
                        'Content-Type': 'application/json'
                      }
                    });
                    
                    const questionnaireData = questionnaireResponse.data?.data;
                    
                    if (questionnaireData) {
                      console.log('INFO: –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
                      
                      context += `\n\n–î–ê–ù–ù–´–ï –ö–û–ú–ü–ê–ù–ò–ò –ò–ó –ê–ù–ö–ï–¢–´:`;
                      
                      if (questionnaireData.company_name) {
                        context += `\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${questionnaireData.company_name}`;
                      }
                      if (questionnaireData.business_description) {
                        context += `\n–û–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: ${questionnaireData.business_description}`;
                      }
                    }
                  } catch (questionnaireError: any) {
                    console.log('WARN: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:', questionnaireError.message);
                  }
                }
                
                console.log('INFO: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                
                return context.trim() ? context : null;
              } catch (error: any) {
                console.error('ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏:', error.message);
                return null;
              }
            };
            
            if (campaignId) {
              const campaignContext = await getCampaignContext(userId, campaignId, token);
              if (campaignContext) {
                enrichedPrompt = `${prompt}\n\n–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏:${campaignContext}\n\n–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–∫–∞–∑–∞–Ω —Å–∞–π—Ç –∫–∞–º–ø–∞–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –ø–æ—Å—Ç–µ. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏.`;
                console.log('üî• Claude: –ü–†–û–ú–ü–¢ –° –î–ê–ù–ù–´–ú–ò –ö–ê–ú–ü–ê–ù–ò–ò –°–û–ó–î–ê–ù');
              }
            }
          }
        } catch (error) {
          console.error('Claude: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏:', error);
        }
      }
      
      const claudeService = await getClaudeService(req);
      
      if (!claudeService) {
        return res.status(400).json({
          success: false,
          error: 'API –∫–ª—é—á Claude –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          needApiKey: true
        });
      }
      
      const generatedContent = await claudeService.generateContent(enrichedPrompt, model);
      
      return res.json({
        success: true,
        text: generatedContent
      });
    } catch (error) {
      logger.error('[claude-routes] Error generating content with Claude:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞';
      let statusCode = 500;
      
      if (error instanceof Error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ Claude
        if (error.message.includes('529') || error.message.includes('server overload')) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä Claude –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é AI –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Gemini).';
          statusCode = 503; // Service Unavailable
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        else if (error.message.includes('401') || error.message.includes('unauthorized')) {
          errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º Claude. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.';
          statusCode = 401;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        else if (error.message.includes('429') || error.message.includes('rate limit')) {
          errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Claude API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
          statusCode = 429;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
        else if (error.message.includes('network') || error.message.includes('timeout')) {
          errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Claude API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
          statusCode = 503;
        }
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"
        else if (error.message.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫')) {
          errorMessage = 'Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini –∏–ª–∏ –¥—Ä—É–≥—É—é AI –º–æ–¥–µ–ª—å.';
          statusCode = 503;
        }
      }
      
      return res.status(statusCode).json({
        success: false,
        error: errorMessage
      });
    }
  });
  
  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é Claude
   */
  router.post('/api/claude/generate-social-content', async (req: Request, res: Response) => {
    try {
      const { keywords, prompt, platform, tone, model } = req.body;
      const userId = req.userId;
      
      logger.log(`[claude-routes] Received generate-social-content request from user ${userId} for platform ${platform}`, 'claude');
      
      if (!keywords || !Array.isArray(keywords) || keywords.length === 0) {
        logger.error('[claude-routes] Missing or invalid keywords in request', 'claude');
        return res.status(400).json({
          success: false,
          error: '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞'
        });
      }
      
      if (!prompt) {
        logger.error('[claude-routes] Missing prompt in request', 'claude');
        return res.status(400).json({
          success: false,
          error: '–ü—Ä–æ–º–ø—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
      }
      
      logger.log(`[claude-routes] Getting Claude service for user ${userId}`, 'claude');
      const claudeService = await getClaudeService(req);
      
      if (!claudeService) {
        logger.error(`[claude-routes] Claude API key not configured for user ${userId}`, 'claude');
        return res.status(400).json({
          success: false,
          error: 'API –∫–ª—é—á Claude –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          needApiKey: true
        });
      }
      
      logger.log(`[claude-routes] Generating social content with model ${model || 'default'} for platform ${platform || 'general'}`, 'claude');
      const generatedContent = await claudeService.generateSocialContent(
        keywords,
        prompt,
        {
          platform,
          tone,
          model
        }
      );
      
      logger.log('[claude-routes] Social content generated successfully, returning response', 'claude');
      return res.json({
        success: true,
        content: generatedContent,
        service: 'claude'
      });
    } catch (error) {
      logger.error('[claude-routes] Error generating social content with Claude:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      if (error instanceof Error) {
        logger.error(`[claude-routes] Error message: ${error.message}`, 'claude');
        if ('stack' in error) {
          logger.error(`[claude-routes] Error stack: ${error.stack}`, 'claude');
        }
      }
      
      return res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
      });
    }
  });

  return router;
}