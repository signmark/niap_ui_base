import express from 'express';
import { log } from '../utils/logger';
import axios from 'axios';

const router = express.Router();

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ Instagram –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ JSON –∫–∞–º–ø–∞–Ω–∏–∏
 */
router.get('/campaigns/:campaignId/instagram-settings', async (req, res) => {
  const { campaignId } = req.params;
  const userToken = req.headers.authorization?.replace('Bearer ', '');

  try {

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ fallback –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const tokenToUse = userToken || process.env.DIRECTUS_TOKEN;
    
    if (!tokenToUse) {
      return res.status(401).json({
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'
      });
    }


    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    const getCampaignResponse = await axios.get(
      `${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`,
      {
        headers: {
          Authorization: `Bearer ${tokenToUse}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const campaign = getCampaignResponse.data.data;
    const socialMediaSettings = campaign.social_media_settings || {};
    const instagramSettings = socialMediaSettings.instagram || null;

    res.json({
      success: true,
      settings: instagramSettings
    });

  } catch (error: any) {
    console.error('‚ùå Error retrieving Instagram settings:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Instagram –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      details: error.message
    });
  }
});

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Instagram –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ JSON –∫–∞–º–ø–∞–Ω–∏–∏
 */
router.patch('/campaigns/:campaignId/instagram-settings', async (req, res) => {
  const { campaignId } = req.params;
  const { appId, appSecret, instagramId, accessToken, setupCompletedAt } = req.body;
  const userToken = req.headers.authorization?.replace('Bearer ', '');

  try {

    if (!appId || !appSecret) {
      return res.status(400).json({
        success: false,
        error: 'App ID –∏ App Secret –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü–æ–ª—É—á–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    const getCampaignResponse = await axios.get(
      `${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`,
      {
        headers: {
          Authorization: `Bearer ${userToken}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const campaign = getCampaignResponse.data.data;
    const existingSettings = campaign.social_media_settings || {};

    // –û–±–Ω–æ–≤–ª—è–µ–º Instagram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏)
    const existingInstagram = existingSettings.instagram || {};
    const updatedSettings = {
      ...existingSettings,
      instagram: {
        ...existingInstagram, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–∫–µ–Ω—ã, –∞–∫–∫–∞—É–Ω—Ç—ã)
        appId,
        appSecret, // App Secret —Ç–æ–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î
        instagramId: instagramId || existingInstagram.instagramId || '',
        accessToken: accessToken || existingInstagram.accessToken, // –°–æ—Ö—Ä–∞–Ω—è–µ–º accessToken
        setupCompletedAt: setupCompletedAt || new Date().toISOString(),
        configured: true
      }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const updateResponse = await axios.patch(
      `${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`,
      {
        social_media_settings: updatedSettings
      },
      {
        headers: {
          Authorization: `Bearer ${userToken}`,
          'Content-Type': 'application/json'
        }
      }
    );


    res.json({
      success: true,
      data: updatedSettings.instagram
    });

  } catch (error: any) {
    console.error('‚ùå Error saving Instagram settings:', error?.response?.data || error.message);
    
    res.status(500).json({
      success: false,
      error: error?.response?.data?.errors?.[0]?.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Instagram'
    });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ Instagram Business Account ID —á–µ—Ä–µ–∑ Graph API
 */
router.post('/campaigns/:campaignId/fetch-instagram-business-id', async (req, res) => {
  const { campaignId } = req.params;
  const { accessToken } = req.body;
  const userToken = req.headers.authorization?.replace('Bearer ', '');

  try {
    console.log('üîç Fetching Instagram Business Account ID for campaign:', campaignId);
    console.log('üîç Access Token provided:', accessToken ? 'YES' : 'NO');
    console.log('üîç User Token provided:', userToken ? 'YES' : 'NO');
    
    if (!accessToken) {
      console.log('‚ùå Missing access token');
      return res.status(400).json({
        success: false,
        error: 'Access Token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Business Account ID'
      });
    }

    if (!userToken) {
      console.log('‚ùå Missing user token');
      return res.status(401).json({
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã Facebook –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pagesResponse = await axios.get(
      `https://graph.facebook.com/v23.0/me/accounts?access_token=${accessToken}&fields=id,name,instagram_business_account,connected_instagram_account`
    );


    const pages = pagesResponse.data.data || [];
    let instagramBusinessAccountId = null;
    let availablePages = [];

    // –ò—â–µ–º Instagram Business Account —Å—Ä–µ–¥–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    for (const page of pages) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ç–∏–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: instagram_business_account –ò connected_instagram_account
      const hasBusinessAccount = !!(page.instagram_business_account && page.instagram_business_account.id);
      const hasConnectedAccount = !!(page.connected_instagram_account && page.connected_instagram_account.id);
      
      availablePages.push({
        id: page.id,
        name: page.name,
        hasInstagramBusiness: hasBusinessAccount,
        hasConnectedInstagram: hasConnectedAccount,
        instagramBusinessId: page.instagram_business_account?.id || null,
        connectedInstagramId: page.connected_instagram_account?.id || null
      });
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º instagram_business_account, –ø–æ—Ç–æ–º connected_instagram_account
      if (page.instagram_business_account && page.instagram_business_account.id) {
        instagramBusinessAccountId = page.instagram_business_account.id;
        console.log('‚úÖ Found Instagram Business Account ID:', instagramBusinessAccountId);
        console.log('‚úÖ From Facebook page:', page.name, '(ID:', page.id, ') via instagram_business_account');
        break;
      } else if (page.connected_instagram_account && page.connected_instagram_account.id) {
        instagramBusinessAccountId = page.connected_instagram_account.id;
        console.log('‚úÖ Found Instagram Account ID via connected_instagram_account:', instagramBusinessAccountId);
        console.log('‚úÖ From Facebook page:', page.name, '(ID:', page.id, ') via connected_instagram_account');
        break;
      }
    }


    if (!instagramBusinessAccountId) {
      return res.status(404).json({
        success: false,
        error: 'Instagram Business Account –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∞ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–≤—è–∑–∞–Ω–∞ —Å Instagram Business –∞–∫–∫–∞—É–Ω—Ç–æ–º.',
        details: {
          availablePages: availablePages,
          message: '–ù–∏ –æ–¥–Ω–∞ –∏–∑ –≤–∞—à–∏—Ö Facebook —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å Instagram Business –∞–∫–∫–∞—É–Ω—Ç–æ–º. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Instagram Business –∞–∫–∫–∞—É–Ω—Ç –∫ –æ–¥–Ω–æ–π –∏–∑ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü.'
        }
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º Instagram Business Account ID –≤ –∫–∞–º–ø–∞–Ω–∏—é
    console.log('üíæ Saving Instagram Business Account ID to campaign...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–∫–µ–Ω
    const getCampaignResponse = await axios.get(
      `${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`,
      {
        headers: {
          Authorization: `Bearer ${process.env.DIRECTUS_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const campaign = getCampaignResponse.data.data;
    const currentSocialMediaSettings = campaign.social_media_settings || {};
    const currentInstagramSettings = currentSocialMediaSettings.instagram || {};

    // –û–±–Ω–æ–≤–ª—è–µ–º Instagram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –Ω–æ–≤—ã–º Business Account ID
    const updatedInstagramSettings = {
      ...currentInstagramSettings,
      businessAccountId: instagramBusinessAccountId,
      businessAccountIdFetchedAt: new Date().toISOString()
    };

    const updatedSocialMediaSettings = {
      ...currentSocialMediaSettings,
      instagram: updatedInstagramSettings
    };

    console.log('üíæ Saving with Business Account ID:', instagramBusinessAccountId);
    console.log('üíæ Full Instagram settings to save:', JSON.stringify(updatedInstagramSettings, null, 2));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–∫–µ–Ω
    const updateResponse = await axios.patch(
      `${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`,
      {
        social_media_settings: updatedSocialMediaSettings
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.DIRECTUS_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('‚úÖ Instagram Business Account ID saved successfully');

    res.json({
      success: true,
      businessAccountId: instagramBusinessAccountId,
      message: 'Instagram Business Account ID —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
    });

  } catch (error: any) {
    console.error('‚ùå Error fetching Instagram Business Account ID:', error.response?.data || error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Instagram Business Account ID',
      details: error.response?.data || error.message
    });
  }
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞
 */
router.post('/campaigns/:campaignId/check-facebook-page', async (req, res) => {
  const { campaignId } = req.params;
  const { accessToken, pageId } = req.body;
  const userToken = req.headers.authorization?.replace('Bearer ', '');

  try {
    console.log('üîç Checking specific Facebook page:', pageId);
    
    if (!accessToken || !pageId) {
      return res.status(400).json({
        success: false,
        error: 'Access Token –∏ Page ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    if (!userToken) {
      return res.status(401).json({
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    try {
      const pageResponse = await axios.get(
        `https://graph.facebook.com/v23.0/${pageId}?access_token=${accessToken}&fields=id,name,instagram_business_account,connected_instagram_account`
      );


      const page = pageResponse.data;
      const hasBusinessAccount = !!(page.instagram_business_account && page.instagram_business_account.id);
      const hasConnectedAccount = !!(page.connected_instagram_account && page.connected_instagram_account.id);

      let instagramAccountId = null;
      let accountType = null;

      if (hasBusinessAccount) {
        instagramAccountId = page.instagram_business_account.id;
        accountType = 'business_account';
      } else if (hasConnectedAccount) {
        instagramAccountId = page.connected_instagram_account.id;
        accountType = 'connected_account';
      }

      const result = {
        pageId: page.id,
        pageName: page.name,
        hasInstagramBusiness: hasBusinessAccount,
        hasConnectedInstagram: hasConnectedAccount,
        instagramAccountId,
        accountType,
        instagramBusinessId: page.instagram_business_account?.id || null,
        connectedInstagramId: page.connected_instagram_account?.id || null
      };


      if (instagramAccountId) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π Instagram Account ID –≤ –∫–∞–º–ø–∞–Ω–∏—é
        const getCampaignResponse = await axios.get(
          `${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`,
          {
            headers: {
              Authorization: `Bearer ${process.env.DIRECTUS_TOKEN}`,
              'Content-Type': 'application/json'
            }
          }
        );

        const campaign = getCampaignResponse.data.data;
        const currentSocialMediaSettings = campaign.social_media_settings || {};
        const currentInstagramSettings = currentSocialMediaSettings.instagram || {};

        const updatedInstagramSettings = {
          ...currentInstagramSettings,
          businessAccountId: instagramAccountId,
          businessAccountIdFetchedAt: new Date().toISOString(),
          pageId: page.id,
          pageName: page.name,
          accountType
        };

        const updatedSocialMediaSettings = {
          ...currentSocialMediaSettings,
          instagram: updatedInstagramSettings
        };

        await axios.patch(
          `${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`,
          {
            social_media_settings: updatedSocialMediaSettings
          },
          {
            headers: {
              Authorization: `Bearer ${process.env.DIRECTUS_TOKEN}`,
              'Content-Type': 'application/json'
            }
          }
        );

        console.log('‚úÖ Instagram Account ID saved from specific page check');

        res.json({
          success: true,
          result,
          businessAccountId: instagramAccountId,
          message: `Instagram –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page.name} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`
        });
      } else {
        res.json({
          success: false,
          result,
          error: `–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π Instagram –∞–∫–∫–∞—É–Ω—Ç`
        });
      }

    } catch (pageError: any) {
      console.error('‚ùå Error checking specific page:', pageError.response?.data || pageError.message);
      
      if (pageError.response?.status === 403) {
        res.status(403).json({
          success: false,
          error: `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageId}. –í–æ–∑–º–æ–∂–Ω–æ —É —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`
        });
      } else {
        res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
          details: pageError.response?.data || pageError.message
        });
      }
    }

  } catch (error: any) {
    console.error('‚ùå Error in page check:', error.response?.data || error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
      details: error.response?.data || error.message
    });
  }
});

/**
 * –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post('/campaigns/:campaignId/discover-instagram-accounts', async (req, res) => {
  const { campaignId } = req.params;
  const { accessToken } = req.body;
  const userToken = req.headers.authorization?.replace('Bearer ', '');

  try {
    console.log('üîç Discovering Instagram accounts for campaign:', campaignId);
    
    if (!accessToken) {
      return res.status(400).json({
        success: false,
        error: 'Access Token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    if (!userToken) {
      return res.status(401).json({
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    const discoveredAccounts: Array<{
      pageId: string;
      pageName: string;
      instagramId: string;
      accountType: string;
    }> = [];

    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pagesResponse = await axios.get(
      `https://graph.facebook.com/v23.0/me/accounts?access_token=${accessToken}&fields=id,name`
    );


    // –®–∞–≥ 2: –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º Instagram –∞–∫–∫–∞—É–Ω—Ç—ã
    for (const page of pagesResponse.data.data) {
      try {
        
        const pageInstagramResponse = await axios.get(
          `https://graph.facebook.com/v23.0/${page.id}?access_token=${accessToken}&fields=id,name,instagram_business_account,connected_instagram_account`
        );

        const pageData = pageInstagramResponse.data;
        const hasBusinessAccount = !!(pageData.instagram_business_account && pageData.instagram_business_account.id);
        const hasConnectedAccount = !!(pageData.connected_instagram_account && pageData.connected_instagram_account.id);

        if (hasBusinessAccount) {
          discoveredAccounts.push({
            pageId: pageData.id,
            pageName: pageData.name,
            instagramId: pageData.instagram_business_account.id,
            accountType: 'business_account'
          });
          console.log(`‚úÖ Found Business Account: ${pageData.name} -> ${pageData.instagram_business_account.id}`);
        } else if (hasConnectedAccount) {
          discoveredAccounts.push({
            pageId: pageData.id,
            pageName: pageData.name,
            instagramId: pageData.connected_instagram_account.id,
            accountType: 'connected_account'
          });
          console.log(`‚úÖ Found Connected Account: ${pageData.name} -> ${pageData.connected_instagram_account.id}`);
        } else {
          console.log(`‚ùå No Instagram account for page: ${pageData.name}`);
        }

      } catch (pageError: any) {
        console.error(`‚ùå Error checking page ${page.name}:`, pageError.response?.data || pageError.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      }
    }

    // –®–∞–≥ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ API –¥–∞–Ω–Ω—ã–µ

    console.log(`üéâ Discovery complete! Found ${discoveredAccounts.length} Instagram accounts`);
    
    // –ü–æ–ª—É—á–∞–µ–º username'—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞
    const formattedAccounts = [];
    
    for (const account of discoveredAccounts) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± Instagram –∞–∫–∫–∞—É–Ω—Ç–µ —á–µ—Ä–µ–∑ Graph API
        const instagramInfoResponse = await axios.get(
          `https://graph.facebook.com/v23.0/${account.instagramId}?access_token=${accessToken}&fields=id,username,name`
        );
        
        const instagramData = instagramInfoResponse.data;
        const displayName = instagramData.username ? `@${instagramData.username}` : account.pageName;
        
        formattedAccounts.push({
          id: account.instagramId,
          name: displayName,
          username: instagramData.username,
          pageId: account.pageId,
          accountType: account.accountType
        });
        
        console.log(`‚úÖ Instagram account details: ${account.instagramId} -> ${displayName}`);
        
      } catch (instagramError: any) {
        console.error(`‚ùå Error fetching Instagram details for ${account.instagramId}:`, instagramError.response?.data || instagramError.message);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å –∏–º–µ–Ω–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        formattedAccounts.push({
          id: account.instagramId,
          name: account.pageName,
          username: null,
          pageId: account.pageId,
          accountType: account.accountType
        });
        
        console.log(`‚úÖ Using fallback page name for ${account.instagramId}: ${account.pageName}`);
      }
    }

    res.json({
      success: true,
      accounts: formattedAccounts,
      totalFound: formattedAccounts.length
    });

  } catch (error: any) {
    console.error('‚ùå Error in Instagram discovery:', error.response?.data || error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
      details: error.response?.data || error.message
    });
  }
});

export default router;