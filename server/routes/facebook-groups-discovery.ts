import express from 'express';
import axios from 'axios';
import { log } from '../utils/logger';

const router = express.Router();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å Facebook —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
router.get('/campaigns/:campaignId/discover-facebook-groups', async (req, res) => {
  try {
    const { campaignId } = req.params;
    const { accessToken } = req.query;

    if (!accessToken) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è accessToken –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø'
      });
    }

    console.log('üîç [FB-GROUPS] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Facebook –≥—Ä—É–ø–ø...');

    // 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pagesResponse = await axios.get(`https://graph.facebook.com/me/accounts`, {
      params: {
        access_token: accessToken,
        fields: 'id,name,access_token,category'
      }
    });

    console.log('üìÑ [FB-GROUPS] –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü:', pagesResponse.data.data.length);

    const discoveredGroups = [];

    // 2. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    for (const page of pagesResponse.data.data) {
      console.log(`üîç [FB-GROUPS] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page.name} (${page.id})`);

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã, –≥–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const groupsResponse = await axios.get(`https://graph.facebook.com/${page.id}/groups`, {
          params: {
            access_token: page.access_token,
            fields: 'id,name,description,privacy,member_count,cover'
          }
        });

        if (groupsResponse.data.data && groupsResponse.data.data.length > 0) {
          console.log(`üìä [FB-GROUPS] –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page.name}:`, groupsResponse.data.data.length);

          for (const group of groupsResponse.data.data) {
            discoveredGroups.push({
              groupId: group.id,
              groupName: group.name,
              groupDescription: group.description || '',
              privacy: group.privacy,
              memberCount: group.member_count || 0,
              cover: group.cover?.source || '',
              linkedPageId: page.id,
              linkedPageName: page.name,
              pageAccessToken: page.access_token
            });
          }
        }
      } catch (groupError) {
        console.log(`‚ö†Ô∏è [FB-GROUPS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page.name}:`, groupError.response?.data || groupError.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
      }
    }

    // 3. –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
    try {
      const userGroupsResponse = await axios.get(`https://graph.facebook.com/me/groups`, {
        params: {
          access_token: accessToken,
          fields: 'id,name,description,privacy,member_count,cover,administrator'
        }
      });

      if (userGroupsResponse.data.data) {
        for (const group of userGroupsResponse.data.data) {
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
          if (group.administrator) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const alreadyAdded = discoveredGroups.find(g => g.groupId === group.id);
            if (!alreadyAdded) {
              discoveredGroups.push({
                groupId: group.id,
                groupName: group.name,
                groupDescription: group.description || '',
                privacy: group.privacy,
                memberCount: group.member_count || 0,
                cover: group.cover?.source || '',
                linkedPageId: null,
                linkedPageName: '–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø',
                pageAccessToken: null,
                userAccessToken: accessToken
              });
            }
          }
        }
      }
    } catch (userGroupError) {
      console.log(`‚ö†Ô∏è [FB-GROUPS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, userGroupError.response?.data || userGroupError.message);
    }

    console.log(`‚úÖ [FB-GROUPS] –í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø: ${discoveredGroups.length}`);

    res.json({
      success: true,
      groups: discoveredGroups,
      totalGroups: discoveredGroups.length,
      groupsByPage: discoveredGroups.reduce((acc, group) => {
        const pageKey = group.linkedPageName || '–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø';
        if (!acc[pageKey]) acc[pageKey] = [];
        acc[pageKey].push(group);
        return acc;
      }, {} as Record<string, any[]>)
    });

  } catch (error) {
    console.log('‚ùå [FB-GROUPS] –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Facebook –≥—Ä—É–ø–ø',
      details: error.response?.data || error.message
    });
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
router.post('/campaigns/:campaignId/save-facebook-groups', async (req, res) => {
  try {
    const { campaignId } = req.params;
    const { selectedGroups } = req.body;

    if (!selectedGroups || !Array.isArray(selectedGroups)) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ selectedGroups'
      });
    }

    console.log(`üíæ [FB-GROUPS] –°–æ—Ö—Ä–∞–Ω—è–µ–º ${selectedGroups.length} –≥—Ä—É–ø–ø –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${campaignId}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const getCurrentSettings = await fetch(`${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!getCurrentSettings.ok) {
      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–ø–∞–Ω–∏–∏'
      });
    }

    const currentData = await getCurrentSettings.json();
    const currentSettings = currentData.data?.social_media_settings || {};

    // –û–±–Ω–æ–≤–ª—è–µ–º Facebook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏
    const updatedFacebookSettings = {
      ...currentSettings.facebook,
      groups: selectedGroups.map(group => ({
        groupId: group.groupId,
        groupName: group.groupName,
        privacy: group.privacy,
        memberCount: group.memberCount,
        linkedPageId: group.linkedPageId,
        linkedPageName: group.linkedPageName,
        enabled: true
      }))
    };

    const updatedSettings = {
      ...currentSettings,
      facebook: updatedFacebookSettings
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const updateResponse = await fetch(`${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        social_media_settings: updatedSettings
      })
    });

    if (!updateResponse.ok) {
      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–ø–∞–Ω–∏–∏'
      });
    }

    console.log(`‚úÖ [FB-GROUPS] –ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${campaignId}`);

    res.json({
      success: true,
      message: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${selectedGroups.length} Facebook –≥—Ä—É–ø–ø`,
      groups: selectedGroups
    });

  } catch (error) {
    console.log('‚ùå [FB-GROUPS] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Facebook –≥—Ä—É–ø–ø',
      details: error.message
    });
  }
});

export default router;