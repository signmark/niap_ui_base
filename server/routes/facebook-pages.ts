import express from 'express';
import axios from 'axios';

const router = express.Router();

// GET /api/facebook/pages - –ø–æ–ª—É—á–µ–Ω–∏–µ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/pages', async (req, res) => {
  try {
    console.log('üîµ [FACEBOOK-PAGES] Request received with query params:', req.query);
    const { token, access_token } = req.query;
    const accessToken = token || access_token;

    console.log('üîµ [FACEBOOK-PAGES] Extracted tokens:', {
      token: token ? (token as string).substring(0, 20) + '...' : 'null',
      access_token: access_token ? (access_token as string).substring(0, 20) + '...' : 'null',
      accessToken: accessToken ? (accessToken as string).substring(0, 20) + '...' : 'null'
    });

    if (!accessToken) {
      console.log('‚ùå [FACEBOOK-PAGES] No access token provided');
      return res.status(400).json({
        error: 'Access token is required'
      });
    }

    console.log('üîµ [FACEBOOK-PAGES] Fetching Facebook pages with token:', (accessToken as string).substring(0, 20) + '...');

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º user ID
    const userResponse = await axios.get(`https://graph.facebook.com/v18.0/me`, {
      params: {
        access_token: accessToken,
        fields: 'id,name'
      },
      timeout: 10000
    });

    const userId = userResponse.data.id;
    console.log('üîµ [FACEBOOK-PAGES] User ID obtained:', userId);

    // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /{user-id}/accounts
    const response = await axios.get(`https://graph.facebook.com/v18.0/${userId}/accounts`, {
      params: {
        access_token: accessToken,
        fields: 'id,name,access_token,category,tasks'
      },
      timeout: 10000
    });

    const allAccounts = response.data.data || [];
    
    console.log('üîµ [FACEBOOK-PAGES] All accounts from Facebook API:', allAccounts.map((account: any) => ({
      id: account.id,
      name: account.name,
      category: account.category,
      tasks: account.tasks
    })));
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Facebook –°–¢–†–ê–ù–ò–¶–´, –∏—Å–∫–ª—é—á–∞–µ–º –≥—Ä—É–ø–ø—ã
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —É account –ø–æ–ª–µ tasks - —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    // –ì—Ä—É–ø–ø—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π endpoint –∏ –Ω–µ –∏–º–µ—é—Ç tasks
    const pages = allAccounts.filter((account: any) => {
      console.log(`üîç [FACEBOOK-PAGES] Checking account ${account.name} (${account.id}):`, {
        category: account.category,
        hasTasks: !!account.tasks,
        tasks: account.tasks || 'none'
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∞ –Ω–µ –≥—Ä—É–ø–ø–∞
      // –£ —Å—Ç—Ä–∞–Ω–∏—Ü –µ—Å—Ç—å tasks, —É –≥—Ä—É–ø–ø –∏—Ö –Ω–µ—Ç –≤ —ç—Ç–æ–º endpoint
      if (!account.tasks || !Array.isArray(account.tasks)) {
        console.log(`‚ùå [FACEBOOK-PAGES] Skipping ${account.name} - no tasks (likely group)`);
        return false;
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      const hasManagetasks = account.tasks.includes('MANAGE');
      const hasCreateContent = account.tasks.includes('CREATE_CONTENT');
      
      if (!hasManagetasks || !hasCreateContent) {
        console.log(`‚ùå [FACEBOOK-PAGES] Skipping ${account.name} - insufficient permissions`);
        return false;
      }
      
      console.log(`‚úÖ [FACEBOOK-PAGES] Valid page found: ${account.name}`);
      return true;
    });
    
    console.log('üîµ [FACEBOOK-PAGES] Facebook pages fetched successfully:', {
      count: pages.length,
      pages: pages.map((p: any) => ({ id: p.id, name: p.name, category: p.category }))
    });

    res.json({
      pages: pages
    });

  } catch (error: any) {
    console.error('‚ùå [FACEBOOK-PAGES] Error fetching Facebook pages:', error.response?.data || error.message);
    
    let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã Facebook';
    
    if (error.response?.data?.error) {
      const fbError = error.response.data.error;
      if (fbError.code === 190) {
        errorMessage = '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞';
      } else if (fbError.code === 104) {
        errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º';
      } else {
        errorMessage = fbError.message || errorMessage;
      }
    }

    res.status(400).json({
      error: errorMessage
    });
  }
});

export default router;