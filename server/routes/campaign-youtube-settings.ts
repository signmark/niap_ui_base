import express from 'express';
import axios from 'axios';
import { log } from '../utils/logger';

const router = express.Router();

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ YouTube –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ JSON –∫–∞–º–ø–∞–Ω–∏–∏
 */
router.get('/campaigns/:campaignId/youtube-settings', async (req, res) => {
  const { campaignId } = req.params;
  const userToken = req.headers.authorization?.replace('Bearer ', '');

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ fallback –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const tokenToUse = userToken || process.env.DIRECTUS_TOKEN;
    
    if (!tokenToUse) {
      return res.status(401).json({
        success: false,
        error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'
      });
    }

    console.log('üìã [YOUTUBE-SETTINGS] Loading YouTube settings for campaign:', campaignId);

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    const getCampaignResponse = await axios.get(
      `${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`,
      {
        headers: {
          Authorization: `Bearer ${tokenToUse}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const campaign = getCampaignResponse.data.data;
    const socialMediaSettings = campaign.social_media_settings || {};
    const youtubeSettings = socialMediaSettings.youtube || null;

    console.log('üìã [YOUTUBE-SETTINGS] YouTube settings found:', youtubeSettings);

    res.json({
      success: true,
      settings: youtubeSettings
    });

  } catch (error: any) {
    console.error('‚ùå Error retrieving YouTube settings:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ YouTube –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      details: error.message
    });
  }
});

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ YouTube –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ JSON –∫–∞–º–ø–∞–Ω–∏–∏
 */
router.patch('/campaigns/:campaignId/youtube-settings', async (req, res) => {
  const { campaignId } = req.params;
  const { accessToken, refreshToken, channelId, channelTitle, setupCompletedAt } = req.body;
  const userToken = req.headers.authorization?.replace('Bearer ', '');

  try {
    if (!accessToken || !channelId) {
      return res.status(400).json({
        success: false,
        error: 'Access Token –∏ Channel ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü–æ–ª—É—á–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    const getCampaignResponse = await axios.get(
      `${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`,
      {
        headers: {
          Authorization: `Bearer ${userToken}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const campaign = getCampaignResponse.data.data;
    const existingSettings = campaign.social_media_settings || {};

    // –û–±–Ω–æ–≤–ª—è–µ–º YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏)
    const existingYoutube = existingSettings.youtube || {};
    const updatedSettings = {
      ...existingSettings,
      youtube: {
        ...existingYoutube, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        accessToken,
        refreshToken: refreshToken || existingYoutube.refreshToken,
        channelId,
        channelTitle: channelTitle || existingYoutube.channelTitle || '',
        setupCompletedAt: setupCompletedAt || new Date().toISOString(),
        configured: true
      }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const updateResponse = await axios.patch(
      `${process.env.DIRECTUS_URL}/items/user_campaigns/${campaignId}`,
      {
        social_media_settings: updatedSettings
      },
      {
        headers: {
          Authorization: `Bearer ${userToken}`,
          'Content-Type': 'application/json'
        }
      }
    );

    log('YouTube settings saved successfully', {
      campaignId,
      channelTitle: channelTitle,
      hasAccessToken: !!accessToken
    });

    res.json({
      success: true,
      message: 'YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      settings: updatedSettings.youtube
    });

  } catch (error: any) {
    console.error('‚ùå Error saving YouTube settings:', error.message);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ YouTube –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      details: error.message
    });
  }
});

export default router;