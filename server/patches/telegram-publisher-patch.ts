/**
 * –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ publishToTelegram –≤ –∫–ª–∞—Å—Å–µ SocialPublishingService
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Directus
 * –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TelegramPublisher –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import { log } from '../logger';
import { TelegramPublisherType } from '../types/telegram-publisher';

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å CommonJS –∏ ESM –º–æ–¥—É–ª—è–º–∏
let TelegramPublisher: TelegramPublisherType;
try {
  // –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ ESM –º–æ–¥—É–ª—å
  const importPath = '../../telegram-publisher.mjs';
  TelegramPublisher = require(importPath).TelegramPublisher;
} catch (error) {
  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —É–¥–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ CommonJS
  try {
    TelegramPublisher = require('../../standalone-telegram-publisher');
  } catch (innerError) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ TelegramPublisher: ${innerError.message}`, 'telegram-patch');
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TelegramPublisher');
  }
}

/**
 * –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ publishToTelegram –∫–ª–∞—Å—Å–∞ SocialPublishingService
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å TelegramPublisher —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Directus
 * 
 * @param {any} originalThis —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä SocialPublishingService (this)
 * @param {any} content –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 * @param {any} telegramSettings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
 * @returns {Promise<any>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
export async function patchedPublishToTelegram(originalThis: any, content: any, telegramSettings: any): Promise<any> {
  log(`üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram: ${content.id}`, 'social-publishing');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!telegramSettings) {
    log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è ${content.id}`, 'social-publishing');
    return {
      platform: 'telegram',
      status: 'failed',
      publishedAt: null,
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram',
      userId: null
    };
  }
  
  if (!telegramSettings.token) {
    log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram –¥–ª—è ${content.id}`, 'social-publishing');
    return {
      platform: 'telegram',
      status: 'failed',
      publishedAt: null,
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram',
      userId: null
    };
  }
  
  if (!telegramSettings.chatId) {
    log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —á–∞—Ç–∞ Telegram –¥–ª—è ${content.id}`, 'social-publishing');
    return {
      platform: 'telegram',
      status: 'failed',
      publishedAt: null,
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —á–∞—Ç–∞ Telegram',
      userId: null
    };
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const token = telegramSettings.token;
  const chatId = telegramSettings.chatId;
  
  try {
    log(`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: ${content.id}`, 'social-publishing');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    const processedContent = await originalThis.processContentForPublishing(content, 'telegram');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏)
    const formattedText = await originalThis.formatTextForTelegram(processedContent.text);
    
    log(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è Telegram (${formattedText.length} —Å–∏–º–≤–æ–ª–æ–≤)`, 'social-publishing');
    
    // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const processedImageUrl = processedContent.imageUrl;
    
    if (!processedImageUrl) {
      log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram`, 'social-publishing');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      try {
        const textOnlyResponse = await originalThis.sendTelegramTextMessage(
          chatId,
          formattedText,
          token
        );
        
        log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –≤ Telegram, message_id: ${textOnlyResponse.result.message_id}`, 'social-publishing');
        
        return {
          platform: 'telegram',
          status: 'published',
          publishedAt: new Date().toISOString(),
          postId: textOnlyResponse.result.message_id.toString(),
          postUrl: null,
          error: null,
          userId: chatId
        };
      } catch (textError: any) {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram: ${textError.message}`, 'social-publishing');
        
        return {
          platform: 'telegram',
          status: 'failed',
          publishedAt: null,
          error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: ${textError.message}`,
          userId: chatId
        };
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramPublisher
    const telegramPublisher = new TelegramPublisher();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –≤–º–µ—Å—Ç–æ –º–µ—Ç–æ–¥–∞ uploadTelegramImageFromUrl
    log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ TelegramPublisher: ${processedImageUrl.substring(0, 70)}...`, 'social-publishing');
    
    const response = await telegramPublisher.sendDirectusImageToTelegram(
      processedImageUrl,
      chatId,
      formattedText,
      token
    );
    
    if (response && response.ok) {
      log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ Telegram, message_id: ${response.result.message_id}`, 'social-publishing');
      
      return {
        platform: 'telegram',
        status: 'published',
        publishedAt: new Date().toISOString(),
        postId: response.result.message_id.toString(),
        postUrl: null,
        error: null,
        userId: chatId
      };
    } else {
      throw new Error(`Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${JSON.stringify(response)}`);
    }
    
  } catch (error: any) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: ${error.message}`, 'social-publishing');
    
    return {
      platform: 'telegram',
      status: 'failed',
      publishedAt: null,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${error.message}`,
      userId: chatId
    };
  }
}

/**
 * –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é:
 * 
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–∞—Ç—á –≤ —Ñ–∞–π–ª–µ social-publishing.ts:
 * import { patchedPublishToTelegram } from './patches/telegram-publisher-patch';
 * 
 * –ò –∑–∞–º–µ–Ω–∏—Ç–µ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –Ω–∞:
 * async publishToTelegram(content: CampaignContent, telegramSettings: SocialMediaSettings): Promise<SocialPublication> {
 *   return patchedPublishToTelegram(this, content, telegramSettings);
 * }
 */