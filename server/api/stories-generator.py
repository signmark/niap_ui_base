#!/usr/bin/env python3
"""
Stories Image Generator API
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ metadata Stories –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
"""

import os
import io
import json
import base64
import requests
from PIL import Image, ImageDraw, ImageFont
from flask import Flask, request, jsonify
import tempfile
from urllib.parse import urlparse
from pathlib import Path

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_FONT_SIZE = 32
STORY_WIDTH = 1080
STORY_HEIGHT = 1920
FONT_PATH = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"

def download_image(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return Image.open(io.BytesIO(response.content))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
        return None

def get_font(size=DEFAULT_FONT_SIZE):
    """–ü–æ–ª—É—á–∞–µ—Ç —à—Ä–∏—Ñ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        return ImageFont.truetype(FONT_PATH, size)
    except:
        try:
            # Fallback –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            return ImageFont.truetype("/System/Library/Fonts/Arial.ttf", size)
        except:
            # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π —à—Ä–∏—Ñ—Ç
            return ImageFont.load_default()

def draw_poll_element(draw, element, x, y):
    """–†–∏—Å—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    poll_data = element.get('pollData', {})
    question = poll_data.get('question', '–í–∞—à –≤–æ–ø—Ä–æ—Å?')
    options = poll_data.get('options', ['–í–∞—Ä–∏–∞–Ω—Ç 1', '–í–∞—Ä–∏–∞–Ω—Ç 2'])
    
    font = get_font(28)
    option_font = get_font(24)
    
    # –†–∏—Å—É–µ–º –≤–æ–ø—Ä–æ—Å
    draw.text((x, y), question, fill='#000000', font=font)
    
    # –†–∏—Å—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    option_y = y + 50
    for i, option in enumerate(options):
        # –§–æ–Ω –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
        option_bg = (x, option_y + i * 60, x + 400, option_y + i * 60 + 45)
        draw.rounded_rectangle(option_bg, radius=20, fill='#E3F2FD', outline='#2196F3', width=2)
        
        # –¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
        draw.text((x + 20, option_y + i * 60 + 10), option, fill='#000000', font=option_font)

def draw_quiz_element(draw, element, x, y):
    """–†–∏—Å—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    quiz_data = element.get('quizData', {})
    question = quiz_data.get('question', '–í–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã?')
    options = quiz_data.get('options', ['–í–∞—Ä–∏–∞–Ω—Ç A', '–í–∞—Ä–∏–∞–Ω—Ç B'])
    correct_answer = quiz_data.get('correctAnswer', 0)
    
    font = get_font(26)
    option_font = get_font(22)
    
    # –†–∏—Å—É–µ–º –≤–æ–ø—Ä–æ—Å
    draw.text((x, y), "üß† " + question, fill='#000000', font=font)
    
    # –†–∏—Å—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    option_y = y + 50
    for i, option in enumerate(options):
        # –¶–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        bg_color = '#4CAF50' if i == correct_answer else '#FF9800'
        
        option_bg = (x, option_y + i * 55, x + 350, option_y + i * 55 + 40)
        draw.rounded_rectangle(option_bg, radius=15, fill=bg_color, outline='#FFFFFF', width=2)
        
        draw.text((x + 15, option_y + i * 55 + 8), option, fill='#FFFFFF', font=option_font)

def draw_slider_element(draw, element, x, y):
    """–†–∏—Å—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–ª–∞–π–¥–µ—Ä–∞"""
    slider_data = element.get('sliderData', {})
    question = slider_data.get('question', '–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 10')
    min_label = slider_data.get('minLabel', '1')
    max_label = slider_data.get('maxLabel', '10')
    
    font = get_font(24)
    label_font = get_font(18)
    
    # –í–æ–ø—Ä–æ—Å
    draw.text((x, y), question, fill='#000000', font=font)
    
    # –°–ª–∞–π–¥–µ—Ä
    slider_y = y + 40
    slider_width = 300
    
    # –õ–∏–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
    draw.line([(x, slider_y), (x + slider_width, slider_y)], fill='#9E9E9E', width=4)
    
    # –ü–æ–ª–∑—É–Ω–æ–∫ (–≤ —Å–µ—Ä–µ–¥–∏–Ω–µ)
    slider_pos = x + slider_width // 2
    draw.ellipse([slider_pos - 15, slider_y - 15, slider_pos + 15, slider_y + 15], 
                 fill='#2196F3', outline='#FFFFFF', width=3)
    
    # –ü–æ–¥–ø–∏—Å–∏
    draw.text((x, slider_y + 25), min_label, fill='#666666', font=label_font)
    draw.text((x + slider_width - 30, slider_y + 25), max_label, fill='#666666', font=label_font)

def draw_sticker_element(image, element, x, y):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä"""
    sticker_data = element.get('stickerData', {})
    sticker_type = sticker_data.get('type', 'heart')
    size = sticker_data.get('size', 50)
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∫–∞–∫ —ç–º–æ–¥–∑–∏
    stickers = {
        'heart': '‚ù§Ô∏è',
        'fire': 'üî•',
        'star': '‚≠ê',
        'thumbs_up': 'üëç',
        'clap': 'üëè'
    }
    
    sticker_emoji = stickers.get(sticker_type, '‚ù§Ô∏è')
    draw = ImageDraw.Draw(image)
    font = get_font(size)
    draw.text((x, y), sticker_emoji, font=font)

def generate_slide_image(slide_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.new('RGB', (STORY_WIDTH, STORY_HEIGHT), color='white')
        draw = ImageDraw.Draw(image)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ–Ω
        background = slide_data.get('background', {})
        if background.get('type') == 'color':
            color = background.get('color', '#ffffff')
            if color.startswith('#'):
                image = Image.new('RGB', (STORY_WIDTH, STORY_HEIGHT), color=color)
                draw = ImageDraw.Draw(image)
        elif background.get('type') == 'image':
            bg_url = background.get('value')
            if bg_url:
                bg_img = download_image(bg_url)
                if bg_img:
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    bg_img = bg_img.resize((STORY_WIDTH, STORY_HEIGHT), Image.Resampling.LANCZOS)
                    image = bg_img
                    draw = ImageDraw.Draw(image)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        elements = slide_data.get('elements', [])
        for element in elements:
            element_type = element.get('type')
            position = element.get('position', {})
            x = int(position.get('x', 0))
            y = int(position.get('y', 0))
            content = element.get('content', '')
            style = element.get('style', {})
            
            if element_type == 'text':
                # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
                font_size = int(style.get('fontSize', DEFAULT_FONT_SIZE))
                color = style.get('color', '#000000')
                font = get_font(font_size)
                
                # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                lines = content.split('\n')
                line_height = font_size + 5
                
                for i, line in enumerate(lines):
                    line_y = y + (i * line_height)
                    draw.text((x, line_y), line, fill=color, font=font)
                    
            elif element_type == 'image':
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img_url = content
                if img_url:
                    element_img = download_image(img_url)
                    if element_img:
                        width = int(style.get('width', 100))
                        height = int(style.get('height', 100))
                        
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                        element_img = element_img.resize((width, height), Image.Resampling.LANCZOS)
                        
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        image.paste(element_img, (x, y))
                        
            elif element_type == 'poll':
                # –†–∏—Å—É–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                draw_poll_element(draw, element, x, y)
                
            elif element_type == 'quiz':
                # –†–∏—Å—É–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
                draw_quiz_element(draw, element, x, y)
                
            elif element_type == 'slider':
                # –†–∏—Å—É–µ–º —Å–ª–∞–π–¥–µ—Ä –æ—Ü–µ–Ω–∫–∏
                draw_slider_element(draw, element, x, y)
                
            elif element_type == 'sticker':
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                draw_sticker_element(image, element, x, y)
        
        return image
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞: {e}")
        return None

def upload_to_temp(image):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
            image.save(tmp_file.name, 'JPEG', quality=85)
            
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ S3/CDN
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            return f"/temp/{os.path.basename(tmp_file.name)}"
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

@app.route('/generate-stories', methods=['POST'])
def generate_stories():
    """API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Stories –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'success': False, 'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}), 400
            
        # –ü–æ–ª—É—á–∞–µ–º metadata Stories
        metadata = data.get('metadata', {})
        story_data = metadata.get('storyData', {})
        slides = story_data.get('slides', [])
        
        if not slides:
            return jsonify({'error': '–°–ª–∞–π–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ metadata'}), 400
            
        generated_images = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–∞
        for i, slide in enumerate(slides):
            print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ {i+1}/{len(slides)}")
            
            slide_image = generate_slide_image(slide)
            if slide_image:
                image_url = upload_to_temp(slide_image)
                if image_url:
                    generated_images.append({
                        'slideIndex': i,
                        'imageUrl': image_url,
                        'duration': slide.get('duration', 5)
                    })
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–∞–π–¥ {i+1}")
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–π–¥ {i+1}")
        
        if not generated_images:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}), 500
            
        return jsonify({
            'success': True,
            'images': generated_images,
            'totalSlides': len(slides),
            'generatedCount': len(generated_images)
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ API: {e}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({'status': 'OK', 'service': 'Stories Generator'})

if __name__ == '__main__':
    print("üé® Stories Generator API –∑–∞–ø—É—â–µ–Ω")
    print(f"üìê –†–∞–∑–º–µ—Ä Stories: {STORY_WIDTH}x{STORY_HEIGHT}")
    app.run(host='0.0.0.0', port=5001, debug=True)