const express = require('express');
const router = express.Router();
const { IgApiClient } = require('instagram-private-api');
const { SocksProxyAgent } = require('socks-proxy-agent');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
const PROXY_CONFIG = {
  host: 'mobpool.proxy.market',
  port: Math.floor(Math.random() * 10) + 10000, // 10000-10009
  username: 'WeBZDZ7p9lh5',
  password: 'iOPNYl8D'
};

console.log(`[Instagram Stories API] –ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–∫—Å–∏: ${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`);

/**
 * –°–æ–∑–¥–∞–µ—Ç Instagram –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏
 */
function createInstagramClient() {
  const ig = new IgApiClient();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
  const proxyUrl = `socks5://${PROXY_CONFIG.username}:${PROXY_CONFIG.password}@${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`;
  const agent = new SocksProxyAgent(proxyUrl);
  
  ig.request.defaults.agent = agent;
  ig.request.defaults.timeout = 30000;
  
  return ig;
}

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Buffer
 */
async function downloadImage(imageUrl) {
  try {
    console.log(`[Stories] –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl}`);
    
    const response = await axios({
      method: 'GET',
      url: imageUrl,
      responseType: 'arraybuffer',
      timeout: 10000
    });
    
    const buffer = Buffer.from(response.data);
    console.log(`[Stories] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä: ${buffer.length} –±–∞–π—Ç`);
    
    return buffer;
  } catch (error) {
    console.error(`[Stories] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`);
    throw error;
  }
}

/**
 * –ü—É–±–ª–∏–∫—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é Stories (—Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + —Ç–µ–∫—Å—Ç)
 */
router.post('/publish-simple', async (req, res) => {
  try {
    const { username, password, imagePath, caption } = req.body;
    
    if (!username || !password || !imagePath) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: username, password, imagePath'
      });
    }
    
    console.log(`[Stories Simple] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π Stories –¥–ª—è ${username}`);
    
    const ig = createInstagramClient();
    
    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    ig.state.generateDevice(username);
    await ig.account.login(username, password);
    
    console.log(`[Stories Simple] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    let imageBuffer;
    if (imagePath.startsWith('http')) {
      imageBuffer = await downloadImage(imagePath);
    } else {
      const fullPath = path.resolve(imagePath);
      imageBuffer = fs.readFileSync(fullPath);
    }
    
    // –ü—É–±–ª–∏–∫—É–µ–º Stories
    const storyResult = await ig.publish.story({
      file: imageBuffer
    });
    
    console.log(`[Stories Simple] Stories –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`, storyResult);
    
    const storyId = storyResult.media?.id || 'unknown';
    const storyUrl = `https://instagram.com/stories/${username}/story_${storyId}`;
    
    res.json({
      success: true,
      message: '–ü—Ä–æ—Å—Ç–∞—è Stories —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞',
      storyId: storyId,
      storyUrl: storyUrl,
      publishedAt: new Date().toISOString(),
      result: storyResult
    });
    
  } catch (error) {
    console.error(`[Stories Simple] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:`, error);
    res.status(500).json({
      success: false,
      error: error.message,
      details: error.stack
    });
  }
});

/**
 * –ü—É–±–ª–∏–∫—É–µ—Ç Stories —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
 */
router.post('/publish', async (req, res) => {
  try {
    const { username, password, imagePath, caption, interactive } = req.body;
    
    if (!username || !password || !imagePath) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: username, password, imagePath'
      });
    }
    
    console.log(`[Stories Interactive] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π Stories –¥–ª—è ${username}`);
    console.log(`[Stories Interactive] –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:`, interactive);
    
    const ig = createInstagramClient();
    
    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    ig.state.generateDevice(username);
    await ig.account.login(username, password);
    
    console.log(`[Stories Interactive] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    let imageBuffer;
    if (imagePath.startsWith('http')) {
      imageBuffer = await downloadImage(imagePath);
    } else {
      const fullPath = path.resolve(imagePath);
      imageBuffer = fs.readFileSync(fullPath);
    }
    
    // –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Å—Ç–∏–∫–µ—Ä—ã)
    let stickers = [];
    
    if (interactive && Array.isArray(interactive)) {
      for (const element of interactive) {
        if (element.type === 'poll') {
          stickers.push({
            type: 'poll',
            question: element.question || '–í–∞—à–µ –º–Ω–µ–Ω–∏–µ?',
            tallies: [
              { text: element.option1 || '–î–∞', count: 0 },
              { text: element.option2 || '–ù–µ—Ç', count: 0 }
            ],
            x: element.x || 0.5,
            y: element.y || 0.5,
            width: element.width || 0.4,
            height: element.height || 0.2
          });
        } else if (element.type === 'slider') {
          stickers.push({
            type: 'slider',
            question: element.question || '–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 0 –¥–æ 100',
            emoji: element.emoji || 'üî•',
            x: element.x || 0.5,
            y: element.y || 0.7,
            width: element.width || 0.6,
            height: element.height || 0.15
          });
        } else if (element.type === 'question') {
          stickers.push({
            type: 'question',
            question: element.question || '–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å',
            backgroundColor: element.backgroundColor || '#FF6B6B',
            x: element.x || 0.5,
            y: element.y || 0.3,
            width: element.width || 0.8,
            height: element.height || 0.2
          });
        }
      }
    }
    
    console.log(`[Stories Interactive] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${stickers.length} –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    // –ü—É–±–ª–∏–∫—É–µ–º Stories —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    const publishOptions = {
      file: imageBuffer
    };
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∏–∫–µ—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if (stickers.length > 0) {
      publishOptions.stickers = stickers;
    }
    
    const storyResult = await ig.publish.story(publishOptions);
    
    console.log(`[Stories Interactive] Stories —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞:`, storyResult);
    
    const storyId = storyResult.media?.id || 'unknown';
    const storyUrl = `https://instagram.com/stories/${username}/story_${storyId}`;
    
    res.json({
      success: true,
      message: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è Stories —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞',
      storyId: storyId,
      storyUrl: storyUrl,
      publishedAt: new Date().toISOString(),
      interactive: interactive,
      stickersCount: stickers.length,
      result: storyResult
    });
    
  } catch (error) {
    console.error(`[Stories Interactive] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:`, error);
    res.status(500).json({
      success: false,
      error: error.message,
      details: error.stack
    });
  }
});

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Stories
 */
router.post('/test', async (req, res) => {
  try {
    console.log(`[Stories Test] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories`);
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è darkhorse_fashion
    const testData = {
      username: 'darkhorse_fashion',
      password: 'QtpZ3dh70306',
      imagePath: 'https://picsum.photos/1080/1920', // –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Stories
      caption: '–¢–µ—Å—Ç–æ–≤–∞—è Stories –∏–∑ API',
      interactive: [
        {
          type: 'poll',
          question: '–ù—Ä–∞–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è?',
          option1: '–î–∞, —Å—É–ø–µ—Ä!',
          option2: '–ù–µ –æ—á–µ–Ω—å',
          x: 0.5,
          y: 0.3,
          width: 0.7,
          height: 0.2
        },
        {
          type: 'slider',
          question: '–û—Ü–µ–Ω–∏—Ç–µ –¥–∏–∑–∞–π–Ω',
          emoji: '‚≠ê',
          x: 0.5,
          y: 0.6,
          width: 0.8,
          height: 0.15
        }
      ]
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—à –∂–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    const response = await axios.post('http://localhost:5000/api/instagram-stories/publish', testData, {
      timeout: 60000
    });
    
    console.log(`[Stories Test] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:`, response.data);
    
    res.json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤–∞—è Stories —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞',
      result: response.data
    });
    
  } catch (error) {
    console.error(`[Stories Test] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:`, error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      details: error.response?.data || error.stack
    });
  }
});

module.exports = router;