/**
 * –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ Jest
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–æ–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
process.env.NODE_ENV = 'test';
process.env.TEST_MODE = 'true';
process.env.DIRECTUS_URL = 'https://test-directus.example.com';

// –ú–æ–∫–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
global.FormData = require('form-data');

// –ú–æ–∫–∏—Ä—É–µ–º –º–æ–¥—É–ª—å directus.ts –¥–æ –µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
jest.mock('../../server/lib/directus', () => {
  // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è axios instance
  const axiosMock = {
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    patch: jest.fn(),
    delete: jest.fn(),
    interceptors: {
      request: { use: jest.fn() },
      response: { use: jest.fn() }
    }
  };
  
  return {
    directusApi: axiosMock,
    DIRECTUS_URL: 'https://test-directus.example.com'
  };
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
jest.setTimeout(30000);

// –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ–Ω—Å–æ–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if (process.env.SUPPRESS_CONSOLE === 'true') {
  global.console = {
    ...console,
    log: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
  };
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
// global.gc - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Node.js —Å —Ñ–ª–∞–≥–æ–º --expose-gc
if (global.gc) {
  beforeEach(() => {
    global.gc();
  });
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤
console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ:', process.env.NODE_ENV);
console.log('üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleString());
console.log('--------------------------------------------------\n');