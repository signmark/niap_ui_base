import axios from 'axios';
import { directusAuthManager } from './directus-auth-manager';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏–∏
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏—è–º –∏ –∞–Ω–∫–µ—Ç–∞–º
 */
export class CampaignDataService {
  private directusApi = axios.create({
    baseURL: process.env.DIRECTUS_URL,
    timeout: 10000
  });

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è AI –ø—Ä–æ–º–ø—Ç–æ–≤
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param campaignId ID –∫–∞–º–ø–∞–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –Ω–∞–π–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é)
   * @param token –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  async getCampaignContext(userId: string, campaignId?: string, token?: string): Promise<string | null> {
    try {
      console.log('[campaign-data] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
      if (!token) {
        console.log('[campaign-data] –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
        return null;
      }
      const authToken = token;
      
      let targetCampaignId = campaignId;
      
      // –ï—Å–ª–∏ ID –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–∞–π–¥–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!targetCampaignId) {
        targetCampaignId = await this.getActiveCampaignId(userId, authToken);
        if (!targetCampaignId) {
          console.log('[campaign-data] –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          return null;
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
      const campaignData = await this.getCampaignData(targetCampaignId, authToken);
      if (!campaignData) {
        console.log('[campaign-data] –î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return null;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
      const questionnaireData = await this.getQuestionnaireData(targetCampaignId, authToken);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
      const context = this.formatCampaignContext(campaignData, questionnaireData);
      console.log('[campaign-data] –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω');
      
      return context;
    } catch (error) {
      console.error('[campaign-data] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async getActiveCampaignId(userId: string, token?: string): Promise<string | null> {
    try {
      const campaignsResponse = await this.directusApi.get('/items/user_campaigns', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        params: {
          filter: {
            user_id: { _eq: userId }
          },
          limit: 1
        }
      });

      const campaigns = campaignsResponse.data?.data;
      if (campaigns && campaigns.length > 0) {
        return campaigns[0].campaign_id;
      }
      
      return null;
    } catch (error) {
      console.error('[campaign-data] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  private async getCampaignData(campaignId: string, token?: string): Promise<any> {
    try {
      const response = await this.directusApi.get(`/items/user_campaigns/${campaignId}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      return response.data?.data;
    } catch (error) {
      console.error('[campaign-data] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∫–∞–º–ø–∞–Ω–∏–∏
   */
  private async getQuestionnaireData(campaignId: string, token?: string): Promise<any> {
    try {
      const response = await this.directusApi.get('/items/business_questionnaire', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        params: {
          filter: {
            campaign_id: { _eq: campaignId }
          },
          limit: 1
        }
      });

      const questionnaires = response.data?.data;
      return questionnaires && questionnaires.length > 0 ? questionnaires[0] : null;
    } catch (error) {
      console.error('[campaign-data] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã:', error);
      return null;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
   */
  private formatCampaignContext(campaignData: any, questionnaireData: any): string {
    let context = '';

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–ø–∞–Ω–∏–∏
    if (campaignData) {
      if (campaignData.name) {
        context += `\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏: ${campaignData.name}`;
      }
      if (campaignData.website_link) {
        context += `\n\n–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏: ${campaignData.website_link}`;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∫–µ—Ç—ã
    if (questionnaireData) {
      if (questionnaireData.company_name) {
        context += `\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ${questionnaireData.company_name}`;
      }
      if (questionnaireData.contact_info) {
        context += `\n\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${questionnaireData.contact_info}`;
      }
      if (questionnaireData.business_description) {
        context += `\n\n–û–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞: ${questionnaireData.business_description}`;
      }
      if (questionnaireData.target_audience) {
        context += `\n\n–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${questionnaireData.target_audience}`;
      }
      if (questionnaireData.products_services) {
        context += `\n\n–¢–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏: ${questionnaireData.products_services}`;
      }
      if (questionnaireData.unique_selling_proposition) {
        context += `\n\n–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${questionnaireData.unique_selling_proposition}`;
      }
      if (questionnaireData.brand_tone) {
        context += `\n\n–¢–æ–Ω –±—Ä–µ–Ω–¥–∞: ${questionnaireData.brand_tone}`;
      }
      if (questionnaireData.content_goals) {
        context += `\n\n–¶–µ–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${questionnaireData.content_goals}`;
      }
      if (questionnaireData.social_media_goals) {
        context += `\n\n–¶–µ–ª–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö: ${questionnaireData.social_media_goals}`;
      }
    }

    return context;
  }

  /**
   * –û–±–æ–≥–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏–∏
   * @param originalPrompt –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param campaignId ID –∫–∞–º–ø–∞–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param token –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @returns –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
   */
  async enrichPromptWithCampaignData(
    originalPrompt: string, 
    userId: string, 
    campaignId?: string, 
    token?: string
  ): Promise<string> {
    try {
      console.log('üéØ [PROMPT-ENRICHMENT] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      console.log('üéØ [PROMPT-ENRICHMENT] –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç:', originalPrompt);
      
      const campaignContext = await this.getCampaignContext(userId, campaignId, token);
      
      if (!campaignContext) {
        console.log('‚ùå [PROMPT-ENRICHMENT] –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç');
        console.log('üö® [FINAL-PROMPT] –ü–†–û–ú–ü–¢ –ë–ï–ó –î–ê–ù–ù–´–• –ö–ê–ú–ü–ê–ù–ò–ò:', originalPrompt);
        return originalPrompt;
      }

      console.log('‚úÖ [PROMPT-ENRICHMENT] –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω!');
      console.log('üìù [CAMPAIGN-CONTEXT]:', campaignContext);

      const enrichedPrompt = `${originalPrompt}\n\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏:${campaignContext}\n\n–°–¢–†–û–ì–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:\n1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n2. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n3. –ó–ê–ü–†–ï–©–ï–ù–û –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç - –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Å—Å—ã–ª–∫–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏\n4. –ù–ï –í–´–î–£–ú–´–í–ê–ô –æ—Ç–∑—ã–≤—ã - —Å–æ–∑–¥–∞–≤–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥\n5. –í—Å–µ –¥–µ—Ç–∞–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏\n6. –í–ê–ñ–ù–û: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –û–î–ò–ù –ª—É—á—à–∏–π –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é –≤–∞—Ä–∏–∞–Ω—Ç, –∞ –ù–ï –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n7. –°–æ–∑–¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞`;
      
      console.log('üéâ [PROMPT-ENRICHMENT] –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏–∏');
      console.log('üö® [FINAL-PROMPT] –§–ò–ù–ê–õ–¨–ù–´–ô –û–ë–û–ì–ê–©–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢:');
      console.log('='.repeat(50));
      console.log(enrichedPrompt);
      console.log('='.repeat(50));
      
      return enrichedPrompt;
    } catch (error) {
      console.error('üí• [PROMPT-ENRICHMENT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞:', error);
      console.log('üö® [FINAL-PROMPT] –ü–†–û–ú–ü–¢ –° –û–®–ò–ë–ö–û–ô (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π):', originalPrompt);
      return originalPrompt;
    }
  }
}