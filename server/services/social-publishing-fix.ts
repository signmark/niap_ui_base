import axios from 'axios';
import { log } from '../logger';
import { CampaignContent, SocialMediaSettings, SocialPublication } from '@shared/schema';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import FormData from 'form-data';
import { TelegramPublisher } from '../../standalone-telegram-publisher';

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ Telegram
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Directus
 */
export class SocialPublishingServiceFixed {
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramPublisher —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  private telegramPublisher: any;
  
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TelegramPublisher
    try {
      this.telegramPublisher = new TelegramPublisher();
      log('‚úÖ TelegramPublisher —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'social-publishing');
    } catch (error: any) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramPublisher: ${error.message}`, 'social-publishing');
    }
  }
  
  /**
   * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TelegramPublisher
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Directus
   */
  async publishToTelegram(
    content: CampaignContent,
    telegramSettings?: SocialMediaSettings['telegram']
  ): Promise<SocialPublication> {
    log(`üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram: ${content.id}`, 'social-publishing');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramSettings) {
      log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è ${content.id}`, 'social-publishing');
      return {
        platform: 'telegram',
        status: 'failed',
        publishedAt: null,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram',
        userId: null
      };
    }
    
    if (!telegramSettings.token) {
      log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram –¥–ª—è ${content.id}`, 'social-publishing');
      return {
        platform: 'telegram',
        status: 'failed',
        publishedAt: null,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram',
        userId: null
      };
    }
    
    if (!telegramSettings.chatId) {
      log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —á–∞—Ç–∞ Telegram –¥–ª—è ${content.id}`, 'social-publishing');
      return {
        platform: 'telegram',
        status: 'failed',
        publishedAt: null,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —á–∞—Ç–∞ Telegram',
        userId: null
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const token = telegramSettings.token;
    const chatId = telegramSettings.chatId;
    
    try {
      log(`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: ${content.id}`, 'social-publishing');
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      let text = '';
      if (content.title) {
        text += `<b>${content.title}</b>\n\n`;
      }
      
      if (content.content) {
        text += content.content;
      }
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤
      if (content.hashtags && Array.isArray(content.hashtags) && content.hashtags.length > 0) {
        text += '\n\n' + content.hashtags.map(tag => `#${tag.replace(/\s+/g, '_')}`).join(' ');
      }
      
      log(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è Telegram (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`, 'social-publishing');
      
      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
      const MAX_TELEGRAM_CAPTION = 1024;
      const formattedText = text.length > MAX_TELEGRAM_CAPTION 
        ? text.substring(0, MAX_TELEGRAM_CAPTION - 3) + '...' 
        : text;
      
      if (text.length > MAX_TELEGRAM_CAPTION) {
        log(`‚ö†Ô∏è –¢–µ–∫—Å—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω —Å ${text.length} –¥–æ ${MAX_TELEGRAM_CAPTION} —Å–∏–º–≤–æ–ª–æ–≤`, 'social-publishing');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let processedImageUrl = content.imageUrl;
      
      if (!processedImageUrl) {
        log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram`, 'social-publishing');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try {
          const textOnlyResponse = await this.sendTelegramTextMessage(
            chatId,
            formattedText,
            token
          );
          
          log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –≤ Telegram, message_id: ${textOnlyResponse.result.message_id}`, 'social-publishing');
          
          return {
            platform: 'telegram',
            status: 'published',
            publishedAt: new Date().toISOString(),
            postId: textOnlyResponse.result.message_id.toString(),
            postUrl: null,
            error: null,
            userId: chatId
          };
        } catch (textError: any) {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram: ${textError.message}`, 'social-publishing');
          
          return {
            platform: 'telegram',
            status: 'failed',
            publishedAt: null,
            error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: ${textError.message}`,
            userId: chatId
          };
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TelegramPublisher
      log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ TelegramPublisher: ${processedImageUrl.substring(0, 70)}...`, 'social-publishing');
      
      const response = await this.telegramPublisher.sendDirectusImageToTelegram(
        processedImageUrl,
        chatId,
        formattedText,
        token
      );
      
      if (response && response.ok) {
        log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ Telegram, message_id: ${response.result.message_id}`, 'social-publishing');
        
        return {
          platform: 'telegram',
          status: 'published',
          publishedAt: new Date().toISOString(),
          postId: response.result.message_id.toString(),
          postUrl: null,
          error: null,
          userId: chatId
        };
      } else {
        throw new Error(`Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${JSON.stringify(response)}`);
      }
      
    } catch (error: any) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: ${error.message}`, 'social-publishing');
      
      return {
        platform: 'telegram',
        status: 'failed',
        publishedAt: null,
        error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${error.message}`,
        userId: chatId
      };
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   * @param chatId ID —á–∞—Ç–∞ Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML)
   * @param token –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  private async sendTelegramTextMessage(chatId: string, text: string, token: string): Promise<any> {
    const baseUrl = 'https://api.telegram.org/bot';
    
    try {
      const response = await axios.post(`${baseUrl}${token}/sendMessage`, {
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML'
      }, {
        headers: { 'Content-Type': 'application/json' }
      });
      
      return response.data;
    } catch (error: any) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${error.message}`, 'social-publishing');
      throw error;
    }
  }
}