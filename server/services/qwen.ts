import axios from 'axios';
import { apiKeyService } from './api-keys';
import { log } from '../utils/logger';

export interface QwenConfig {
  apiKey: string;
  model?: string;
  temperature?: number;
  max_tokens?: number;
  top_p?: number;
}

export interface QwenMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export class QwenService {
  private apiKey: string;
  private readonly baseUrl = 'https://api.qwen.ai/v1';
  
  constructor(config: QwenConfig) {
    this.apiKey = config.apiKey;
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç API –∫–ª—é—á —Å–µ—Ä–≤–∏—Å–∞
   */
  updateApiKey(newApiKey: string): void {
    if (newApiKey && newApiKey.trim() !== '') {
      this.apiKey = newApiKey;
      console.log("Qwen API key updated from user settings");
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ API –∫–ª—é—á
   * @returns true, –µ—Å–ª–∏ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ false
   */
  hasApiKey(): boolean {
    return !!(this.apiKey && this.apiKey.trim() !== '');
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å API –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns true, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ false
   */
  async initialize(userId: string): Promise<boolean> {
    try {
      // –ò—â–µ–º API –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
      const apiKey = await apiKeyService.getUserApiKey(userId, 'qwen');
      
      if (apiKey && apiKey.trim() !== '') {
        this.apiKey = apiKey;
        console.log(`Qwen API key updated from user settings for user ${userId}`);
        return true;
      } else {
        console.log(`Qwen API key not found for user ${userId}`);
        return false;
      }
    } catch (error) {
      console.error(`Error initializing Qwen service for user ${userId}:`, error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Qwen API
   */
  async generateText(messages: QwenMessage[], options: {
    model?: string;
    temperature?: number;
    max_tokens?: number;
    top_p?: number;
    stop?: string[];
  } = {}): Promise<string> {
    try {
      // –ú–æ–¥–µ–ª—å Qwen –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - Qwen 1.5-72B-Chat
      const model = options.model || 'qwen1.5-72b-chat';
      const temperature = options.temperature !== undefined ? options.temperature : 0.3;
      const max_tokens = options.max_tokens || 1000;
      const top_p = options.top_p !== undefined ? options.top_p : 0.9;
      
      // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò: –ï—Å–ª–∏ –∫–ª—é—á - —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
      if (this.apiKey === "test_qwen_key_for_debugging_only") {
        console.log('[qwen] ‚ö†Ô∏è –û–¢–õ–ê–î–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –∫–ª—é—á, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç');
        return `<p>–í–æ—Ç <strong>—Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç</strong> –æ—Ç Qwen AI –æ –∑–¥–æ—Ä–æ–≤–æ–º –ø–∏—Ç–∞–Ω–∏–∏.</p>
<p>–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –∏ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å. üåø</p>
<p>–ù–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤:</p>
<p>1Ô∏è‚É£ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ ‚Äî –≤–∫–ª—é—á–∞–π—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤</p>
<p>2Ô∏è‚É£ –ë–∞–ª–∞–Ω—Å ‚Äî —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤</p>
<p>3Ô∏è‚É£ –£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ø–æ—Ä—Ü–∏–π</p>
<p>4Ô∏è‚É£ –ú–∏–Ω–∏–º—É–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Äî –æ—Ç–¥–∞–≤–∞–π—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ü–µ–ª—å–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º</p>
<p>–í–∞—à–µ —Ç–µ–ª–æ ‚Äî —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –∫–æ–≥–¥–∞-–ª–∏–±–æ –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å. –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –Ω–µ–≥–æ —á–µ—Ä–µ–∑ –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ! üí™</p>`;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      if (!this.apiKey || this.apiKey.trim() === '') {
        console.error('Qwen API key is not set');
        throw new Error('Qwen API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      }
      
      console.log(`Sending request to Qwen API (model: ${model}, temp: ${temperature})`);
      
      const response = await axios.post(
        `${this.baseUrl}/chat/completions`,
        {
          model,
          messages,
          temperature,
          max_tokens,
          top_p,
          stop: options.stop || null
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          }
        }
      );
      
      if (!response.data?.choices?.[0]?.message?.content) {
        console.error('Invalid response format from Qwen API:', response.data);
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Qwen API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      return response.data.choices[0].message.content;
    } catch (error: any) {
      console.error('Error calling Qwen API:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ "Invalid API key"
      if (error.response?.data?.error) {
        const errorMessage = error.response.data.error.message || error.response.data.error;
        
        if (typeof errorMessage === 'string' && 
           (errorMessage.includes('API key') || errorMessage.includes('authentication') || 
            errorMessage.includes('auth') || errorMessage.includes('token') || 
            error.response.status === 401 || error.response.status === 403)) {
          throw new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á Qwen. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }
      }
      
      throw error;
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
   */
  async generateSocialContent(
    keywords: string[],
    topics: string[],
    platform: string,
    options: {
      length?: 'short' | 'medium' | 'long',
      tone?: 'professional' | 'casual' | 'friendly' | 'humorous',
      language?: 'ru' | 'en'
    } = {}
  ): Promise<string> {
    const length = options.length || 'medium';
    const tone = options.tone || 'professional';
    const language = options.language || 'ru';
    
    const lengthMap = {
      short: '–∫–æ—Ä–æ—Ç–∫–∏–π (–¥–æ 100 —Å–ª–æ–≤)',
      medium: '—Å—Ä–µ–¥–Ω–∏–π (150-200 —Å–ª–æ–≤)',
      long: '–¥–ª–∏–Ω–Ω—ã–π (250-300 —Å–ª–æ–≤)'
    };
    
    const toneMap = {
      professional: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π',
      casual: '–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π',
      friendly: '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π',
      humorous: '—Å —é–º–æ—Ä–æ–º –∏ –ª–µ–≥–∫–æ—Å—Ç—å—é'
    };
    
    const langMap = {
      ru: '–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
      en: '–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ'
    };
    
    const platformSpecifics = platform === 'instagram' 
      ? '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –í–∫–ª—é—á–∏ 5-7 —Ö—ç—à—Ç–µ–≥–æ–≤ –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞.'
      : platform === 'facebook'
        ? '–ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∞–±–∑–∞—Ü–∞–º–∏. –î–æ–±–∞–≤—å 2-3 –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏.'
        : platform === 'telegram' 
          ? '–î–æ–±–∞–≤—å —Å—Å—ã–ª–∫–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏, –Ω–æ —É–º–µ—Ä–µ–Ω–Ω–æ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ö—ç—à—Ç–µ–≥–∏.'
          : '–ê–¥–∞–ø—Ç–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.';
    
    const systemPrompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ${platform} –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Ç–µ–º.

–°–æ–∑–¥–∞–π ${lengthMap[length]} –ø–æ—Å—Ç ${langMap[language]} —Å ${toneMap[tone]} —Ç–æ–Ω–æ–º.

${platformSpecifics}

–í —Ç–µ–∫—Å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ, –±–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∏—è. –†–∞—Å–∫—Ä–æ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–º—ã, –Ω–æ –¥–µ–ª–∞–π —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª—è.

–í–ê–ñ–ù–û:
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω –ò–ò –∏–ª–∏ –¥–ª—è –∫–∞–∫–∏—Ö-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ü–µ–ª–µ–π
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∏—à–µ –∏ —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
- –î–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º, —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É –º—ã—Å–ª—è–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥ –≤–º–µ—Å—Ç–æ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ`;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    let keywordsStr = Array.isArray(keywords) ? keywords.join(', ') : typeof keywords === 'string' ? keywords : String(keywords || '');
    let topicsStr = Array.isArray(topics) ? topics.join(', ') : typeof topics === 'string' ? topics : String(topics || '');
    
    const userContent = `–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${keywordsStr}
–¢–µ–º—ã –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è: ${topicsStr}

–°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è ${platform} ${language === 'ru' ? '–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ' : '–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ'}.`;

    try {
      return await this.generateText(
        [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userContent }
        ],
        {
          temperature: 0.7,  // –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
          max_tokens: length === 'short' ? 300 : length === 'medium' ? 500 : 800
        }
      );
    } catch (error) {
      console.error('Error generating social content with Qwen:', error);
      throw error;
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param content –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç
   * @param keywords –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –ü—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
   */
  async generateImagePrompt(
    content: string,
    keywords: string[] = []
  ): Promise<string> {
    try {
      // –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞
      const cleanedContent = content
        .replace(/<[^>]*>/g, ' ')  // –ó–∞–º–µ–Ω—è–µ–º HTML-—Ç–µ–≥–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
        .replace(/\s+/g, ' ')      // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –æ–¥–Ω–∏–º
        .trim();                    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
      
      console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Qwen (–æ–¥–Ω–æ—ç—Ç–∞–ø–Ω—ã–π –º–µ—Ç–æ–¥)');
      console.log(`–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: ${cleanedContent.substring(0, 150)}...`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
      const systemPrompt = `You are an expert image prompt generator for Stable Diffusion AI.
Your task is to translate Russian text into detailed English image generation prompts.

INSTRUCTIONS:
1. Read the provided Russian text content carefully
2. Translate and transform the content directly into a detailed, vivid image prompt in ENGLISH
3. Focus on the main subject, scene, mood, and style from the content
4. Include visual details like lighting, color scheme, and composition
5. DO NOT mention text, captions, or writing in the image
6. Output ONLY the image prompt text in English - nothing else
7. Format the prompt to be optimized for Stable Diffusion or Midjourney
8. DO NOT put quotation marks around the prompt
9. DO NOT include any explanations or comments
10. Length should be 1-3 sentences maximum
11. Include adjectives like "detailed", "high quality", "photorealistic" or art styles
12. Always add quality boosters like "4k", "masterpiece", "intricate details"`;

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
      let userPrompt = `Generate an image prompt from this Russian text:\n\n${cleanedContent.substring(0, 1000)}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
      if (keywords && keywords.length > 0) {
        userPrompt += `\n\nAdditional keywords to emphasize: ${keywords.join(', ')}`;
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–∞
      const finalPrompt = await this.generateText(
        [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        {
          temperature: 0.7,
          max_tokens: 500
        }
      );
      
      console.log(`Generated image prompt via Qwen: ${finalPrompt.substring(0, 100)}...`);
      return finalPrompt;
    } catch (error) {
      console.error('Error generating image prompt with Qwen:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç
      return 'A detailed, high-quality image related to the content, photorealistic style, 4k, masterpiece';
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä—é—á–∫–∏ (hooks) –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async generateHooks(
    subject: string,
    tone: 'professional' | 'casual' | 'urgent' | 'curiosity' = 'professional'
  ): Promise<string[]> {
    try {
      const toneMap = {
        professional: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π',
        casual: '–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π',
        urgent: '—Å—Ä–æ—á–Ω—ã–π –∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –∂–µ–ª–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ',
        curiosity: '–≤—ã–∑—ã–≤–∞—é—â–∏–π –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∏ –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–π'
      };
      
      const systemPrompt = `–¢—ã –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∫—Ä—é—á–∫–æ–≤.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫—Ä—é—á–∫–æ–≤ (hooks) –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª—è.

–ö—Ä—é—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
- –ö–æ—Ä–æ—Ç–∫–∏–º–∏ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
- –¶–µ–ø–ª—è—é—â–∏–º–∏ –≤–Ω–∏–º–∞–Ω–∏–µ
- –° ${toneMap[tone]} —Ç–æ–Ω–æ–º
- –ë–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ —Ö–∞–π–ø–∞ –∏–ª–∏ –∫–ª–∏–∫–±–µ–π—Ç–∞
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–µ–º–µ

–°–æ–∑–¥–∞–π 5 —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç –∂–µ–ª–∞–Ω–∏–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.`;

      const userPrompt = `–¢–µ–º–∞ –¥–ª—è –∫—Ä—é—á–∫–æ–≤: ${subject}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫—Ä—é—á–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã.`;

      const response = await this.generateText(
        [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        {
          temperature: 0.8,
          max_tokens: 400
        }
      );
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
      // –∏ —Ñ–∏–ª—å—Ç—Ä—É—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é
      return response
        .split('\n')
        .map(line => line.trim())
        .map(line => line.replace(/^[0-9]+[\.\)\-:]?\s*/, '')) // –£–¥–∞–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é (1., 2), 3: –∏ —Ç.–¥.)
        .filter(line => line && line.length > 10); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏–Ω—ã
    } catch (error) {
      console.error('Error generating hooks with Qwen:', error);
      return [
        '–£–∑–Ω–∞–π—Ç–µ, –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ —Å–µ–π—á–∞—Å',
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ç–æ–∏—Ç —É–≤–∏–¥–µ—Ç—å',
        '–í—ã —Ç–æ—á–Ω–æ –æ–± —ç—Ç–æ–º –Ω–µ –∑–Ω–∞–ª–∏!',
        '–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Ä–µ—à–∏—Ç—å —Å–ª–æ–∂–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É',
        '–¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã: —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å'
      ];
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—É—Å—Ç—ã–º –∫–ª—é—á–æ–º
export const qwenService = new QwenService({ apiKey: '' });

// –û–±–Ω–æ–≤–ª—è–µ–º API –∫–ª—é—á –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–æ–≥–¥–∞ –æ–Ω –º–µ–Ω—è–µ—Ç—Å—è
apiKeyService.addKeyUpdateListener('qwen', (newKey) => {
  qwenService.updateApiKey(newKey);
});