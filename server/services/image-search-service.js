const sharp = require('sharp');
const axios = require('axios');

class ImageSearchService {
  constructor() {
    // Unsplash API (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
    this.unsplashBaseUrl = 'https://source.unsplash.com';
    
    // Backup URLs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
    this.backupUrls = {
      business: 'https://source.unsplash.com/1080x1080/?business',
      technology: 'https://source.unsplash.com/1080x1080/?technology',
      marketing: 'https://source.unsplash.com/1080x1080/?marketing',
      social: 'https://source.unsplash.com/1080x1080/?social',
      nature: 'https://source.unsplash.com/1080x1080/?nature',
      lifestyle: 'https://source.unsplash.com/1080x1080/?lifestyle',
      food: 'https://source.unsplash.com/1080x1080/?food',
      travel: 'https://source.unsplash.com/1080x1080/?travel',
      fitness: 'https://source.unsplash.com/1080x1080/?fitness',
      fashion: 'https://source.unsplash.com/1080x1080/?fashion'
    };
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  extractKeywords(content) {
    console.log('[Image Search] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤');
    
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const russianKeywords = {
      '–±–∏–∑–Ω–µ—Å': 'business',
      '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'technology', 
      '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥': 'marketing',
      '—Å–æ—Ü—Å–µ—Ç–∏': 'social',
      '–ø—Ä–∏—Ä–æ–¥–∞': 'nature',
      '—Å—Ç–∏–ª—å': 'lifestyle',
      '–µ–¥–∞': 'food',
      '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 'travel',
      '—Ñ–∏—Ç–Ω–µ—Å': 'fitness',
      '–º–æ–¥–∞': 'fashion',
      '–¥–∏–∑–∞–π–Ω': 'design',
      '–∏—Å–∫—É—Å—Å—Ç–≤–æ': 'art',
      '–º—É–∑—ã–∫–∞': 'music',
      '—Å–ø–æ—Ä—Ç': 'sport',
      '–∑–¥–æ—Ä–æ–≤—å–µ': 'health'
    };

    const lowerContent = content.toLowerCase();
    
    // –ò—â–µ–º —Ä—É—Å—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏—Ö –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
    for (const [russian, english] of Object.entries(russianKeywords)) {
      if (lowerContent.includes(russian)) {
        console.log(`[Image Search] –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ${russian} -> ${english}`);
        return english;
      }
    }

    // –ò—â–µ–º —Ö—ç—à—Ç–µ–≥–∏
    const hashtags = content.match(/#[\w]+/g);
    if (hashtags && hashtags.length > 0) {
      const hashtag = hashtags[0].replace('#', '').toLowerCase();
      console.log(`[Image Search] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à—Ç–µ–≥: ${hashtag}`);
      return hashtag;
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º business
    console.log('[Image Search] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: business');
    return 'business';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async getImageUrl(content, keywords = []) {
    try {
      console.log('[Image Search] –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      let searchTerm = this.extractKeywords(content);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ
      if (keywords && keywords.length > 0) {
        const keyword = keywords[0].toLowerCase();
        if (this.backupUrls[keyword]) {
          searchTerm = keyword;
        }
      }

      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageUrl = `${this.unsplashBaseUrl}/1080x1080/?${searchTerm}&${Date.now()}`;
      
      console.log(`[Image Search] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω URL: ${imageUrl}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const response = await axios.head(imageUrl, { 
        timeout: 10000,
        maxRedirects: 5
      });
      
      if (response.status === 200) {
        console.log('[Image Search] ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ');
        return imageUrl;
      }
      
      throw new Error('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
      
    } catch (error) {
      console.log(`[Image Search] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const fallbackUrl = this.backupUrls.business;
      console.log(`[Image Search] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${fallbackUrl}`);
      return fallbackUrl;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Å–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async downloadAndCompressImage(imageUrl, maxSize = 300000) { // 300KB max
    try {
      console.log(`[Image Search] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl}`);
      
      const response = await axios.get(imageUrl, { 
        responseType: 'arraybuffer',
        timeout: 15000,
        maxContentLength: 5 * 1024 * 1024, // 5MB max
      });
      
      console.log(`[Image Search] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${response.data.length} –±–∞–π—Ç`);
      
      // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Sharp
      let quality = 80;
      let compressedBuffer;
      
      do {
        compressedBuffer = await sharp(response.data)
          .resize(1080, 1080, { 
            fit: 'cover',
            position: 'center' 
          })
          .jpeg({ 
            quality: quality,
            progressive: true,
            mozjpeg: true 
          })
          .toBuffer();
          
        console.log(`[Image Search] –°–∂–∞—Ç–æ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º ${quality}: ${compressedBuffer.length} –±–∞–π—Ç`);
        
        if (compressedBuffer.length <= maxSize) {
          break;
        }
        
        quality -= 10;
        
      } while (quality >= 20);
      
      if (compressedBuffer.length > maxSize) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–æ 800x800
        compressedBuffer = await sharp(response.data)
          .resize(800, 800, { 
            fit: 'cover',
            position: 'center' 
          })
          .jpeg({ 
            quality: 60,
            progressive: true,
            mozjpeg: true 
          })
          .toBuffer();
          
        console.log(`[Image Search] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –¥–æ 800x800: ${compressedBuffer.length} –±–∞–π—Ç`);
      }
      
      console.log(`[Image Search] ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${compressedBuffer.length} –±–∞–π—Ç`);
      return compressedBuffer;
      
    } catch (error) {
      console.log(`[Image Search] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏/—Å–∂–∞—Ç–∏—è: ${error.message}`);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ fallback
      const fallbackImage = await sharp({
        create: {
          width: 1080,
          height: 1080,
          channels: 3,
          background: { r: 70, g: 130, b: 180 } // –°—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
        }
      })
      .png()
      .toBuffer();
      
      console.log(`[Image Search] –°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${fallbackImage.length} –±–∞–π—Ç`);
      return fallbackImage;
    }
  }

  /**
   * –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–æ–∏—Å–∫ + –∑–∞–≥—Ä—É–∑–∫–∞ + —Å–∂–∞—Ç–∏–µ
   */
  async findAndPrepareImage(content, keywords = []) {
    try {
      console.log('[Image Search] üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      
      // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageUrl = await this.getImageUrl(content, keywords);
      
      // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–∂–∏–º–∞–µ–º
      const compressedImage = await this.downloadAndCompressImage(imageUrl);
      
      // –®–∞–≥ 3: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      return {
        success: true,
        imageBuffer: compressedImage,
        originalUrl: imageUrl,
        size: compressedImage.length
      };
      
    } catch (error) {
      console.log(`[Image Search] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–ª–∞
      const minimalImage = await sharp({
        create: {
          width: 400,
          height: 400,
          channels: 3,
          background: { r: 100, g: 100, b: 100 }
        }
      })
      .png()
      .toBuffer();
      
      return {
        success: false,
        imageBuffer: minimalImage,
        originalUrl: null,
        size: minimalImage.length,
        error: error.message
      };
    }
  }
}

module.exports = new ImageSearchService();