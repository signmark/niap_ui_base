import axios from 'axios';
import { directusApiManager } from '../directus';
import { postAnalyticsService } from './post-analytics';
import logger from '../utils/logger';
import { directusCrud } from './directus-crud';
import { directusAuthManager } from './directus-auth-manager';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
const TELEGRAM_API_BASE_URL = 'https://api.telegram.org/bot';
const VK_API_BASE_URL = 'https://api.vk.com/method';
const FACEBOOK_API_BASE_URL = 'https://graph.facebook.com/v18.0';
const INSTAGRAM_API_BASE_URL = 'https://graph.facebook.com/v18.0';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
 */
export class AnalyticsScheduler {
  private isRunning: boolean = false;
  private isCollecting: boolean = false;
  private schedulerId: NodeJS.Timeout | null = null;
  private interval: number = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  private lastCollectionTime: Date | null = null;
  private processedPosts: number = 0;
  private totalPosts: number = 0;
  
  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
   * @param interval –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
   */
  constructor(interval?: number) {
    if (interval) {
      this.interval = interval;
    }
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  start(): void {
    if (this.isRunning) {
      logger.log('Analytics scheduler is already running', 'analytics-scheduler');
      return;
    }
    
    logger.log(`Starting analytics scheduler with interval ${this.interval}ms`, 'analytics-scheduler');
    this.isRunning = true;
    
    // –°—Ä–∞–∑—É –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    this.schedulerId = setInterval(() => {
      // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      // –°–±–æ—Ä –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ API –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      logger.log('Scheduled analytics collection interval triggered, but skipping auto-collection', 'analytics-scheduler');
    }, this.interval);
  }
  
  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  stop(): void {
    if (!this.isRunning || !this.schedulerId) {
      logger.log('Analytics scheduler is not running', 'analytics-scheduler');
      return;
    }
    
    logger.log('Stopping analytics scheduler', 'analytics-scheduler');
    clearInterval(this.schedulerId);
    this.isRunning = false;
    this.schedulerId = null;
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
   * –ú–µ—Ç–æ–¥ –ø—É–±–ª–∏—á–Ω—ã–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   * @returns –ü—Ä–∏–∑–Ω–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  isCollectingAnalytics(): boolean {
    return this.isCollecting;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   * @returns –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  getLastCollectionTime(): Date | null {
    return this.lastCollectionTime;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
   * @returns –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
   */
  getProcessedPostsCount(): number {
    return this.processedPosts;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @returns –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
   */
  getTotalPostsCount(): number {
    return this.totalPosts;
  }

  async collectAnalytics(specificCampaignId?: string, userId?: string): Promise<void> {
    // –ï—Å–ª–∏ —Å–±–æ—Ä —É–∂–µ –∏–¥–µ—Ç, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (this.isCollecting) {
      logger.log('Analytics collection is already in progress', 'analytics-scheduler');
      return;
    }
    
    try {
      logger.log(`Starting analytics collection${specificCampaignId ? ` for campaign ${specificCampaignId}` : ''}${userId ? ` for user ${userId}` : ''}...`, 'analytics-scheduler');
      this.isCollecting = true;
      this.processedPosts = 0;
      this.totalPosts = 0;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω userId
      let token;
      let tokenUserId = userId;
      
      // –ï—Å–ª–∏ userId –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
      if (!tokenUserId) {
        tokenUserId = process.env.DIRECTUS_ADMIN_USER_ID || '53921f16-f51d-4591-80b9-8caa4fde4d13';
        logger.info(`No userId provided for analytics collection, using admin user ${tokenUserId}`, 'analytics-scheduler');
      }
      
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∫–µ—à–µ
        token = await directusAuthManager.getAuthToken(tokenUserId);
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∑–∞–Ω–æ–≤–æ
        if (!token) {
          logger.info(`No token in cache for user ${tokenUserId}, authenticating...`, 'analytics-scheduler');
          
          // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ directusCrud
          const email = process.env.DIRECTUS_ADMIN_EMAIL || 'lbrspb@gmail.com';
          const password = process.env.DIRECTUS_ADMIN_PASSWORD || 'QtpZ3dh7';
          
          const authResult = await directusCrud.login(email, password);
          token = authResult.access_token;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫–µ—à–µ
          directusApiManager.cacheAuthToken(tokenUserId, token, 3600); // 1 —á–∞—Å
          
          logger.info(`Authentication successful for user ${tokenUserId}`, 'analytics-scheduler');
        } else {
          logger.info(`Using cached token for user ${tokenUserId}`, 'analytics-scheduler');
        }
      } catch (authError) {
        logger.error(`Failed to authenticate for analytics: ${authError}`, 'analytics-scheduler');
        return;
      }
      
      if (!token) {
        logger.error(`Failed to get token for user ${tokenUserId}`, 'analytics-scheduler');
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–π)
      logger.info(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö`, 'analytics-scheduler');
      
      // –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Å —Å–∞–º—ã–º–∏ –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
      // –ò—â–µ–º –¢–û–õ–¨–ö–û –ø–æ—Å—Ç—ã —Å social_platforms, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω—ã
      let filter: any = {};
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω userId, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ñ–∏–ª—å—Ç—Ä
      if (userId) {
        filter.user_id = { _eq: userId };
        logger.info(`–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${userId}`, 'analytics-scheduler');
      }
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –∫–∞–º–ø–∞–Ω–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ñ–∏–ª—å—Ç—Ä
      if (specificCampaignId) {
        filter.campaign_id = { _eq: specificCampaignId };
        logger.info(`–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏: ${specificCampaignId}`, 'analytics-scheduler');
      }
      
      logger.info(`üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: ${JSON.stringify(filter)}`, 'analytics-scheduler');
      
      // –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
      // –ù–ï –ó–ê–ü–†–ê–®–ò–í–ê–ï–ú metadata, date_created, date_updated - –∏—Ö –Ω–µ—Ç
      const fields = ['id', 'title', 'content', 'social_platforms', 'user_id', 'campaign_id', 'status'];
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Directus
      logger.log('Fetching posts for analytics collection with simplified filter...', 'analytics-scheduler');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
      const queryParams = new URLSearchParams();
      queryParams.append('filter', JSON.stringify(filter));
      queryParams.append('fields', fields.join(','));
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Directus —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const response = await directusApiManager.makeAuthenticatedRequest({
        method: 'GET',
        path: `/items/campaign_content?${queryParams.toString()}`,
        token: token
      });
      
      if (!response || !response.data || !response.data.data) {
        logger.warn('No data returned from Directus for analytics collection', 'analytics-scheduler');
        return;
      }
      
      const allPosts = response.data.data;
      if (!Array.isArray(allPosts)) {
        logger.warn('Post data is not an array', 'analytics-scheduler');
        return;
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã —Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
      const publishedPosts = allPosts.filter(post => {
        if (!post.social_platforms) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "published"
        return Object.entries(post.social_platforms).some(([_, platformData]: [string, any]) => 
          platformData && 
          typeof platformData === 'object' && 
          platformData.status === 'published' && 
          platformData.postUrl
        );
      });
      
      logger.log(`Found ${publishedPosts.length} published posts for analytics from ${allPosts.length} total posts`, 'analytics-scheduler');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      this.totalPosts = publishedPosts.length;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
      for (const post of publishedPosts) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id –≤ –ø–æ—Å—Ç–µ
          if (!post.user_id) {
            logger.warn(`Post ${post.id} doesn't have user_id, skipping analytics collection`, 'analytics-scheduler');
            continue;
          }
          
          // –°–æ–±–∏—Ä–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –ø–æ—Å—Ç–∞
          await this.collectPostAnalytics(post, post.user_id);
          this.processedPosts++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
          
          logger.log(`Collected analytics for post ${post.id} (${this.processedPosts}/${this.totalPosts})`, 'analytics-scheduler');
        } catch (error) {
          logger.error(`Error collecting analytics for post ${post.id}: ${error}`, error, 'analytics-scheduler');
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      this.lastCollectionTime = new Date();
      logger.log(`Analytics collection completed for ${this.processedPosts} posts`, 'analytics-scheduler');
    } catch (error) {
      logger.error(`Error in analytics collection: ${error}`, error, 'analytics-scheduler');
    } finally {
      this.isCollecting = false; // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞
    }
  }
  
  // –ú–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–æ—Å—Ç–æ–≤ —É–¥–∞–ª–µ–Ω—ã, 
  // —Ç–µ–ø–µ—Ä—å –º—ã –Ω–∞–ø—Ä—è–º—É—é –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–π
  
  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
   * @param post –ü–æ—Å—Ç
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async collectPostAnalytics(post: any, userId: string): Promise<void> {
    try {
      const postId = post.id;
      const socialPlatforms = post.social_platforms || {};
      
      logger.log(`Collecting analytics for post ${postId}`, 'analytics-scheduler');
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const settings = await this.getUserSocialSettings(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      for (const [platform, platformData] of Object.entries(socialPlatforms)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ platformData —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –ø—Ä–∏–º–∏—Ç–∏–≤
        if (typeof platformData !== 'object' || platformData === null) {
          logger.warn(`Platform data for ${platform} is not an object: ${JSON.stringify(platformData)}`, 'analytics-scheduler');
          continue;
        }
        
        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É any –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const data = platformData as any;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        if (data && data.status === 'published' && data.postUrl) {
          switch (platform) {
            case 'telegram':
              await this.collectTelegramAnalytics(postId, data, settings.telegram, userId);
              break;
            case 'vk':
              await this.collectVkAnalytics(postId, data, settings.vk, userId);
              break;
            case 'facebook':
              await this.collectFacebookAnalytics(postId, data, settings.facebook, userId);
              break;
            case 'instagram':
              await this.collectInstagramAnalytics(postId, data, settings.instagram, userId);
              break;
            default:
              logger.warn(`Unknown platform: ${platform}`, 'analytics-scheduler');
          }
        } else {
          logger.warn(`Post ${postId} has platform ${platform} but it's not fully published or missing URL: ${JSON.stringify(data)}`, 'analytics-scheduler');
        }
      }
    } catch (error) {
      logger.error(`Error collecting analytics for post ${post.id}: ${error}`, error, 'analytics-scheduler');
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
   */
  private async getUserSocialSettings(userId: string): Promise<any> {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –∞–¥–º–∏–Ω–∞
      let token = await directusApiManager.getUserToken(userId);
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      if (!token) {
        logger.info(`No user token in cache for ${userId}, trying to get admin token...`, 'analytics-scheduler');
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞
        const adminUserId = process.env.DIRECTUS_ADMIN_USER_ID || '53921f16-f51d-4591-80b9-8caa4fde4d13';
        token = await directusAuthManager.getAuthToken(adminUserId);
        
        // –ï—Å–ª–∏ –∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∑–∞–Ω–æ–≤–æ
        if (!token) {
          const email = process.env.DIRECTUS_ADMIN_EMAIL || 'lbrspb@gmail.com';
          const password = process.env.DIRECTUS_ADMIN_PASSWORD || 'QtpZ3dh7';
          
          try {
            // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ directusCrud
            const authResult = await directusCrud.login(email, password);
            token = authResult.access_token;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫–µ—à–∞—Ö
            directusApiManager.cacheAuthToken(adminUserId, token, 3600); // 1 —á–∞—Å
            directusAuthManager.addAdminSession({
              id: adminUserId,
              token: token,
              email: email
            });
            
            logger.info(`Admin authenticated for getting social settings for user ${userId}`, 'analytics-scheduler');
          } catch (authError) {
            logger.error(`Failed to authenticate for getting social settings: ${authError}`, 'analytics-scheduler');
            return {
              telegram: {},
              vk: {},
              facebook: {},
              instagram: {}
            };
          }
        }
      }
      
      if (!token) {
        logger.error(`No token available for getting social settings for user ${userId}`, 'analytics-scheduler');
        return {
          telegram: {},
          vk: {},
          facebook: {},
          instagram: {}
        };
      }
      
      const filter = { user_id: { _eq: userId } };
      const fields = ['id', 'social_media_settings'];
      
      logger.log(`Requesting social settings for user ${userId} using admin token`, 'analytics-scheduler');
      const response = await directusApiManager.makeAuthenticatedRequest({
        method: 'GET',
        path: `/items/campaigns?filter=${JSON.stringify(filter)}&fields=${fields.join(',')}`,
        token
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (!response) {
        logger.warn(`Empty response when getting campaigns for user ${userId}`, 'analytics-scheduler');
        return {
          telegram: {},
          vk: {},
          facebook: {},
          instagram: {}
        };
      }
      
      if (!response.data) {
        logger.warn(`Response does not contain data field for campaigns of user ${userId}`, 'analytics-scheduler');
        return {
          telegram: {},
          vk: {},
          facebook: {},
          instagram: {}
        };
      }
      
      const campaigns = response.data.data || [];
      
      if (!Array.isArray(campaigns)) {
        logger.warn(`Campaigns data is not an array for user ${userId}`, 'analytics-scheduler');
        return {
          telegram: {},
          vk: {},
          facebook: {},
          instagram: {}
        };
      }
      
      if (campaigns.length === 0) {
        logger.warn(`No campaigns found for user ${userId}`, 'analytics-scheduler');
        return {
          telegram: {},
          vk: {},
          facebook: {},
          instagram: {}
        };
      }
      
      logger.log(`Found ${campaigns.length} campaigns for user ${userId}`, 'analytics-scheduler');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
      const settings = campaigns[0].social_media_settings || {};
      
      logger.log(`Retrieved social settings for user ${userId}`, 'analytics-scheduler');
      return settings;
    } catch (error) {
      logger.error(`Error getting user social settings: ${error}`, error, 'analytics-scheduler');
      return {
        telegram: {},
        vk: {},
        facebook: {},
        instagram: {}
      };
    }
  }
  
  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –ø–æ—Å—Ç–∞ –≤ Telegram
   * @param postId ID –ø–æ—Å—Ç–∞
   * @param platformData –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
   * @param settings –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async collectTelegramAnalytics(postId: string, platformData: any, settings: any, userId: string): Promise<void> {
    try {
      const token = settings.token;
      const chatId = settings.chatId;
      const messageId = this.extractTelegramMessageId(platformData.postUrl);
      
      if (!token || !chatId || !messageId) {
        logger.warn(`Missing Telegram settings or message ID for post ${postId}`, 'analytics-scheduler');
        return;
      }
      
      logger.log(`Collecting Telegram analytics for post ${postId} (message ID: ${messageId})`, 'analytics-scheduler');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
      const messageResponse = await axios.get(
        `${TELEGRAM_API_BASE_URL}${token}/getChat?chat_id=${chatId}`
      );
      
      // –ù–µ –≤—Å–µ —Ç–∏–ø—ã —á–∞—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const chatData = messageResponse.data.result;
      let viewCount = 0;
      
      if (chatData.type === 'channel' || chatData.type === 'supergroup') {
        const chatStatsResponse = await axios.get(
          `${TELEGRAM_API_BASE_URL}${token}/getChatMemberCount?chat_id=${chatId}`
        );
        viewCount = chatStatsResponse.data.result || 0;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª
      if (platformData.messageViews) {
        viewCount = platformData.messageViews;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
      await postAnalyticsService.updateStats(postId, 'telegram', userId, {
        views: viewCount
      });
      
      logger.log(`Telegram analytics collected for post ${postId}`, 'analytics-scheduler');
    } catch (error) {
      logger.error(`Error collecting Telegram analytics: ${error}`, error, 'analytics-scheduler');
    }
  }
  
  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
   * @param postId ID –ø–æ—Å—Ç–∞
   * @param platformData –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
   * @param settings –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async collectVkAnalytics(postId: string, platformData: any, settings: any, userId: string): Promise<void> {
    try {
      const token = settings.token;
      const ownerId = settings.groupId || settings.userId;
      const postVkId = this.extractVkPostId(platformData.postUrl);
      
      if (!token || !ownerId || !postVkId) {
        logger.warn(`Missing VK settings or post ID for post ${postId}`, 'analytics-scheduler');
        return;
      }
      
      logger.log(`Collecting VK analytics for post ${postId} (VK post ID: ${postVkId})`, 'analytics-scheduler');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
      const postResponse = await axios.get(
        `${VK_API_BASE_URL}/wall.getById?posts=${ownerId}_${postVkId}&access_token=${token}&v=5.131`
      );
      
      const postData = postResponse.data.response?.[0];
      if (!postData) {
        throw new Error('Failed to fetch VK post data');
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const likes = postData.likes?.count || 0;
      const comments = postData.comments?.count || 0;
      const reposts = postData.reposts?.count || 0;
      const views = postData.views?.count || 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
      await postAnalyticsService.updateStats(postId, 'vk', userId, {
        views,
        likes,
        comments,
        shares: reposts
      });
      
      logger.log(`VK analytics collected for post ${postId}`, 'analytics-scheduler');
    } catch (error) {
      logger.error(`Error collecting VK analytics: ${error}`, error, 'analytics-scheduler');
    }
  }
  
  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –ø–æ—Å—Ç–∞ –≤ Facebook
   * @param postId ID –ø–æ—Å—Ç–∞
   * @param platformData –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
   * @param settings –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Facebook
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async collectFacebookAnalytics(postId: string, platformData: any, settings: any, userId: string): Promise<void> {
    try {
      const token = settings.token;
      const fbPostId = this.extractFacebookPostId(platformData.postUrl);
      
      if (!token || !fbPostId) {
        logger.warn(`Missing Facebook settings or post ID for post ${postId}`, 'analytics-scheduler');
        return;
      }
      
      logger.log(`Collecting Facebook analytics for post ${postId} (FB post ID: ${fbPostId})`, 'analytics-scheduler');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞
      const postResponse = await axios.get(
        `${FACEBOOK_API_BASE_URL}/${fbPostId}?fields=likes.summary(true),comments.summary(true),shares,insights.metric(post_impressions,post_clicks)&access_token=${token}`
      );
      
      const postData = postResponse.data;
      if (!postData) {
        throw new Error('Failed to fetch Facebook post data');
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const likes = postData.likes?.summary?.total_count || 0;
      const comments = postData.comments?.summary?.total_count || 0;
      const shares = postData.shares?.count || 0;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ –∫–ª–∏–∫–∏ –∏–∑ insights
      let views = 0;
      let clicks = 0;
      
      if (postData.insights && postData.insights.data) {
        for (const insight of postData.insights.data) {
          if (insight.name === 'post_impressions') {
            views = insight.values[0]?.value || 0;
          } else if (insight.name === 'post_clicks') {
            clicks = insight.values[0]?.value || 0;
          }
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
      await postAnalyticsService.updateStats(postId, 'facebook', userId, {
        views,
        likes,
        comments,
        shares,
        clicks
      });
      
      logger.log(`Facebook analytics collected for post ${postId}`, 'analytics-scheduler');
    } catch (error) {
      logger.error(`Error collecting Facebook analytics: ${error}`, error, 'analytics-scheduler');
    }
  }
  
  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –ø–æ—Å—Ç–∞ –≤ Instagram
   * @param postId ID –ø–æ—Å—Ç–∞
   * @param platformData –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
   * @param settings –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Instagram
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async collectInstagramAnalytics(postId: string, platformData: any, settings: any, userId: string): Promise<void> {
    try {
      const token = settings.token;
      const igPostId = this.extractInstagramPostId(platformData.postUrl);
      
      if (!token || !igPostId) {
        logger.warn(`Missing Instagram settings or post ID for post ${postId}`, 'analytics-scheduler');
        return;
      }
      
      logger.log(`Collecting Instagram analytics for post ${postId} (IG post ID: ${igPostId})`, 'analytics-scheduler');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞ (–¥–ª—è –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤)
      const postResponse = await axios.get(
        `${INSTAGRAM_API_BASE_URL}/${igPostId}/insights?metric=engagement,impressions,reach,saved&access_token=${token}`
      );
      
      const insightsData = postResponse.data.data || [];
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      let views = 0;
      let engagement = 0;
      let reach = 0;
      let saved = 0;
      
      for (const insight of insightsData) {
        if (insight.name === 'impressions') {
          views = insight.values[0]?.value || 0;
        } else if (insight.name === 'engagement') {
          engagement = insight.values[0]?.value || 0;
        } else if (insight.name === 'reach') {
          reach = insight.values[0]?.value || 0;
        } else if (insight.name === 'saved') {
          saved = insight.values[0]?.value || 0;
        }
      }
      
      // –ö—Ä–æ–º–µ –∏–Ω—Å–∞–π—Ç–æ–≤, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–π–∫–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
      const mediaResponse = await axios.get(
        `${INSTAGRAM_API_BASE_URL}/${igPostId}?fields=like_count,comments_count&access_token=${token}`
      );
      
      const mediaData = mediaResponse.data;
      const likes = mediaData.like_count || 0;
      const comments = mediaData.comments_count || 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
      await postAnalyticsService.updateStats(postId, 'instagram', userId, {
        views,
        likes,
        comments,
        // Instagram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–µ—Ä–æ–≤, 
        // –Ω–æ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        shares: saved,
        // Instagram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª–∏–∫–æ–≤,
        // –Ω–æ –æ–±—â–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        clicks: engagement - likes - comments - saved
      });
      
      logger.log(`Instagram analytics collected for post ${postId}`, 'analytics-scheduler');
    } catch (error) {
      logger.error(`Error collecting Instagram analytics: ${error}`, error, 'analytics-scheduler');
    }
  }
  
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ URL Telegram
   * @param url URL –ø–æ—Å—Ç–∞ –≤ Telegram
   * @returns ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ null
   */
  private extractTelegramMessageId(url: string): string | null {
    try {
      // –§–æ—Ä–º–∞—Ç URL: https://t.me/c/1234567890/123 –∏–ª–∏ https://t.me/username/123
      const match = url.match(/t\.me\/(?:c\/\d+\/|[^/]+\/)(\d+)/);
      return match ? match[1] : null;
    } catch (error) {
      return null;
    }
  }
  
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–æ—Å—Ç–∞ –∏–∑ URL –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
   * @param url URL –ø–æ—Å—Ç–∞ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
   * @returns ID –ø–æ—Å—Ç–∞ –∏–ª–∏ null
   */
  private extractVkPostId(url: string): string | null {
    try {
      // –§–æ—Ä–º–∞—Ç URL: https://vk.com/wall-123456789_123
      const match = url.match(/wall(?:-?\d+)_(\d+)/);
      return match ? match[1] : null;
    } catch (error) {
      return null;
    }
  }
  
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–æ—Å—Ç–∞ –∏–∑ URL Facebook
   * @param url URL –ø–æ—Å—Ç–∞ –≤ Facebook
   * @returns ID –ø–æ—Å—Ç–∞ –∏–ª–∏ null
   */
  private extractFacebookPostId(url: string): string | null {
    try {
      // –§–æ—Ä–º–∞—Ç URL: https://www.facebook.com/username/posts/123456789
      // –∏–ª–∏ https://www.facebook.com/username/posts/pfbid0123456789
      const match = url.match(/(?:posts|videos|photos)\/(?:pfbid\w+|(\d+))/);
      if (match) {
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ ID –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if (match[1]) {
          return match[1];
        }
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ pfbid, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
        // –ù–æ —Ç–∞–∫ –∫–∞–∫ ID –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞, –≤–µ—Ä–Ω–µ–º –≤–µ—Å—å –ø—É—Ç—å
        return match[0].replace(/^(?:posts|videos|photos)\//, '');
      }
      return null;
    } catch (error) {
      return null;
    }
  }
  
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–æ—Å—Ç–∞ –∏–∑ URL Instagram
   * @param url URL –ø–æ—Å—Ç–∞ –≤ Instagram
   * @returns ID –ø–æ—Å—Ç–∞ –∏–ª–∏ null
   */
  private extractInstagramPostId(url: string): string | null {
    try {
      // –§–æ—Ä–º–∞—Ç URL: https://www.instagram.com/p/CdEfGhIjKlM/
      const match = url.match(/instagram\.com\/p\/([^/]+)/);
      
      // Instagram API —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω—ã–π ID, –∫–æ—Ç–æ—Ä—ã–π –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL
      // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å API –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å ID –ø–æ—Å—Ç–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      return match ? match[1] : null;
    } catch (error) {
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const analyticsScheduler = new AnalyticsScheduler();