import { GoogleGenerativeAI } from '@google/generative-ai';
import * as logger from '../utils/logger';
import { SocksProxyAgent } from 'socks-proxy-agent';
import fetch from 'node-fetch';
import { vertexAIAuth } from './vertex-ai-auth';


interface GeminiProxyOptions {
  apiKey: string;
  proxyHost?: string;
  proxyPort?: number;
  proxyUsername?: string;
  proxyPassword?: string;
}

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Gemini —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SOCKS5 –ø—Ä–æ–∫—Å–∏
 */
export class GeminiProxyService {
  private apiKey: string;
  private agent: SocksProxyAgent | null;
  private proxyUrl: string | null;
  private maxRetries: number = 3;
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é API –∏ URL –¥–ª—è –º–æ–¥–µ–ª–∏
   * @param model –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   * @returns –û–±—ä–µ–∫—Ç —Å –≤–µ—Ä—Å–∏–µ–π API –∏ –±–∞–∑–æ–≤—ã–º URL
   */
  private getApiVersionForModel(model: string): { version: string; baseUrl: string; isVertexAI?: boolean } {
    // Gemini 2.5 –º–æ–¥–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç Vertex AI
    if (model === 'gemini-2.5-flash' || model === 'gemini-2.5-pro') {
      return {
        version: 'v1',
        baseUrl: vertexAIAuth.getVertexAIUrl(model),
        isVertexAI: true
      };
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Generative Language API
    return {
      version: 'v1beta',
      baseUrl: 'https://generativelanguage.googleapis.com/v1beta'
    };
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è API
   * @param model –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
   * @returns –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è API
   */
  private mapModelToApiName(model: string): string {
    const modelMap: Record<string, string> = {
      // Gemini 2.5 –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è Vertex AI (–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
      'gemini-2.5-flash': 'gemini-2.5-flash',
      'gemini-2.5-pro': 'gemini-2.5-pro',
      // Gemini 2.0 –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ API
      'gemini-2.0-flash': 'gemini-2.0-flash-exp',
      'gemini-2.0-flash-lite': 'gemini-2.0-flash-thinking-exp-1219',
      // Gemini 1.5 –º–æ–¥–µ–ª–∏
      'gemini-1.5-flash': 'gemini-1.5-flash-latest',
      'gemini-1.5-pro': 'gemini-1.5-pro-latest'
    };

    return modelMap[model] || model;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä GeminiProxyService
   * @param options –û–ø—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
   */
  constructor(options: GeminiProxyOptions) {
    this.apiKey = options.apiKey;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∑–∞—Ç–µ–º defaults
    const proxyHost = options.proxyHost || process.env.PROXY_HOST || '138.219.123.68';
    const proxyPort = options.proxyPort || parseInt(process.env.PROXY_PORT || '9710');
    const proxyUsername = options.proxyUsername || process.env.PROXY_USERNAME || 'PGjuJV';
    const proxyPassword = options.proxyPassword || process.env.PROXY_PASSWORD || 'cwZmJ3';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–æ–∫—Å–∏ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    this.proxyUrl = `socks5://${proxyUsername}:${proxyPassword}@${proxyHost}:${proxyPort}`;
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏-–∞–≥–µ–Ω—Ç
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ SocksProxyAgent
      if (SocksProxyAgent) {
        this.agent = new SocksProxyAgent(this.proxyUrl);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ª–æ–≥–∞ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        const safeProxyUrl = this.proxyUrl.replace(/:[^:@]*@/, ':***@');
        logger.log(`[gemini-proxy] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω SOCKS5 –ø—Ä–æ–∫—Å–∏: ${safeProxyUrl}`, 'gemini');
      } else {
        logger.warn('[gemini-proxy] SOCKS5 –ø—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç.–∫. –º–æ–¥—É–ª—å socks-proxy-agent –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'gemini');
        this.agent = null;
      }
    } catch (error) {
      logger.error(`[gemini-proxy] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SOCKS5 –ø—Ä–æ–∫—Å–∏: ${(error as Error).message}`, 'gemini');
      this.agent = null;
      this.proxyUrl = null;
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini API —á–µ—Ä–µ–∑ SOCKS5 –ø—Ä–æ–∫—Å–∏
   * @param url URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   * @param body –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
   * @param isVertexAI –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Vertex AI
   * @returns –û—Ç–≤–µ—Ç –æ—Ç API –≤ –≤–∏–¥–µ JSON
   */
  async sendRequest(url: string, body: any, isVertexAI = false): Promise<any> {
    let retries = 0;
    let lastError: Error | null = null;
    
    while (retries < this.maxRetries) {
      try {
        // –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á –≤ URL –¥–ª—è –ª–æ–≥–æ–≤
        const safeUrl = url.replace(/key=[^&]+/, 'key=****');
        logger.log(`[gemini-proxy] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫: ${safeUrl}`, 'gemini');
        
        const fetchOptions: any = {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(body)
        };
        
        // –î–ª—è Vertex AI –∏—Å–ø–æ–ª—å–∑—É–µ–º Service Account –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (url.includes('aiplatform.googleapis.com')) {
          logger.log(`[gemini-proxy] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Vertex AI, –ø–æ–ª—É—á–∞–µ–º Service Account —Ç–æ–∫–µ–Ω`, 'gemini');
          const accessToken = await vertexAIAuth.getAccessToken();
          if (accessToken) {
            fetchOptions.headers = {
              ...fetchOptions.headers,
              'Authorization': `Bearer ${accessToken}`
            };
            logger.log(`[gemini-proxy] Service Account —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è Vertex AI`, 'gemini');
          } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Service Account —Ç–æ–∫–µ–Ω –¥–ª—è Vertex AI');
          }
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Gemini API (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
        // –í Replit —Å—Ä–µ–¥–µ –ø—Ä–æ–∫—Å–∏ –ù–ï –Ω—É–∂–µ–Ω, –Ω–æ –Ω–∞ —Å—Ç–µ–π–¥–∂–µ/–ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù
        const isReplit = process.env.REPLIT_DOMAINS || process.env.REPL_ID;
        const isStaging = process.env.NODE_ENV === 'staging' || process.env.NODE_ENV === 'production';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const forceProxy = process.env.FORCE_GEMINI_PROXY === 'true';
        
        // –ö–†–ò–¢–ò–ß–ù–û: –Ω–∞ —Å—Ç–µ–π–¥–∂–µ/–ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Google
        // –ï—Å–ª–∏ FORCE_GEMINI_PROXY=true, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–∞–∂–µ –≤ Replit
        if (this.agent && (isStaging || forceProxy)) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤–∫–ª—é—á–∞—è Vertex AI)
          fetchOptions.agent = this.agent;
          logger.log(`[gemini-proxy] üá∫üá∏ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π SOCKS5 –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${this.proxyUrl?.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')}`, 'gemini');
        } else {
          if (isReplit) {
            logger.log(`[gemini-proxy] üá∫üá∏ Replit —Å—Ä–µ–¥–∞ - –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏`, 'gemini');
          } else {
            logger.warn(`[gemini-proxy] ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ Google`, 'gemini');
          }
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        const response = await fetch(url, fetchOptions);
        const status = response.status;
        
        logger.log(`[gemini-proxy] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${status}`, 'gemini');
        
        if (status === 200) {
          // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
          const data = await response.json();
          return data;
        } else {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          const errorText = await response.text();
          throw new Error(`HTTP error ${status}: ${errorText}`);
        }
      } catch (error) {
        lastError = error as Error;
        retries++;
        
        if (retries < this.maxRetries) {
          const backoffTime = Math.pow(2, retries) * 500; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          logger.warn(`[gemini-proxy] –ü–æ–ø—ã—Ç–∫–∞ ${retries} –∏–∑ ${this.maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${backoffTime}ms. –û—à–∏–±–∫–∞: ${lastError.message}`, 'gemini');
          await new Promise(resolve => setTimeout(resolve, backoffTime));
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    throw new Error(`[gemini-proxy] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–æ. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${lastError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
  
  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Gemini –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
   * @returns true –µ—Å–ª–∏ API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ false
   */
  async testApiKey(): Promise<boolean> {
    try {
      // URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API Gemini (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ v1beta –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Gemini 2.5)
      const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${this.apiKey}`;
      
      // –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
      const requestData = {
        contents: [
          {
            parts: [
              {
                text: "Hello, this is a test message."
              }
            ]
          }
        ]
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      await this.sendRequest(url, requestData, false);
      
      return true;
    } catch (error) {
      logger.error(`[gemini-proxy] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –∫–ª—é—á–∞: ${(error as Error).message}`, 'gemini');
      return false;
    }
  }
  
  /**
   * –£–ª—É—á—à–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini API
   * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
   * @returns –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  async improveText(params: { text: string; prompt: string; model?: string }): Promise<string> {
    try {
      const { text, prompt, model = 'gemini-2.5-flash' } = params;
      
      logger.log(`[gemini-proxy] Improving text with model: ${model}`, 'gemini');
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–æ–¥–µ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ API
      const apiModel = this.mapModelToApiName(model);
      logger.log(`[gemini-proxy] Mapped model ${model} to API model: ${apiModel}`, 'gemini');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é API –¥–ª—è –º–æ–¥–µ–ª–∏
      const { baseUrl, isVertexAI } = this.getApiVersionForModel(apiModel);
      
      let url: string;
      if (isVertexAI) {
        // –î–ª—è Vertex AI baseUrl —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å –º–æ–¥–µ–ª—å—é
        url = baseUrl;
      } else {
        // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ API –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        url = `${baseUrl}/models/${apiModel}:generateContent?key=${this.apiKey}`;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      const requestData = {
        contents: [
          {
            parts: [
              {
                text: `${prompt}\n\n${text}`
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.4,
          topP: 0.9,
          topK: 40,
          maxOutputTokens: 8192
        }
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await this.sendRequest(url, requestData, isVertexAI);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      if (response.candidates && response.candidates.length > 0 && 
          response.candidates[0].content && 
          response.candidates[0].content.parts && 
          response.candidates[0].content.parts.length > 0) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
        let resultText = response.candidates[0].content.parts[0].text || '';
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML-—Ç–µ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        resultText = resultText.replace(/<automatic_updates>[\s\S]*?<\/automatic_updates>/g, '');
        resultText = resultText.replace(/<[^>]*>/g, '');
        resultText = resultText.replace(/```html/g, ''); // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞ HTML-–∫–æ–¥–∞
        resultText = resultText.replace(/```/g, ''); // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∞—Ä–∫–µ—Ä—ã –∫–æ–¥–∞
        
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ --- –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
        resultText = resultText.replace(/^---\s*\n?/g, ''); // –£–¥–∞–ª—è–µ–º --- –≤ –Ω–∞—á–∞–ª–µ
        resultText = resultText.replace(/\n?\s*---\s*$/g, ''); // –£–¥–∞–ª—è–µ–º --- –≤ –∫–æ–Ω—Ü–µ
        resultText = resultText.trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        
        return resultText;
      }
      
      throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API');
    } catch (error) {
      logger.error(`[gemini-proxy] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: ${(error as Error).message}`, 'gemini');
      throw error;
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini API
   * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
   * @returns –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  async generateText(params: { prompt: string; model?: string }): Promise<string> {
    try {
      const { prompt, model = 'gemini-2.5-flash' } = params;
      
      logger.log(`[gemini-proxy] Generating text with model: ${model}`, 'gemini');
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–æ–¥–µ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ API
      const apiModel = this.mapModelToApiName(model);
      logger.log(`[gemini-proxy] Mapped model ${model} to API model: ${apiModel}`, 'gemini');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é API –¥–ª—è –º–æ–¥–µ–ª–∏
      const { baseUrl, isVertexAI } = this.getApiVersionForModel(apiModel);
      
      let url: string;
      if (isVertexAI) {
        // –î–ª—è Vertex AI baseUrl —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å –º–æ–¥–µ–ª—å—é
        url = baseUrl;
      } else {
        // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ API –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        url = `${baseUrl}/models/${apiModel}:generateContent?key=${this.apiKey}`;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      const requestData = {
        contents: [
          {
            role: "user",
            parts: [
              {
                text: prompt
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topP: 0.95,
          topK: 40,
          maxOutputTokens: 8192
        }
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await this.sendRequest(url, requestData, isVertexAI);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      if (response.candidates && response.candidates.length > 0 && 
          response.candidates[0].content && 
          response.candidates[0].content.parts && 
          response.candidates[0].content.parts.length > 0) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
        let resultText = response.candidates[0].content.parts[0].text || '';
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML-—Ç–µ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        resultText = resultText.replace(/<automatic_updates>[\s\S]*?<\/automatic_updates>/g, '');
        resultText = resultText.replace(/<[^>]*>/g, '');
        resultText = resultText.replace(/```html/g, ''); // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞—á–∞–ª–∞ HTML-–∫–æ–¥–∞
        resultText = resultText.replace(/```/g, ''); // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∞—Ä–∫–µ—Ä—ã –∫–æ–¥–∞
        
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ --- –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
        resultText = resultText.replace(/^---\s*\n?/g, ''); // –£–¥–∞–ª—è–µ–º --- –≤ –Ω–∞—á–∞–ª–µ
        resultText = resultText.replace(/\n?\s*---\s*$/g, ''); // –£–¥–∞–ª—è–µ–º --- –≤ –∫–æ–Ω—Ü–µ
        resultText = resultText.trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        
        return resultText;
      }
      
      throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API');
    } catch (error) {
      logger.error(`[gemini-proxy] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: ${(error as Error).message}`, 'gemini');
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const geminiProxyService = new GeminiProxyService({ 
  apiKey: process.env.GEMINI_API_KEY || 'AIzaSyDaYtWfHwI9vq3kTatny217HnbKauAvdxE'
});

// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —Å API –∫–ª—é—á–æ–º (—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–ª—é—á –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
const apiKeyPrefix = (process.env.GEMINI_API_KEY || 'AIzaSyDaYtWfHwI9vq3kTatny217HnbKauAvdxE').substring(0, 10);
logger.log(`[gemini-proxy] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å API –∫–ª—é—á–æ–º: ${apiKeyPrefix}...`, 'gemini');