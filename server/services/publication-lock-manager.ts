import { log } from '../utils/logger';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç, —á—Ç–æ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
 */
export class PublicationLockManager {
  private locks = new Map<string, Set<string>>(); // contentId -> Set<platform>
  private lockTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
  private lockTimestamps = new Map<string, number>(); // lock key -> timestamp
  private maxLocksSize = 500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  private cleanupIntervalId: NodeJS.Timeout | null = null;

  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   * @param contentId ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param platform –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (instagram, facebook, vk, telegram)
   * @returns true –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, false –µ—Å–ª–∏ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
   */
  async acquireLock(contentId: string, platform: string): Promise<boolean> {
    const lockKey = `${contentId}:${platform}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if (this.isLocked(contentId, platform)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
      const timestamp = this.lockTimestamps.get(lockKey);
      if (timestamp && Date.now() - timestamp > this.lockTimeout) {
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        this.releaseLock(contentId, platform);
        log(`üîì PublicationLock: –ò—Å—Ç–µ–∫—à–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –¥–ª—è ${lockKey}`, 'publication-lock');
      } else {
        log(`üîí PublicationLock: –ö–æ–Ω—Ç–µ–Ω—Ç ${contentId} —É–∂–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ ${platform}`, 'publication-lock');
        return false;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    let platformSet = this.locks.get(contentId);
    if (!platformSet) {
      platformSet = new Set();
      this.locks.set(contentId, platformSet);
    }
    
    platformSet.add(platform);
    this.lockTimestamps.set(lockKey, Date.now());
    
    log(`üîí PublicationLock: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è ${lockKey}`, 'publication-lock');
    return true;
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   * @param contentId ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param platform –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
   */
  async releaseLock(contentId: string, platform: string): Promise<void> {
    const lockKey = `${contentId}:${platform}`;
    
    const platformSet = this.locks.get(contentId);
    if (platformSet) {
      platformSet.delete(platform);
      if (platformSet.size === 0) {
        this.locks.delete(contentId);
      }
    }
    
    this.lockTimestamps.delete(lockKey);
    log(`üîì PublicationLock: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –¥–ª—è ${lockKey}`, 'publication-lock');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
   * @param contentId ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param platform –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
   * @returns true –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
   */
  isLocked(contentId: string, platform: string): boolean {
    const platformSet = this.locks.get(contentId);
    return platformSet ? platformSet.has(platform) : false;
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param contentId ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async releaseAllLocks(contentId: string): Promise<void> {
    const platformSet = this.locks.get(contentId);
    if (platformSet) {
      for (const platform of Array.from(platformSet)) {
        const lockKey = `${contentId}:${platform}`;
        this.lockTimestamps.delete(lockKey);
      }
      this.locks.delete(contentId);
      log(`üîì PublicationLock: –í—Å–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${contentId}`, 'publication-lock');
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞–º—è—Ç–∏
   */
  private initCleanupSchedule(): void {
    if (this.cleanupIntervalId) {
      clearInterval(this.cleanupIntervalId);
    }
    
    this.cleanupIntervalId = setInterval(() => {
      this.cleanupExpiredLocks();
      this.enforceMemoryLimits();
    }, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
   */
  private enforceMemoryLimits(): void {
    if (this.locks.size > this.maxLocksSize) {
      // –£–¥–∞–ª—è–µ–º 25% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
      const entries = Array.from(this.lockTimestamps.entries())
        .sort(([, a], [, b]) => a - b) // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        .slice(0, Math.floor(this.lockTimestamps.size / 4));

      for (const [lockKey] of entries) {
        const [contentId, platform] = lockKey.split(':');
        this.releaseLock(contentId, platform);
      }
      
      log(`üö® MEMORY: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–æ ${entries.length} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–ª–∏–º–∏—Ç: ${this.maxLocksSize})`, 'publication-lock');
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
   */
  cleanupExpiredLocks(): void {
    const now = Date.now();
    const expiredLocks: string[] = [];

    for (const [lockKey, timestamp] of Array.from(this.lockTimestamps.entries())) {
      if (now - timestamp > this.lockTimeout) {
        expiredLocks.push(lockKey);
      }
    }

    for (const lockKey of expiredLocks) {
      const [contentId, platform] = lockKey.split(':');
      this.releaseLock(contentId, platform);
    }

    if (expiredLocks.length > 0) {
      log(`üßπ PublicationLock: –û—á–∏—â–µ–Ω–æ ${expiredLocks.length} –∏—Å—Ç–µ–∫—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫`, 'publication-lock');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
   */
  getStats(): { totalLocks: number; contentCount: number } {
    let totalLocks = 0;
    for (const platformSet of Array.from(this.locks.values())) {
      totalLocks += platformSet.size;
    }
    
    return {
      totalLocks,
      contentCount: this.locks.size
    };
  }

  /**
   * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   */
  shutdown(): void {
    if (this.cleanupIntervalId) {
      clearInterval(this.cleanupIntervalId);
      this.cleanupIntervalId = null;
    }
    
    this.locks.clear();
    this.lockTimestamps.clear();
    log('üî¥ PublicationLockManager: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', 'publication-lock');
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
export const publicationLockManager = new PublicationLockManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞–º—è—Ç–∏
publicationLockManager['initCleanupSchedule']();

// Graceful shutdown –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGTERM', () => publicationLockManager.shutdown());
process.on('SIGINT', () => publicationLockManager.shutdown());