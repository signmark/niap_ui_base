/**
 * Instagram Stories API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ Instagram Graph API
 */

interface InstagramStoryElement {
  type: 'poll' | 'quiz' | 'slider' | 'sticker';
  position: {
    x: number; // 0-1
    y: number; // 0-1
  };
  data: any;
}

interface InstagramPoll {
  question: string;
  options: [string, string]; // Instagram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
}

interface InstagramQuiz {
  question: string;
  options: string[]; // –î–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  correct_option: number;
}

interface InstagramSlider {
  question: string;
  emoji: string; // –û–¥–∏–Ω —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞—à–∏ Stories —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Instagram API
 */
export function convertToInstagramStoryElements(storyData: any): InstagramStoryElement[] {
  const elements: InstagramStoryElement[] = [];
  
  if (!storyData?.slides?.[0]?.elements) {
    return elements;
  }

  storyData.slides[0].elements.forEach((element: any) => {
    try {
      const position = {
        x: element.position.x / 270, // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-1
        y: element.position.y / 480
      };

      switch (element.type) {
        case 'poll':
          const pollData = JSON.parse(element.content);
          if (pollData.options.length >= 2) {
            elements.push({
              type: 'poll',
              position,
              data: {
                question: pollData.question,
                options: [pollData.options[0], pollData.options[1]] // Instagram: —Ç–æ–ª—å–∫–æ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞
              }
            });
          }
          break;

        case 'quiz':
          const quizData = JSON.parse(element.content);
          elements.push({
            type: 'quiz',
            position,
            data: {
              question: quizData.question,
              options: quizData.options.slice(0, 4), // Instagram: –¥–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
              correct_option: quizData.correctAnswer
            }
          });
          break;

        case 'slider':
          const sliderData = JSON.parse(element.content);
          elements.push({
            type: 'slider',
            position,
            data: {
              question: sliderData.question,
              emoji: 'üî•' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
            }
          });
          break;

        case 'sticker':
          const stickerData = JSON.parse(element.content);
          elements.push({
            type: 'sticker',
            position,
            data: {
              sticker_id: mapStickerTypeToInstagramId(stickerData.type)
            }
          });
          break;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ Stories:', error);
    }
  });

  return elements;
}

/**
 * –ü—É–±–ª–∏–∫—É–µ—Ç Stories –≤ Instagram —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
 */
export async function publishInstagramStory(
  accessToken: string,
  instagramAccountId: string,
  imageUrl: string,
  interactiveElements: InstagramStoryElement[]
) {
  const url = `https://graph.facebook.com/v18.0/${instagramAccountId}/media`;
  
  const mediaData: any = {
    image_url: imageUrl,
    media_type: 'STORIES',
    access_token: accessToken
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  interactiveElements.forEach((element, index) => {
    switch (element.type) {
      case 'poll':
        mediaData[`interactive_stickers[${index}]`] = JSON.stringify({
          sticker_type: 'poll',
          poll: {
            question: element.data.question,
            options: element.data.options
          },
          x: element.position.x,
          y: element.position.y
        });
        break;

      case 'quiz':
        mediaData[`interactive_stickers[${index}]`] = JSON.stringify({
          sticker_type: 'quiz',
          quiz: {
            question: element.data.question,
            options: element.data.options,
            correct_option: element.data.correct_option
          },
          x: element.position.x,
          y: element.position.y
        });
        break;

      case 'slider':
        mediaData[`interactive_stickers[${index}]`] = JSON.stringify({
          sticker_type: 'slider',
          slider: {
            question: element.data.question,
            emoji: element.data.emoji
          },
          x: element.position.x,
          y: element.position.y
        });
        break;
    }
  });

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams(mediaData)
    });

    const result = await response.json();
    
    if (result.id) {
      // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é Stories
      const publishUrl = `https://graph.facebook.com/v18.0/${instagramAccountId}/media_publish`;
      const publishResponse = await fetch(publishUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          creation_id: result.id,
          access_token: accessToken
        })
      });

      return await publishResponse.json();
    }

    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Instagram Stories:', error);
    throw error;
  }
}

function mapStickerTypeToInstagramId(type: string): string {
  const mapping: Record<string, string> = {
    'heart': '369239263222822',
    'fire': '369239899889425',
    'star': '369239976556084',
    'thumbs_up': '369240103222738',
    'clap': '369240153222733'
  };
  
  return mapping[type] || mapping['heart'];
}

/**
 * –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∫–∞—Ä—Ç–∏–Ω–∫–∞ + –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
 */
export async function publishHybridInstagramStory(
  accessToken: string,
  instagramAccountId: string,
  storyData: any
) {
  // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ–Ω + —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
  const baseImageResponse = await fetch('/api/stories/generate-base', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ storyData })
  });
  
  const { imageUrl } = await baseImageResponse.json();
  
  // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ Instagram —Ñ–æ—Ä–º–∞—Ç
  const interactiveElements = convertToInstagramStoryElements(storyData);
  
  // 3. –ü—É–±–ª–∏–∫—É–µ–º —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
  return publishInstagramStory(
    accessToken,
    instagramAccountId,
    imageUrl,
    interactiveElements
  );
}