/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–∞—Ö
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –∏–º–µ—é—Ç —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */
import { directusApiManager } from '../directus';
import { telegramAnalyticsService, vkAnalyticsService } from './new-analytics';
import logger from '../utils/logger';
import { directusCrud } from './directus-crud';
import { directusAuthManager } from './directus-auth-manager';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤
 */
export class AnalyticsInitializer {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param campaignId –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π ID –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async initializeAnalyticsForUser(userId: string, campaignId?: string): Promise<{ success: boolean, processedCount: number, errors: string[] }> {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      logger.info(`üîÑ Starting analytics initialization for user ${userId}${campaignId ? ` and campaign ${campaignId}` : ''}`, 'analytics-init');
      
      // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
      const hasUserToken = await directusApiManager.getUserToken(userId) ? true : false;
      const hasAdminToken = await directusApiManager.getAdminToken() ? true : false;
      logger.info(`üîë Token availability check - User token: ${hasUserToken ? 'YES' : 'NO'}, Admin token: ${hasAdminToken ? 'YES' : 'NO'}`, 'analytics-init');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏)
      logger.info(`üîç Fetching posts for user ${userId}${campaignId ? ` in campaign ${campaignId}` : ''}...`, 'analytics-init');
      const publishedPosts = await this.getAllPublishedPosts(userId, campaignId);
      const errors: string[] = [];
      
      // –ò–ó–ú–ï–ù–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      if (publishedPosts.length === 0) {
        logger.warn(`‚ö†Ô∏è No published posts found for user ${userId}${campaignId ? ` in campaign ${campaignId}` : ''}`, 'analytics-init');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(`üìä Diagnostic info: userId=${userId}, campaignId=${campaignId || 'none'}, tokensAvailable=${hasUserToken ? 'user' : ''}${hasUserToken && hasAdminToken ? '+' : ''}${hasAdminToken ? 'admin' : ''}${!hasUserToken && !hasAdminToken ? 'NONE!' : ''}`, 'analytics-init');
      } else {
        logger.info(`‚úÖ Found ${publishedPosts.length} published posts for initialization`, 'analytics-init');
        // –õ–æ–≥–∏—Ä—É–µ–º ID –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const postIds = publishedPosts.map(post => post.id).join(', ');
        logger.info(`üìÑ Post IDs for initialization: ${postIds}`, 'analytics-init');
      }
      
      let processedCount = 0;
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      for (const post of publishedPosts) {
        try {
          const postId = post.id;
          logger.log(`Processing post ${postId}`, 'analytics-init');
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
          const metadata = post.metadata || {};
          
          // –ï—Å–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          if (metadata.analytics) {
            logger.log(`Post ${postId} already has analytics data, skipping`, 'analytics-init');
            processedCount++;
            continue;
          }
          
          // TODO: –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏, –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
          const analytics = {
            telegram: {
              views: 0,
              likes: 0,
              comments: 0,
              shares: 0,
              engagementRate: 0,
              lastUpdated: new Date().toISOString()
            },
            vk: {
              views: 0,
              likes: 0,
              comments: 0,
              shares: 0,
              engagementRate: 0,
              lastUpdated: new Date().toISOString()
            }
          };
          
          if (analytics) {
            logger.log(`Analytics initialized for post ${postId}`, 'analytics-init');
            processedCount++;
          } else {
            const errorMessage = `Failed to initialize analytics for post ${postId}`;
            logger.error(errorMessage, null, 'analytics-init');
            errors.push(errorMessage);
          }
        } catch (postError) {
          const errorMessage = `Error processing post ${post.id}: ${postError instanceof Error ? postError.message : 'Unknown error'}`;
          logger.error(errorMessage, postError, 'analytics-init');
          errors.push(errorMessage);
        }
      }
      
      logger.log(`Analytics initialization completed for user ${userId}${campaignId ? ` and campaign ${campaignId}` : ''}. Processed ${processedCount} posts with ${errors.length} errors.`, 'analytics-init');
      
      return {
        success: errors.length === 0,
        processedCount,
        errors
      };
    } catch (error) {
      const errorMessage = `Error initializing analytics for user ${userId}${campaignId ? ` and campaign ${campaignId}` : ''}: ${error instanceof Error ? error.message : 'Unknown error'}`;
      logger.error(errorMessage, error, 'analytics-init');
      return {
        success: false,
        processedCount: 0,
        errors: [errorMessage]
      };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param campaignId –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π ID –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @returns –°–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
   */
  private async getAllPublishedPosts(userId: string, campaignId?: string): Promise<any[]> {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º directusApiManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å analytics-scheduler.ts)
      let token = await directusApiManager.getUserToken(userId);
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω
      if (!token) {
        logger.info(`No valid token for user ${userId}, trying to get admin token`, 'analytics-init');
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∫—ç—à–∞
        token = await directusApiManager.getAdminToken();
        
        // –ï—Å–ª–∏ –∏ —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (!token) {
          logger.info(`No admin token in cache, authenticating admin`, 'analytics-init');
          
          const email = process.env.DIRECTUS_ADMIN_EMAIL || 'lbrspb@gmail.com';
          const password = process.env.DIRECTUS_ADMIN_PASSWORD || 'QtpZ3dh7';
          
          try {
            // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ directusCrud, –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–æ–µ–∫—Ç–∞
            const authResult = await directusCrud.login(email, password);
            token = authResult.access_token;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—ç—à–µ
            const adminUserId = process.env.DIRECTUS_ADMIN_USER_ID || '53921f16-f51d-4591-80b9-8caa4fde4d13';
            directusApiManager.cacheAuthToken(adminUserId, token, 3600); // 1 —á–∞—Å
            
            // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ AuthManager –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            directusAuthManager.addAdminSession({
              id: adminUserId,
              token: token,
              email: email
            });
            
            logger.info(`Admin authentication successful for analytics`, 'analytics-init');
          } catch (authError) {
            logger.error(`Failed to authenticate admin for analytics: ${authError}`, 'analytics-init');
            return [];
          }
        }
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å social_platforms
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞
      let filterObj: any = {
        _and: [
          { user_id: { _eq: userId } }
          // –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ social_platforms, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã
        ]
      };
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –∫–∞–º–ø–∞–Ω–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π _and –º–∞—Å—Å–∏–≤
      if (campaignId) {
        filterObj._and.push({ campaign_id: { _eq: campaignId } });
      }
      
      logger.log(`Filter object for analytics posts query: ${JSON.stringify(filterObj)}`, 'analytics-init');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const filter = filterObj;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
      const fields = ['id', 'title', 'content', 'social_platforms', 'metadata', 'campaign_id', 'user_id'];
      
      logger.log(`Requesting published posts for user ${userId}${campaignId ? ` and campaign ${campaignId}` : ''}`, 'analytics-init');
      
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏–º–µ—é—â–∏–º—Å—è —Ç–æ–∫–µ–Ω–æ–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–º)
      let response = await directusApiManager.makeAuthenticatedRequest({
        method: 'GET',
        path: `/items/campaign_content?filter=${JSON.stringify(filter)}&fields=${fields.join(',')}`,
        token
      });
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ 403 (Forbidden) –∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
      // –ø–æ–ø—Ä–æ–±—É–µ–º —Å –∞–¥–º–∏–Ω—Å–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º
      if (response?.status === 403 && token !== await directusApiManager.getAdminToken()) {
        logger.warn(`Got 403 Forbidden with user token, trying with admin token`, 'analytics-init');
        const adminToken = await directusApiManager.getAdminToken();
        
        if (adminToken) {
          response = await directusApiManager.makeAuthenticatedRequest({
            method: 'GET',
            path: `/items/campaign_content?filter=${JSON.stringify(filter)}&fields=${fields.join(',')}`,
            token: adminToken
          });
          logger.info(`Retry with admin token for analytics data completed with status ${response?.status || 'unknown'}`, 'analytics-init');
        } else {
          logger.error(`Failed to get admin token for retry after 403 error`, 'analytics-init');
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      if (!response || !response.data) {
        logger.warn(`No response or data field in response for posts query`, 'analytics-init');
        return [];
      }
      
      const posts = response.data.data || [];
      
      if (!Array.isArray(posts)) {
        logger.warn(`Posts data is not an array`, 'analytics-init');
        return [];
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–º—è–≥—á–∞–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      // –í—ã–≤–µ–¥–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (posts.length > 0) {
        for (let i = 0; i < Math.min(3, posts.length); i++) {
          logger.log(`Sample post ${i+1}: ID=${posts[i].id}, social_platforms=${JSON.stringify(posts[i].social_platforms)}`, 'analytics-init');
        }
      } else {
        logger.warn(`No posts found for user ${userId}${campaignId ? ` and campaign ${campaignId}` : ''}`, 'analytics-init');
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º –í–°–ï –ø–æ—Å—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ social_platforms
      // –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è URL, —Ç.–∫. –ø–æ—Å—Ç—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      const publishedPosts = posts.filter(post => {
        const socialPlatforms = post.social_platforms || {};
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ –ø—É—Å—Ç—ã–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
        const hasAnySocialPlatforms = Object.keys(socialPlatforms).length > 0;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ—Å—Ç
        if (hasAnySocialPlatforms) {
          // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          if (posts.indexOf(post) < 3) {
            const platforms = Object.keys(socialPlatforms).join(', ');
            logger.info(`‚úÖ Post ${post.id} has social_platforms data for: ${platforms}`, 'analytics-init');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            Object.entries(socialPlatforms).forEach(([platform, platformData]: [string, any]) => {
              const hasUrl = platformData && 
                           typeof platformData === 'object' && 
                           platformData.postUrl;
              
              const status = platformData && typeof platformData === 'object' ? platformData.status : 'unknown';
              
              logger.info(`  - Platform ${platform}: status=${status}, has URL=${hasUrl ? 'YES' : 'NO'}`, 'analytics-init');
            });
          }
          
          return true; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –í–°–ï –ø–æ—Å—Ç—ã —Å social_platforms
        }
        
        return false;
      });
      
      logger.log(`Found ${publishedPosts.length} published posts out of ${posts.length} total posts`, 'analytics-init');
      return publishedPosts;
    } catch (error) {
      logger.error(`Error getting published posts for user ${userId}${campaignId ? ` and campaign ${campaignId}` : ''}: ${error}`, error, 'analytics-init');
      return [];
    }
  }
}

export const analyticsInitializer = new AnalyticsInitializer();