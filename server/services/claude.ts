import axios from 'axios';
import * as logger from '../utils/logger';
import { apiKeyService } from './api-keys';

export interface ClaudeRequest {
  model: string;
  max_tokens: number;
  temperature?: number;
  messages: {
    role: string;
    content: string;
  }[];
}

export interface ClaudeResponse {
  id: string;
  type: string;
  role: string;
  content: {
    type: string;
    text: string;
  }[];
  model: string;
  stop_reason: string;
  stop_sequence: string | null;
  usage: {
    input_tokens: number;
    output_tokens: number;
  };
}

export interface ClaudeImproveTextParams {
  text: string;
  prompt: string;
  model?: string;
}

interface SocialContentParams {
  platform?: string;
  tone?: string;
  maxTokens?: number;
  temperature?: number;
  model?: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API
 */
export class ClaudeService {
  private apiKey: string | null = null;
  private apiUrl = 'https://api.anthropic.com/v1/messages';
  private defaultModel = 'claude-3-7-sonnet-20250219'; // the newest Anthropic model is "claude-3-7-sonnet-20250219" which was released February 24, 2025
  private isInitialized = false;

  constructor(apiKey?: string) {
    if (apiKey) {
      this.apiKey = apiKey;
      this.isInitialized = true;
    }
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å Claude —Å –∫–ª—é—á–æ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ API –∫–ª—é—á–µ–π
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param token –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns true, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ false
   */
  async initialize(userId: string, token?: string): Promise<boolean> {
    try {
      if (this.isInitialized && this.apiKey) {
        logger.log(`Claude service already initialized`, 'claude');
        return true;
      }
      
      logger.log(`Initializing Claude service for user ${userId}`, 'claude');
      
      // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π
      this.apiKey = await apiKeyService.getApiKey(userId, 'claude', token);
      
      if (!this.apiKey) {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        this.apiKey = process.env.ANTHROPIC_API_KEY || null;
        if (this.apiKey) {
          logger.log(`üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º: ${this.apiKey.substring(0, 15)}...`, 'claude');
        } else {
          logger.error(`‚ùå API –∫–ª—é—á Claude –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. ANTHROPIC_API_KEY = ${process.env.ANTHROPIC_API_KEY}`, 'claude');
          logger.error(`Failed to get Claude API key for user ${userId}`, 'claude');
          return false;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
      const isValid = await this.testApiKey();
      if (!isValid) {
        logger.error(`Claude API key for user ${userId} is invalid`, 'claude');
        logger.error(`–ö–ª—é—á Claude API –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω –¥–æ—Å—Ç—É–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Anthropic.`, 'claude');
        this.apiKey = null;
        return false;
      }
      
      this.isInitialized = true;
      logger.log(`Claude service successfully initialized for user ${userId}`, 'claude');
      return true;
    } catch (error) {
      logger.error('Error initializing Claude service:', error, 'claude');
      this.apiKey = null;
      this.isInitialized = false;
      return false;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å —Å API –∫–ª—é—á–æ–º
   */
  hasApiKey(): boolean {
    return this.isInitialized && !!this.apiKey;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
   */
  async testApiKey(): Promise<boolean> {
    try {
      if (!this.apiKey) {
        logger.error('Cannot test API key: No API key provided', 'claude');
        return false;
      }
      
      // –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const maskedKey = this.apiKey.substring(0, 4) + '...' + this.apiKey.substring(this.apiKey.length - 4);
      logger.log(`Testing Claude API key starting with: ${maskedKey}`, 'claude');
      
      // –ù–µ–±–æ–ª—å—à–æ–π prompt –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
      const testModel = 'claude-3-haiku-20240307'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é –º–∞–ª–µ–Ω—å–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      logger.log(`Using model ${testModel} for API key test`, 'claude');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
      logger.log(`API URL: ${this.apiUrl}`, 'claude');
      logger.log(`API Key format verification: ${this.apiKey?.startsWith('sk-ant-')}`, 'claude');
      
      const result = await this.makeRequest({
        model: testModel,
        max_tokens: 10,
        messages: [
          {
            role: 'user',
            content: 'Say "API key is valid" if you can read this message.'
          }
        ]
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      const hasValidResponse = result && 
        result.content && 
        result.content.length > 0 && 
        result.content[0].text.includes('valid');
      
      logger.log(`Claude API key test result: ${hasValidResponse ? 'Valid' : 'Invalid'}, response content: ${JSON.stringify(result?.content)}`, 'claude');
      return hasValidResponse;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        const axiosError = error;
        logger.error(`Claude API key test failed with status: ${axiosError.response?.status}`, 'claude');
        logger.error(`Error details: ${JSON.stringify(axiosError.response?.data)}`, 'claude');
        
        if (axiosError.response?.status === 401) {
          logger.error('Claude API key is invalid or expired (401 Unauthorized)', 'claude');
          logger.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–ª—é—á Claude API. –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Anthropic –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.', 'claude');
        } else if (axiosError.response?.status === 400) {
          logger.error('Claude API request is malformed (400 Bad Request)', 'claude');
        } else if (axiosError.response?.status === 429) {
          logger.error('Claude API rate limit exceeded (429 Too Many Requests)', 'claude');
        }
      } else {
        logger.error('Error testing Claude API key:', error, 'claude');
      }
      return false;
    }
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Claude AI
   */
  async improveText({ text, prompt, model }: ClaudeImproveTextParams): Promise<string> {
    logger.log('Improving text with Claude AI...', 'claude');
    
    if (!this.apiKey) {
      throw new Error('Claude API key is not configured');
    }
    
    const requestModel = model || this.defaultModel;
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç HTML-—Ç–µ–≥–∏
      const containsHtml = /<[^>]+>/.test(text);
      
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      let contentPrompt = '';
      if (containsHtml) {
        contentPrompt = `${prompt}\n\n
–í–∞–∂–Ω–æ: —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. 
–°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ HTML-—Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <p>, <strong>, <em>, <ul>, <li> –∏ –¥—Ä.) –≤ —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ.
–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ HTML-—Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–±–∑–∞—Ü–µ–≤ –∏ —Å–ø–∏—Å–∫–æ–≤.

–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å HTML:\n"""${text}"""\n\n–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):`;
      } else {
        // –û–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ HTML
        contentPrompt = `${prompt}\n\n–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:\n"""${text}"""\n\n–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:`;
      }
      
      const result = await this.makeRequest({
        model: requestModel,
        max_tokens: 4000,
        temperature: 0.7,
        messages: [
          {
            role: 'user',
            content: contentPrompt
          }
        ]
      });
      
      if (!result || !result.content || result.content.length === 0) {
        throw new Error('Claude API returned empty response');
      }
      
      let improvedText = result.content[0].text.trim();
      
      // –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç—Ä–æ–π–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö (```)
      improvedText = improvedText.replace(/```[\s\S]*?```/g, '');
      
      // –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∞–ª HTML, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç, 
      // –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–∫–ª—é—á–∏—Ç—å –∞–±–∑–∞—Ü—ã –≤ —Ç–µ–≥–∏ <p>
      if (containsHtml && !/<[^>]+>/.test(improvedText)) {
        logger.log('HTML tags were not preserved, attempting to add paragraph tags', 'claude');
        improvedText = improvedText
          .split('\n\n')
          .map(para => para.trim())
          .filter(para => para.length > 0)
          .map(para => `<p>${para}</p>`)
          .join('\n');
      }
      
      logger.log('Text successfully improved with Claude AI', 'claude');
      return improvedText;
    } catch (error) {
      logger.error('Error improving text with Claude:', error, 'claude');
      throw new Error('Failed to improve text with Claude: ' + (error instanceof Error ? error.message : String(error)));
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
   */
  async generateContent(prompt: string, model?: string): Promise<string> {
    logger.log('Generating content with Claude AI...', 'claude');
    
    if (!this.apiKey) {
      throw new Error('Claude API key is not configured');
    }
    
    const requestModel = model || this.defaultModel;
    
    try {
      const result = await this.makeRequest({
        model: requestModel,
        max_tokens: 4000,
        temperature: 0.7,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      });
      
      if (!result || !result.content || result.content.length === 0) {
        throw new Error('Claude API returned empty response');
      }
      
      let generatedContent = result.content[0].text.trim();
      
      // –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç—Ä–æ–π–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö (```)
      generatedContent = generatedContent.replace(/```[\s\S]*?```/g, '');
      
      logger.log('Content successfully generated with Claude AI', 'claude');
      return generatedContent;
    } catch (error) {
      logger.error('Error generating content with Claude:', error, 'claude');
      throw new Error('Failed to generate content with Claude: ' + (error instanceof Error ? error.message : String(error)));
    }
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
   * @param keywords –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
   * @param prompt –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏/–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  async generateSocialContent(
    keywords: string[],
    prompt: string,
    params: SocialContentParams = {}
  ): Promise<string> {
    logger.log(`Generating social content with Claude AI for platform: ${params.platform || 'general'}`, 'claude');
    
    if (!this.apiKey) {
      throw new Error('Claude API key is not configured');
    }
    
    const { 
      platform = 'general',
      tone = 'informative',
      maxTokens = 4000,
      temperature = 0.7,
      model = this.defaultModel
    } = params;
    
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      const socialPrompt = this.createSocialPrompt(keywords, prompt, platform, tone);
      
      const result = await this.makeRequest({
        model,
        max_tokens: maxTokens,
        temperature,
        messages: [
          {
            role: 'user',
            content: socialPrompt
          }
        ]
      });
      
      if (!result || !result.content || result.content.length === 0) {
        throw new Error('Claude API returned empty response');
      }
      
      let generatedContent = result.content[0].text.trim();
      
      // –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç—Ä–æ–π–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö (```)
      generatedContent = generatedContent.replace(/```[\s\S]*?```/g, '');
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      const formattedContent = this.formatContentForPlatform(generatedContent, platform);
      
      logger.log('Social content successfully generated with Claude AI', 'claude');
      return formattedContent;
    } catch (error) {
      logger.error('Error generating social content with Claude:', error, 'claude');
      throw new Error('Failed to generate social content with Claude: ' + (error instanceof Error ? error.message : String(error)));
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
   */
  private createSocialPrompt(keywords: string[], userPrompt: string, platform: string, tone: string): string {
    const keywordsText = keywords.join(", ");
    
    // –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
    let prompt = `–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π SMM-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è ${platform === 'general' ? '—Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π' : platform}.

–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: ${keywordsText}.

–¢–æ–Ω –∏ —Å—Ç–∏–ª—å: ${tone}.

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userPrompt}

`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    switch(platform) {
      case 'telegram':
        prompt += `
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è Telegram:
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
- –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ, —á–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Ü—Å–µ—Ç–µ–π (–¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤)
- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: *–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, __–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__, ~–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~
- –°–æ–∑–¥–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ`;
        break;
      case 'instagram':
        prompt += `
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è Instagram:
- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏
- –†–∞–∑–±–∏–≤–∞–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
- –î–æ–±–∞–≤—å —Ö—ç—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞ (–Ω–µ –±–æ–ª–µ–µ 10)
- –í –ø–µ—Ä–≤—ã—Ö 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—É—Ç—å –ø–æ—Å—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ`;
        break;
      case 'facebook':
        prompt += `
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è Facebook:
- –ë–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç, —á–µ–º –¥–ª—è Instagram
- –î–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (–ø–æ–¥–µ–ª–∏—Ç—å—Å—è, –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å)
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ
- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —É–¥–æ–±–Ω—ã–º –¥–ª—è —á—Ç–µ–Ω–∏—è —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤`;
        break;
      case 'vk':
        prompt += `
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:
- –ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –Ω–æ –≥—Ä–∞–º–æ—Ç–Ω—ã–π —Å—Ç–∏–ª—å
- –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
- –î–æ–±–∞–≤—å —Ö—ç—à—Ç–µ–≥–∏ (–Ω–µ –±–æ–ª–µ–µ 5-7)
- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º`;
        break;
      default:
        prompt += `
–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–µ–≥–∫–∏–º –¥–ª—è —á—Ç–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–∏–≤–ª–µ–∫–∞—é—â–∏–π –≤–Ω–∏–º–∞–Ω–∏–µ
- –†–∞–∑–±–∏–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∞–±–∑–∞—Ü—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –¥–ª—è —Å—Ç–∏–ª—è
- –î–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞`;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    prompt += `

–í–ê–ñ–ù–û:
1. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–µ—Ä—ã, –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
2. –°–æ–∑–¥–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –±–µ–∑ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π
3. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
4. –ù–µ –≤–∫–ª—é—á–∞–π –≤ –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã: "–í–æ—Ç –ø–æ—Å—Ç –¥–ª—è...", "–ü–æ—Å—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π", "–•—ç—à—Ç–µ–≥–∏:" –∏ —Ç.–ø.
5. –ü–∏—à–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:`;

    return prompt;
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
   */
  private formatContentForPlatform(content: string, platform: string): string {
    // –û–±—â–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    let formattedContent = content
      .replace(/^["'](.+)["']$/gm, '$1') // –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
      .replace(/^(–ø–æ—Å—Ç –¥–ª—è|–≤–æ—Ç –ø–æ—Å—Ç –¥–ª—è|–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è|–ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è|—Ç–µ–∫—Å—Ç –¥–ª—è)\s+[\w\s]+:\s*/i, '') // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–∞–º–±—É–ª—É
      .trim();
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    switch(platform) {
      case 'telegram':
        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ Telegram-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        formattedContent = formattedContent
          .replace(/^-\s+(.+)$/gm, '‚Ä¢ $1') // –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª —Ç–æ—á–∫–∏
          .replace(/^(\d+)[\.\)]\s+(.+)$/gm, '$1. $2'); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        break;
      case 'instagram':
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ Instagram
        formattedContent = formattedContent
          .replace(/\n+/g, '\n\n')
          .replace(/(\#[\w–∞-—è–ê-–Ø]+)([^\s])/g, '$1 $2'); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ö—ç—à—Ç–µ–≥–∞–º–∏
        break;
      case 'vk':
        // –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formattedContent = formattedContent;
        break;
      case 'facebook':
        // Facebook –∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formattedContent = formattedContent;
        break;
      default:
        // –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        formattedContent = formattedContent;
    }
    
    return formattedContent;
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Claude API
   */
  private async makeRequest(requestData: ClaudeRequest): Promise<ClaudeResponse> {
    const maxRetries = 3;
    const baseDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        if (!this.apiKey) {
          throw new Error('Claude API key is not configured');
        }
        
        logger.debug(`Making Claude API request to ${this.apiUrl} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries})`, 'claude');
        logger.debug(`Using model: ${requestData.model}`, 'claude');
        
        // –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–±–µ–∑ API –∫–ª—é—á–∞)
        logger.debug('Request headers: Content-Type: application/json, anthropic-version: 2023-06-01', 'claude');
        
        // –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        const contentPreview = requestData.messages[0].content.substring(0, 20) + '...';
        logger.debug(`Request content preview: ${contentPreview}`, 'claude');
        
        const response = await axios.post<ClaudeResponse>(
          this.apiUrl,
          requestData,
          {
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${this.apiKey}`,
              'anthropic-version': '2023-06-01',
              'x-api-key': this.apiKey // –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–ª—é—á–∞–º–∏
            }
          }
        );
        
        if (response.status !== 200) {
          throw new Error(`Claude API responded with status code ${response.status}`);
        }
        
        logger.debug(`Claude API response received with status: ${response.status}`, 'claude');
        if (attempt > 1) {
          logger.log(`Claude API —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempt}`, 'claude');
        }
        
        return response.data;
        
      } catch (error) {
        if (axios.isAxiosError(error) && error.response) {
          const status = error.response.status;
          logger.error(`Claude API error: ${status} - ${JSON.stringify(error.response.data)}`, 'claude');
          
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 529 (–ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞) –∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏
          if (status === 529 && attempt < maxRetries) {
            const delay = baseDelay * Math.pow(2, attempt - 1); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            logger.log(`Claude API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (529), –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries} —á–µ—Ä–µ–∑ ${delay}ms`, 'claude');
            await new Promise(resolve => setTimeout(resolve, delay));
            continue;
          }
          
          // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞–º
          if (status === 401) {
            logger.error('Claude API rejected request: Invalid API key or permissions (401)', 'claude');
          } else if (status === 400) {
            logger.error(`Claude API rejected request: Bad request (400) - ${JSON.stringify(error.response.data)}`, 'claude');
          } else if (status === 429) {
            logger.error('Claude API rejected request: Rate limit exceeded (429)', 'claude');
          } else if (status >= 500) {
            logger.error(`Claude API server error (${status}). Please try again later.`, 'claude');
          }
          
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          if (attempt === maxRetries) {
            throw error;
          }
        } else {
          logger.error('Error making Claude API request:', error, 'claude');
          
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–µ—Ç—å—é
          if (attempt === maxRetries) {
            throw error;
          }
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
          const delay = baseDelay * Math.pow(2, attempt - 1);
          logger.log(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Claude API, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries} —á–µ—Ä–µ–∑ ${delay}ms`, 'claude');
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }
    
    throw new Error('Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
  }
}