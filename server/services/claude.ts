import axios from 'axios';
import { ApiKeyService, ApiServiceName } from './api-keys';
import { formatAuthToken } from '../utils/auth';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude AI API
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Claude AI
 */
export class ClaudeService {
  private apiKeyService: ApiKeyService;
  private baseUrl = 'https://api.anthropic.com/v1/messages';
  private defaultModel = 'claude-3-sonnet-20240229';

  constructor(apiKeyService: ApiKeyService) {
    this.apiKeyService = apiKeyService;
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Claude AI
   * @param text –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
   * @param prompt –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞
   * @param authToken –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  async improveText(text: string, prompt: string, userId: string, authToken?: string): Promise<string> {
    const apiKey = await this.getApiKey(userId, authToken);
    if (!apiKey) {
      throw new Error('API –∫–ª—é—á Claude AI –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö API.');
    }

    const systemPrompt = `
      –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.
      –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —É–ª—É—á—à–∏—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
      
      –ü—Ä–∞–≤–∏–ª–∞:
      1. –°–æ—Ö—Ä–∞–Ω—è–π HTML —Ä–∞–∑–º–µ—Ç–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ. –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
      2. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö.
      3. –°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç–∏–ª—å –∏ —Ç–æ–Ω –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ.
      4. –ê–¥–∞–ø—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞.
      5. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    `;

    const messages = [
      {
        role: 'system',
        content: systemPrompt
      },
      {
        role: 'user',
        content: `–í–æ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:
        
        ${text}
        
        –í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
        
        ${prompt}
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ª—É—á—à–∏ —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.`
      }
    ];

    try {
      const response = await axios.post(
        this.baseUrl,
        {
          model: this.defaultModel,
          max_tokens: 4096,
          messages,
          temperature: 0.7
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'anthropic-version': '2023-06-01'
          }
        }
      );

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
      if (response.data && response.data.content && response.data.content.length > 0) {
        const improvedText = response.data.content[0].text;
        return improvedText || text;
      }

      return text;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Claude AI:', error);
      
      if (axios.isAxiosError(error) && error.response) {
        console.error('Claude API response error:', error.response.data);
        throw new Error(`–û—à–∏–±–∫–∞ Claude API: ${error.response.status} - ${error.response.data.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Claude AI. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Claude AI
   * @param prompt –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞
   * @param authToken –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  async generateText(prompt: string, userId: string, authToken?: string): Promise<string> {
    const apiKey = await this.getApiKey(userId, authToken);
    if (!apiKey) {
      throw new Error('API –∫–ª—é—á Claude AI –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö API.');
    }

    const systemPrompt = `
      –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.
      –°–æ–∑–¥–∞–≤–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
      
      –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
      1. –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
      2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
      3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å HTML-—Ç–µ–≥–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, –≤—ã–¥–µ–ª–µ–Ω–∏—è)
      4. –ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–ª–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è - —Å—Ä–∞–∑—É –ø–æ –¥–µ–ª—É
      
      –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π:
      - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–≥–æ–º <h2>
      - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      - –°–ø–∏—Å–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
      - –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º—ã—Å–ª–µ–π –ø–æ–ª—É–∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
      - –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ üì±‚ú®
    `;

    const messages = [
      {
        role: 'system',
        content: systemPrompt
      },
      {
        role: 'user',
        content: prompt
      }
    ];

    try {
      const response = await axios.post(
        this.baseUrl,
        {
          model: this.defaultModel,
          max_tokens: 4096,
          messages,
          temperature: 0.7
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'anthropic-version': '2023-06-01'
          }
        }
      );

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
      if (response.data && response.data.content && response.data.content.length > 0) {
        return response.data.content[0].text || '';
      }

      return '';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Claude AI:', error);
      
      if (axios.isAxiosError(error) && error.response) {
        console.error('Claude API response error:', error.response.data);
        throw new Error(`–û—à–∏–±–∫–∞ Claude API: ${error.response.status} - ${error.response.data.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
      
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Claude AI. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á –¥–ª—è Claude AI –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ API –∫–ª—é—á–µ–π
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param authToken –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @returns API –∫–ª—é—á –∏–ª–∏ null, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  private async getApiKey(userId: string, authToken?: string): Promise<string | null> {
    const formattedToken = authToken ? formatAuthToken(authToken) : undefined;
    return this.apiKeyService.getApiKey(userId, 'claude', formattedToken);
  }
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å API –∫–ª—é—á–µ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–µ—Ä–≤–∏—Å–µ Claude
import { apiKeyService } from './api-keys';

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ Claude
export const claudeService = new ClaudeService(apiKeyService);