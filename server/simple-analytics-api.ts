import { Express, Request, Response } from 'express';
import axios from 'axios';

export function registerSimpleAnalyticsAPI(app: Express) {
  console.log('[Simple Analytics] üöÄ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç /server-api/analytics');
  
  app.get('/server-api/analytics', async (req: Request, res: Response) => {
    console.log('[Simple Analytics] üéØ –ú–ê–†–®–†–£–¢ –°–†–ê–ë–û–¢–ê–õ! –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /server-api/analytics');
    
    try {
      const { campaignId, period = '7days' } = req.query;
      
      console.log(`[Simple Analytics] üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: campaignId=${campaignId}, period=${period}`);

      if (!campaignId) {
        return res.status(400).json({ 
          success: false, 
          error: '–ü–∞—Ä–∞–º–µ—Ç—Ä campaignId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
        });
      }

      const authHeader = req.headers.authorization;
      if (!authHeader) {
        console.log(`[Simple Analytics] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
        return res.status(401).json({ success: false, error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
      }

      const token = authHeader.replace('Bearer ', '');
      const days = period === '30days' ? 30 : 7;

      console.log(`[Simple Analytics] –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Directus –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${campaignId}, –ø–µ—Ä–∏–æ–¥: ${days} –¥–Ω–µ–π`);

      try {
        // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Directus API
        const directusUrl = 'https://directus.nplanner.ru/items/campaign_content';
        const response = await axios.get(directusUrl, {
          headers: { 
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          params: {
            'filter[campaign_id][_eq]': campaignId,
            'filter[status][_eq]': 'published',
            'filter[published_at][_gte]': `$NOW(-${days} days)`,
            'fields': ['id', 'title', 'social_platforms', 'published_at'],
            'limit': 1000
          }
        });

        console.log(`[Simple Analytics] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Directus:`, response.data.data?.length, '–∑–∞–ø–∏—Å–µ–π');

        const posts = response.data.data || [];
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        let totalPosts = 0;
        let totalViews = 0;
        let totalLikes = 0;
        let totalShares = 0;
        let totalComments = 0;
        
        const platformStats = new Map<string, any>();
        
        posts.forEach((post: any) => {
          if (post.social_platforms) {
            Object.values(post.social_platforms).forEach((platform: any) => {
              if (platform && platform.status === 'published') {
                totalPosts++;
                
                const analytics = platform.analytics || {};
                totalViews += analytics.views || 0;
                totalLikes += analytics.likes || 0;
                totalShares += analytics.shares || 0;
                totalComments += analytics.comments || 0;
                
                const platformName = platform.platform || 'unknown';
                if (!platformStats.has(platformName)) {
                  platformStats.set(platformName, {
                    name: platformName,
                    posts: 0,
                    views: 0,
                    likes: 0,
                    shares: 0,
                    comments: 0
                  });
                }
                
                const stats = platformStats.get(platformName);
                stats.posts++;
                stats.views += analytics.views || 0;
                stats.likes += analytics.likes || 0;
                stats.shares += analytics.shares || 0;
                stats.comments += analytics.comments || 0;
              }
            });
          }
        });

        const analyticsData = {
          totalPosts,
          totalViews,
          totalLikes,
          totalShares,
          totalComments,
          platforms: Array.from(platformStats.values())
        };

        console.log(`[Simple Analytics] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:`, analyticsData);
        
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.setHeader('Content-Type', 'application/json');
        return res.status(200).json(analyticsData);
        
      } catch (directusError: any) {
        console.error(`[Simple Analytics] –û—à–∏–±–∫–∞ Directus:`, directusError.message);
        res.setHeader('Content-Type', 'application/json');
        return res.status(500).json({ 
          success: false, 
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Directus',
          details: directusError.message 
        });
      }

    } catch (error: any) {
      console.error(`[Simple Analytics] –û–±—â–∞—è –æ—à–∏–±–∫–∞:`, error);
      res.setHeader('Content-Type', 'application/json');
      return res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message 
      });
    }
  });
}