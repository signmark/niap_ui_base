import 'dotenv/config';
import express, { type Request, Response, NextFunction } from "express";
import cookieParser from "cookie-parser";
import axios from 'axios';
import { createServer } from 'http';
import { WebSocketServer } from 'ws';
import { registerRoutes } from "./routes";
import { registerFalAiImageRoutes } from "./routes-fal-ai-images";
import { registerClaudeRoutes } from "./routes-claude";
import { registerDeepSeekRoutes } from "./routes-deepseek";
import { registerDeepSeekModelsRoute } from "./routes-deepseek-models";
import { registerQwenRoutes } from "./routes-qwen";
import { registerGeminiRoutes } from "./routes-gemini";
import { registerImgurRoutes } from "./routes-imgur";
import { registerBegetS3Routes } from "./routes-beget-s3";
import { registerUserApiKeysRoutes } from "./routes-user-api-keys";
import { registerAnalyticsRoutes } from "./routes/analytics";
import { setupVite, serveStatic } from "./vite";
import { log, logEnvironmentInfo } from "./utils/logger";
import { directusApiManager } from './directus';
import { registerXmlRiverRoutes } from './api/xmlriver-routes';
import { falAiUniversalService } from './services/fal-ai-universal';
import { initializeHeavyServices } from './optimize-startup';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Telegram
import testRouter from './api/test-routes';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è URL –≤ Telegram
import telegramDiagnosticsRouter from './api/test-routes-last-telegram';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
import analyticsRouter from './analytics-api';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
import { statusValidator } from './services/status-validator';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
import { getPublishScheduler } from './services/publish-scheduler';

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
process.env.DEBUG = 'express:*,vite:*';
process.env.NODE_ENV = 'development';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ directusApiManager –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ (–∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
// @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤
global['directusApiManager'] = directusApiManager;

const app = express();
const server = createServer(app);

// TEMPORARILY DISABLED: WebSocket server –¥–ª—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// This was causing conflicts with Vite HMR WebSocket
// const wss = new WebSocketServer({ server });

// // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
// wss.on('connection', (ws) => {
//   log('WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω', 'websocket');
  
//   ws.on('message', (message) => {
//     try {
//       const data = JSON.parse(message.toString());
//       log(`WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: ${data.type}`, 'websocket');
//     } catch (error) {
//       log(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`, 'websocket');
//     }
//   });
  
//   ws.on('close', () => {
//     log('WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω', 'websocket');
//   });
// });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
export function broadcastNotification(type: string, data: any) {
  const message = JSON.stringify({ type, data, timestamp: new Date().toISOString() });
  
  // TEMPORARILY DISABLED: wss.clients.forEach((client) => {
  //   if (client.readyState === client.OPEN) {
  //     client.send(message);
  //   }
  // });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º WebSocket server –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
// export { wss };

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Health check endpoint for deployment monitoring
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development',
    version: '1.0.0'
  });
});

// üî• –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –í–°–ï–• POST –ò GET –ó–ê–ü–†–û–°–û–í üî•
app.use((req, res, next) => {
  if (req.method === 'POST') {
    console.log('üî•üî•üî• POST –ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù üî•üî•üî•');
    console.log('üî• URL:', req.url);
    console.log('üî• PATH:', req.path);
    console.log('üî• BODY:', JSON.stringify(req.body, null, 2));
  }
  
  if (req.method === 'GET' && req.path.includes('youtube/channel-info')) {
    console.log('üéØüéØüéØ YOUTUBE CHANNEL INFO GET –ó–ê–ü–†–û–° üéØüéØüéØ');
    console.log('üéØ URL:', req.url);
    console.log('üéØ PATH:', req.path);
    console.log('üéØ QUERY:', JSON.stringify(req.query, null, 2));
  }
  
  next();
});

// –î–æ–±–∞–≤–ª—è–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ —è–≤–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vite
app.get('/api/status-check', (req, res) => {
  return res.json({ status: 'ok', server: 'running', time: new Date().toISOString() });
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä—è–º—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vite
import { isUserAdmin } from './routes-global-api-keys';
import { registerAuthRoutes } from './api/auth-routes';
import { registerSimpleAnalyticsAPI } from './simple-analytics-api';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ü–ï–†–ï–î –≤—Å–µ–º–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
registerSimpleAnalyticsAPI(app);

// –ö–†–ò–¢–ò–ß–ù–´–ô ENDPOINT: –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –î–û Vite middleware)
app.post("/api/analyze-source/:sourceId", async (req: any, res) => {
  const sourceId = req.params.sourceId;
  const campaignId = req.body?.campaignId;
  console.log(`[ANALYZE SOURCE] API called with sourceId: ${sourceId}, campaignId: ${campaignId}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    const authHeader = req.headers['authorization'];
    if (!authHeader) {
      console.log(`[ANALYZE SOURCE] No authorization header provided`);
      return res.status(401).json({
        success: false,
        message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
      });
    }
    
    const userToken = authHeader.replace('Bearer ', '');
    console.log(`[ANALYZE SOURCE] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω: ${userToken.substring(0, 10)}...`);
    
    if (!sourceId || !campaignId) {
      console.log(`[ANALYZE SOURCE] Missing required params: sourceId=${sourceId}, campaignId=${campaignId}`);
      return res.status(400).json({
        success: false,
        message: "–¢—Ä–µ–±—É–µ—Ç—Å—è sourceId –∏ campaignId"
      });
    }

    console.log(`[ANALYZE SOURCE] ===== –ù–û–í–´–ô ENDPOINT 2025-08-01 ===== –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${sourceId} –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${campaignId}`); 
    console.log(`[ANALYZE SOURCE] ===== –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–ò–°–¢–ï–ú–ù–´–ô –¢–û–ö–ï–ù ===== : ${process.env.DIRECTUS_TOKEN?.substring(0, 10)}...`);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ campaign_trend_topics
    const systemDirectusApi = axios.create({
      baseURL: process.env.DIRECTUS_URL || 'https://directus.roboflow.space',
      headers: {
        'Authorization': `Bearer ${process.env.DIRECTUS_TOKEN}`,
        'Content-Type': 'application/json'
      },
      timeout: 15000
    });
    
    console.log(`[ANALYZE SOURCE] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${sourceId} –≤ –∫–∞–º–ø–∞–Ω–∏–∏ ${campaignId}`);
    
    // –ó–∞–ø—Ä–æ—Å –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ campaign_trend_topics —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    const trendsResponse = await systemDirectusApi.get('/items/campaign_trend_topics', {
      params: {
        'filter[source_id][_eq]': sourceId,
        'filter[campaign_id][_eq]': campaignId,
        'fields': 'id,title,source_id,campaign_id,sentiment_analysis'
      }
    });

    const sourceTrends = trendsResponse.data?.data || [];
    console.log(`[ANALYZE SOURCE] –ù–∞–π–¥–µ–Ω–æ ${sourceTrends.length} —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${sourceId}`);

    if (sourceTrends.length === 0) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤, –≤–µ—Ä–Ω–µ–º –Ω—É–ª–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–æ –Ω–µ –æ—à–∏–±–∫—É
      console.log(`[ANALYZE SOURCE] –ù–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${sourceId}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É`);
      return res.json({
        success: true,
        data: {
          sourceId,
          campaignId,
          analyzed_trends: 0,
          source_rating: {
            total_trends: 0,
            analyzed_trends: 0,
            positive_percentage: 0,
            negative_percentage: 0,
            neutral_percentage: 0,
            overall_sentiment: 'neutral',
            analyzed_at: new Date().toISOString()
          },
          sentiment_breakdown: {
            positive: 0,
            negative: 0,
            neutral: 0
          }
        },
        message: `–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢—Ä–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`
      });
    }

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–Ω–¥–æ–≤
    let positiveCount = 0;
    let negativeCount = 0;
    let neutralCount = 0;
    let totalScore = 0;
    let scoredTrends = 0;

    console.log(`[ANALYZE SOURCE] –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è ${sourceTrends.length} —Ç—Ä–µ–Ω–¥–æ–≤`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–Ω–¥ —á–µ—Ä–µ–∑ Gemini API
    for (const trend of sourceTrends) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        if (trend.sentiment_analysis?.sentiment) {
          const sentiment = trend.sentiment_analysis.sentiment;
          if (sentiment === 'positive') positiveCount++;
          else if (sentiment === 'negative') negativeCount++;
          else neutralCount++;
          console.log(`[ANALYZE SOURCE] –¢—Ä–µ–Ω–¥ ${trend.id} —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${sentiment}`);
          continue;
        }

        // –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–æ–¥–∏–º –µ–≥–æ
        console.log(`[ANALYZE SOURCE] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥: ${trend.title.substring(0, 50)}...`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å –±–∞–ª–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π
        const sentimentResponse = await axios.post(
          'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent',
          {
            contents: [{
              parts: [{
                text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –∏ –¥–∞–π –æ—Ü–µ–Ω–∫—É:

–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${trend.title}

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "sentiment": "positive/negative/neutral",
  "score": —á–∏—Å–ª–æ_–æ—Ç_1_–¥–æ_100,
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ_–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
}

–ì–¥–µ score:
- 80-100: –æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
- 60-79: —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π  
- 40-59: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
- 20-39: —É–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π
- 1-19: –æ—á–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç`
              }]
            }]
          },
          {
            headers: {
              'Content-Type': 'application/json'
            },
            params: {
              key: process.env.GEMINI_API_KEY
            },
            timeout: 10000
          }
        );

        const responseText = sentimentResponse.data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim();
        let sentiment = 'neutral';
        let score = 50;
        let reasoning = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑';

        try {
          // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç Gemini
          const jsonMatch = responseText.match(/\{[^}]*\}/);
          if (jsonMatch) {
            const parsed = JSON.parse(jsonMatch[0]);
            sentiment = ['positive', 'negative', 'neutral'].includes(parsed.sentiment) ? parsed.sentiment : 'neutral';
            score = Math.max(1, Math.min(100, parseInt(parsed.score) || 50));
            reasoning = parsed.reasoning || reasoning;
          }
        } catch (error) {
          console.log(`[ANALYZE SOURCE] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è —Ç—Ä–µ–Ω–¥–∞ ${trend.id}`);
          // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É
          const sentimentText = responseText.toLowerCase();
          if (sentimentText.includes('positive')) {
            sentiment = 'positive';
            score = 70;
          } else if (sentimentText.includes('negative')) {
            sentiment = 'negative';
            score = 30;
          } else {
            sentiment = 'neutral';
            score = 50;
          }
        }
        
        console.log(`[ANALYZE SOURCE] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞ ${trend.id}: ${sentiment} (${score} –±–∞–ª–ª–æ–≤)`);

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (sentiment === 'positive') positiveCount++;
        else if (sentiment === 'negative') negativeCount++;
        else neutralCount++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—É
        totalScore += score;
        scoredTrends++;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const sentimentAnalysis = {
          sentiment: sentiment,
          score: score,
          reasoning: reasoning,
          analyzed_at: new Date().toISOString(),
          analyzed_by: 'source_analysis'
        };

        await systemDirectusApi.patch(`/items/campaign_trend_topics/${trend.id}`, {
          sentiment_analysis: sentimentAnalysis
        });

        console.log(`[ANALYZE SOURCE] –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ç—Ä–µ–Ω–¥–∞ ${trend.id}`);

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ Gemini
        await new Promise(resolve => setTimeout(resolve, 100));

      } catch (error) {
        console.error(`[ANALYZE SOURCE] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞ ${trend.id}:`, error);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
        neutralCount++;
        totalScore += 50; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        scoredTrends++;
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
    const averageScore = scoredTrends > 0 ? Math.round(totalScore / scoredTrends) : 50;
    const total = sourceTrends.length;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
    let overallSentiment = 'neutral';
    if (averageScore >= 70) overallSentiment = 'positive';
    else if (averageScore <= 40) overallSentiment = 'negative';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
    let emoji = 'üòê'; // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (averageScore >= 90) emoji = 'üî•'; // –æ—Ç–ª–∏—á–Ω–æ
    else if (averageScore >= 80) emoji = 'üòç'; // –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ  
    else if (averageScore >= 70) emoji = 'üòä'; // —Ö–æ—Ä–æ—à–æ
    else if (averageScore >= 60) emoji = 'üòå'; // –Ω–µ–ø–ª–æ—Ö–æ
    else if (averageScore >= 40) emoji = 'üòê'; // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
    else if (averageScore >= 25) emoji = 'üòï'; // –ø–ª–æ—Ö–æ
    else emoji = 'üòû'; // –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ

    const sourceRating = {
      total_trends: total,
      analyzed_trends: total,
      positive_percentage: Math.round((positiveCount / total) * 100),
      negative_percentage: Math.round((negativeCount / total) * 100),
      neutral_percentage: Math.round((neutralCount / total) * 100),
      overall_sentiment: overallSentiment,
      average_score: averageScore,
      emoji: emoji,
      analyzed_at: new Date().toISOString()
    };

    console.log(`[ANALYZE SOURCE] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${positiveCount} –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö, ${negativeCount} –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö, ${neutralCount} –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö`);
    console.log(`[ANALYZE SOURCE] –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${averageScore}, –≠–º–æ–¥–∑–∏: ${emoji}, –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${overallSentiment}`);

    return res.json({
      success: true,
      data: {
        sourceId,
        campaignId,
        analyzed_trends: total,
        source_rating: sourceRating,
        sentiment_breakdown: {
          positive: positiveCount,
          negative: negativeCount,
          neutral: neutralCount
        }
      },
      message: `–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${total} —Ç—Ä–µ–Ω–¥–æ–≤.`
    });

  } catch (error) {
    console.error('[ANALYZE SOURCE] –û—à–∏–±–∫–∞:', error);
    return res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞",
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});

// Source analysis endpoint is now integrated in main routes

// –°—Ç–∞—Ä—ã–π –∫–æ–¥ API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è simple-analytics-api.ts

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ API –∫–ª—é—á–µ–π —Ä–∞–Ω—å—à–µ Vite
registerAuthRoutes(app);

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π
import { registerGlobalApiKeysRoutes } from './routes-global-api-keys';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Instagram Setup Wizard
import instagramSetupRoutes from './routes/instagram-setup-wizard';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Facebook Pages router
import facebookPagesRouter from './routes/facebook-pages';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Facebook Debug router
import facebookDebugRouter from './routes/facebook-debug';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Facebook Page URL router
import facebookPageUrlRouter from './routes/facebook-page-url';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Facebook Groups Discovery router
import facebookGroupsRouter from './routes/facebook-groups-discovery';
registerGlobalApiKeysRoutes(app);
log('Global API keys routes registered early to avoid Vite middleware interception');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö API –∫–ª—é—á–µ–π —Ä–∞–Ω—å—à–µ Vite
registerUserApiKeysRoutes(app);
log('User API keys routes registered early to avoid Vite middleware interception');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Instagram Setup Wizard –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/instagram-setup', instagramSetupRoutes);
log('Instagram Setup Wizard routes registered');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Facebook Pages –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/facebook', facebookPagesRouter);
log('Facebook Pages routes registered');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Facebook Debug –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/facebook', facebookDebugRouter);
log('Facebook Debug routes registered');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Facebook Page URL –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/facebook', facebookPageUrlRouter);
log('Facebook Page URL routes registered');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Facebook Groups Discovery –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api', facebookGroupsRouter);
log('Facebook Groups Discovery routes registered');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º YouTube Auth –º–∞—Ä—à—Ä—É—Ç—ã —Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö
import youtubeAuthRouter from './routes/youtube-auth';
import youtubeSettingsRouter from './routes/campaign-youtube-settings';
app.use('/api', youtubeAuthRouter);
app.use('/api', youtubeSettingsRouter);
log('YouTube Auth and Settings routes registered early to avoid 404 errors');

// Instagram Campaign Settings –º–∞—Ä—à—Ä—É—Ç—ã –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ü–û–°–õ–ï registerRoutes
// —á—Ç–æ–±—ã –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –≤ routes.ts
log('Instagram Campaign Settings routes will be registered after main routes');

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥—É–±–ª–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç is-admin —Å —è–≤–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ Content-Type
app.get('/api/auth/is-admin', async (req, res) => {
  try {
    console.log('EARLY IS-ADMIN ROUTE CALLED');
    // –£–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω–æ content-type –∫–∞–∫ JSON
    res.setHeader('Content-Type', 'application/json');
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('Surrogate-Control', 'no-store');
    
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞', 'auth');
      return res.status(401).json({ 
        success: false, 
        isAdmin: false,
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      });
    }
    
    const token = authHeader.substring(7);
    log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: ${token.substring(0, 10)}...`, 'auth');
    
    const isAdmin = await isUserAdmin(req, token);
    log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${isAdmin}`, 'auth');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    return res.status(200).json({ 
      success: true, 
      isAdmin, 
      timestamp: Date.now(),
      source: 'early-route'
    });
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${error instanceof Error ? error.message : 'Unknown error'}`, 'auth');
    return res.status(500).json({ 
      success: false, 
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 
      timestamp: Date.now(),
      source: 'early-route' 
    });
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
app.get('/health', (req, res) => {
  return res.status(200).send('OK');
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –î–û –º–∞—Ä—à—Ä—É—Ç–∞)
app.use('/landing', express.static('smmniap_static'));

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞
app.get('/landing', (req, res) => {
  res.sendFile(process.cwd() + '/smmniap_static/index.html');
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
app.get('/server-health', (req, res) => {
  const content = `
  <!DOCTYPE html>
  <html lang="ru">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç</title>
    <style>
      body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
      .status { color: #4caf50; font-weight: bold; }
      .time { color: #2196f3; margin-top: 20px; }
      pre { text-align: left; max-width: 800px; margin: 20px auto; background: #f5f5f5; padding: 15px; border-radius: 5px; }
    </style>
  </head>
  <body>
    <h1>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: <span class="status">–†–∞–±–æ—Ç–∞–µ—Ç</span></h1>
    <div class="time">–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}</div>
    <pre>
API –º–∞—Ä—à—Ä—É—Ç—ã:
- GET /api/status-check - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
- GET /api/claude/test-api-key - –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ Claude
- POST /api/claude/improve-text - –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å Claude AI

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:
- NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}
- PORT: ${process.env.PORT || '5001 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}
    </pre>
  </body>
  </html>
  `;
  return res.status(200).type('html').send(content);
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "‚Ä¶";
      }

      log(logLine);
    }
  });

  next();
});

// Middleware –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è userId –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ req.userId
app.use((req, res, next) => {
  const userId = req.headers['x-user-id'] as string;
  if (userId) {
    (req as any).userId = userId;
  }
  next();
});

(async () => {
  try {
    console.log("=== SERVER INITIALIZATION START ===");
    log("Starting server initialization...");

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∏ –¥—Ä—É–≥–∏—Ö API
    console.log("Registering test API routes...");
    log("Registering test API routes first...");
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    app.use('/api/test', testRouter);
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å URL Telegram
    app.use('/api/telegram-diagnostics', telegramDiagnosticsRouter);
    console.log("Test API routes registered");
    log("Test API routes registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Claude AI
    console.log("Registering Claude AI routes...");
    log("Registering Claude AI routes...");
    registerClaudeRoutes(app);
    console.log("Claude AI routes registered");
    log("Claude AI routes registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è DeepSeek
    console.log("Registering DeepSeek routes...");
    log("Registering DeepSeek routes...");
    registerDeepSeekRoutes(app);
    console.log("DeepSeek routes registered");
    log("DeepSeek routes registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Qwen
    console.log("Registering Qwen routes...");
    log("Registering Qwen routes...");
    registerQwenRoutes(app);
    console.log("Qwen routes registered");
    log("Qwen routes registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Gemini
    console.log("Registering Gemini routes...");
    log("Registering Gemini routes...");
    registerGeminiRoutes(app);
    console.log("Gemini routes registered");
    log("Gemini routes registered successfully");

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã Claude
    log("Registering Claude routes...");
    registerClaudeRoutes(app);
    console.log("Claude routes registered");
    log("Claude routes registered successfully");

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º YouTube Channel Info –º–∞—Ä—à—Ä—É—Ç—ã –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
    console.log("Registering YouTube Channel routes EARLY...");
    log("Registering YouTube Channel routes EARLY...");
    const youtubeChannelRouter = (await import('./routes/youtube-channel')).default;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    console.log('üìç [YOUTUBE-ROUTER] Router imported successfully:', !!youtubeChannelRouter);
    console.log('üìç [YOUTUBE-ROUTER] Registering at /api prefix EARLY');
    
    app.use('/api', youtubeChannelRouter);
    console.log("YouTube Channel routes registered EARLY");
    log("YouTube Channel routes registered successfully EARLY");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º YouTube OAuth –º–∞—Ä—à—Ä—É—Ç—ã –ü–ï–†–ï–î –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
    console.log("Registering YouTube OAuth routes EARLY...");
    log("Registering YouTube OAuth routes EARLY...");
    const youtubeAuthRouter = (await import('./routes/youtube-auth')).default;
    app.use('/api', youtubeAuthRouter);
    console.log("YouTube OAuth routes registered EARLY");
    log("YouTube OAuth routes registered successfully EARLY");

    log("Registering main routes after YouTube routes...");
    console.log("Starting route registration...");
    await registerRoutes(app);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Instagram Campaign Settings –º–∞—Ä—à—Ä—É—Ç—ã –ü–û–°–õ–ï registerRoutes
    // —á—Ç–æ–±—ã –æ–Ω–∏ –∏–º–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –≤ routes.ts
    console.log("Registering Instagram Campaign Settings routes...");
    log("Registering Instagram Campaign Settings routes...");
    const campaignInstagramRoutes = (await import('./routes/campaign-instagram-settings')).default;
    app.use('/api', campaignInstagramRoutes);
    console.log("Instagram Campaign Settings routes registered");
    log('Instagram Campaign Settings routes registered with priority');
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Instagram OAuth –º–∞—Ä—à—Ä—É—Ç—ã
    console.log("Registering Instagram OAuth routes...");
    log("Registering Instagram OAuth routes...");
    const instagramOAuthRouter = (await import('./routes/instagram-oauth')).default;
    app.use('/api', instagramOAuthRouter);
    console.log("Instagram OAuth routes registered");
    log("Instagram OAuth routes registered successfully");

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º VK OAuth –º–∞—Ä—à—Ä—É—Ç—ã
    console.log("Registering VK OAuth routes...");
    log("Registering VK OAuth routes...");
    const vkOAuthRouter = (await import('./routes/vk-oauth')).default;
    app.use('/api', vkOAuthRouter);
    console.log("VK OAuth routes registered");
    log("VK OAuth routes registered successfully");

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º VK –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    console.log("Registering VK Campaign Settings routes...");
    log("Registering VK Campaign Settings routes...");
    const vkSettingsRouter = (await import('./routes/campaign-vk-settings')).default;
    app.use('/api', vkSettingsRouter);
    console.log("VK Campaign Settings routes registered");
    log("VK Campaign Settings routes registered successfully");

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Facebook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    console.log("Registering Facebook Campaign Settings routes...");
    log("Registering Facebook Campaign Settings routes...");
    const facebookSettingsRouter = (await import('./routes/campaign-facebook-settings')).default;
    app.use('/api', facebookSettingsRouter);
    console.log("Facebook Campaign Settings routes registered");
    log("Facebook Campaign Settings routes registered successfully");

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Facebook Debug –º–∞—Ä—à—Ä—É—Ç—ã
    console.log("Registering Facebook Debug routes...");
    log("Registering Facebook Debug routes...");
    const facebookDebugRouter = (await import('./routes/facebook-debug')).default;
    app.use('/api', facebookDebugRouter);
    console.log("Facebook Debug routes registered");
    log("Facebook Debug routes registered successfully");

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Facebook Groups Discovery –º–∞—Ä—à—Ä—É—Ç—ã
    console.log("Registering Facebook Groups Discovery routes...");
    log("Registering Facebook Groups Discovery routes...");
    const facebookGroupsRouter = (await import('./routes/facebook-groups-discovery')).default;
    app.use('/api', facebookGroupsRouter);
    console.log("Facebook Groups Discovery routes registered");
    log("Facebook Groups Discovery routes registered successfully");

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    console.log("Registering YouTube Campaign Settings routes...");
    log("Registering YouTube Campaign Settings routes...");
    const youtubeSettingsRouter = (await import('./routes/campaign-youtube-settings')).default;
    app.use('/api', youtubeSettingsRouter);
    console.log("YouTube Campaign Settings routes registered");
    log("YouTube Campaign Settings routes registered successfully");
    
    // Register stories routes with proper API fixes
    console.log("Registering Stories routes...");
    log("Registering Stories routes...");
    const storiesRoutes = (await import('./routes/stories')).default;
    app.use('/api/stories', storiesRoutes);
    console.log("Stories routes registered");
    log("Stories routes registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    log("Registering Analytics routes...");
    registerAnalyticsRoutes(app);
    log("Analytics routes registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è XMLRiver API
    log("Registering XMLRiver API routes...");
    registerXmlRiverRoutes(app);
    log("XMLRiver API routes registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π FAL.AI
    log("Registering FAL.AI Universal Image Generation routes...");
    registerFalAiImageRoutes(app);
    log("FAL.AI Universal Image Generation routes registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Imgur Uploader
    log("Registering Imgur Uploader routes...");
    registerImgurRoutes(app);
    log("Imgur Uploader routes registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π DeepSeek
    log("Registering DeepSeek Models route...");
    registerDeepSeekModelsRoute(app);
    log("DeepSeek Models route registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Beget S3
    log("Registering Beget S3 routes...");
    registerBegetS3Routes(app);
    log("Beget S3 routes registered successfully");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    log("Registering clear cache routes...");
    const clearCacheRouter = (await import('./routes/clear-cache')).default;
    app.use('/api', clearCacheRouter);
    log("Clear cache routes registered successfully");
    
    // –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—á–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
    log("User API keys routes already registered early");
    
    // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç.–∫. –º—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –Ω–∞—á–∞–ª–µ
    // log("Registering Telegram test routes...");
    // app.use('/api/test', testRouter);
    // log("Telegram test routes registered successfully");
    
    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π endpoint

    console.log("Route registration completed");
    log("Routes registered successfully");

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
      const status = err.status || err.statusCode || 500;
      const message = err.message || "Internal Server Error";

      log(`Error encountered: ${status} - ${message}`);
      res.status(status).json({ message });
    });

    // –í—Å–µ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Vite –≤ —Å—Ä–µ–¥–µ Replit
    try {
      log("Setting up Vite in development mode...");
      await setupVite(app, server);
      log("Vite setup completed");
    } catch (viteError) {
      log(`Warning: Error setting up Vite: ${viteError instanceof Error ? viteError.message : 'Unknown error'}`);
      log("Continuing server startup despite Vite initialization error");
    }

    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 5000 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º .replit
    const PORT = 5000;
    console.log(`=== STARTING SERVER ON PORT ${PORT} ===`);
    log(`Attempting to start server on port ${PORT}...`);

    server.listen(PORT, "0.0.0.0", () => {
      console.log(`=== SERVER SUCCESSFULLY STARTED ON PORT ${PORT} ===`);
      log(`Server successfully started on port ${PORT}`);
      
      // –ü–µ—á–∞—Ç–∞–µ–º URL-–∞–¥—Ä–µ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      console.log(`=== SERVER URL: http://0.0.0.0:${PORT} ===`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
      logEnvironmentInfo();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—è–∂–µ–ª—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      initializeHeavyServices();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
      setTimeout(() => {
        log('–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π', 'status-validator');
        statusValidator.startValidation();
      }, 30000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
      setTimeout(() => {
        log('–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π N8N', 'scheduler');
        const scheduler = getPublishScheduler();
        scheduler.start();
        log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω', 'scheduler');
      }, 35000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 35 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    }).on('error', (err: NodeJS.ErrnoException) => {
      console.log(`=== SERVER START ERROR: ${err.message} ===`);
      if (err.code === 'EADDRINUSE') {
        log(`Fatal error: Port ${PORT} is already in use. Please ensure no other process is using this port.`);
      } else {
        log(`Fatal error starting server: ${err.message}`);
      }
      process.exit(1);
    });

  } catch (error) {
    log(`Fatal error during server startup: ${error instanceof Error ? error.message : 'Unknown error'}`);
    process.exit(1);
  }
})();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  log(`Uncaught Exception: ${error.message}`);
  process.exit(1);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason) => {
  log(`Unhandled Promise Rejection: ${reason instanceof Error ? reason.message : 'Unknown reason'}`);
  process.exit(1);
});