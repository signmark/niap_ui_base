/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Instagram –≤–∏–¥–µ–æ
 */
import { log } from './logger';

export interface VideoValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  details: {
    headers?: Record<string, string>;
    contentType?: string;
    acceptRanges?: boolean;
    contentLength?: number;
    statusCode?: number;
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ URL –≤–∏–¥–µ–æ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è Instagram Graph API
 */
export async function validateInstagramVideoUrl(videoUrl: string): Promise<VideoValidationResult> {
  const result: VideoValidationResult = {
    isValid: true,
    errors: [],
    warnings: [],
    details: {}
  };

  try {
    log.info(`[Instagram Video Validator] Checking video URL: ${videoUrl}`, 'instagram-validator');
    
    // –î–µ–ª–∞–µ–º HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const response = await fetch(videoUrl, { 
      method: 'HEAD',
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; InstagramBot/1.0; +http://www.instagram.com/)',
        'Range': 'bytes=0-1' // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Range –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      }
    });

    result.details.statusCode = response.status;
    result.details.headers = Object.fromEntries(response.headers.entries());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (!response.ok) {
      result.errors.push(`HTTP Error: ${response.status} ${response.statusText}`);
      result.isValid = false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
    const contentType = response.headers.get('content-type');
    result.details.contentType = contentType || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
    
    if (!contentType || !contentType.startsWith('video/')) {
      result.errors.push(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type: ${contentType}. Instagram —Ç—Ä–µ–±—É–µ—Ç video/mp4`);
      result.isValid = false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Accept-Ranges (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è Instagram)
    const acceptRanges = response.headers.get('accept-ranges');
    result.details.acceptRanges = acceptRanges === 'bytes';
    
    if (acceptRanges !== 'bytes') {
      result.errors.push(`Accept-Ranges –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: ${acceptRanges}. Instagram —Ç—Ä–µ–±—É–µ—Ç "bytes"`);
      result.isValid = false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Length
    const contentLength = response.headers.get('content-length');
    if (contentLength) {
      result.details.contentLength = parseInt(contentLength);
      
      // Instagram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–±—ã—á–Ω–æ 100MB)
      const sizeMB = result.details.contentLength / (1024 * 1024);
      if (sizeMB > 100) {
        result.warnings.push(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ${sizeMB.toFixed(1)}MB –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Instagram`);
      }
    } else {
      result.warnings.push('Content-Length –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Instagram');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É partial content (206)
    try {
      const rangeResponse = await fetch(videoUrl, {
        headers: {
          'Range': 'bytes=0-100'
        }
      });

      if (rangeResponse.status === 206) {
        log.info('[Instagram Video Validator] –°–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç partial content (206)', 'instagram-validator');
      } else {
        result.warnings.push(`–°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç partial content (206), –ø–æ–ª—É—á–µ–Ω ${rangeResponse.status}`);
      }
    } catch (rangeError) {
      result.warnings.push('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É partial content');
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log.info(`[Instagram Video Validator] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, 'instagram-validator');
    log.info(`  URL: ${videoUrl}`, 'instagram-validator');
    log.info(`  –í–∞–ª–∏–¥–Ω—ã–π: ${result.isValid}`, 'instagram-validator');
    log.info(`  –û—à–∏–±–∫–∏: ${result.errors.length}`, 'instagram-validator');
    log.info(`  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${result.warnings.length}`, 'instagram-validator');
    log.info(`  Content-Type: ${result.details.contentType}`, 'instagram-validator');
    log.info(`  Accept-Ranges: ${acceptRanges}`, 'instagram-validator');
    log.info(`  Content-Length: ${result.details.contentLength || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`, 'instagram-validator');

    return result;

  } catch (error: any) {
    result.errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL: ${error.message}`);
    result.isValid = false;
    
    log.error(`[Instagram Video Validator] –û—à–∏–±–∫–∞: ${error.message}`, 'instagram-validator');
    return result;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Instagram –≤–∏–¥–µ–æ
 */
export function generateVideoReport(validation: VideoValidationResult, videoUrl: string): string {
  const report = [];
  
  report.push('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ò–î–ï–û –î–õ–Ø INSTAGRAM ===');
  report.push(`URL: ${videoUrl}`);
  report.push(`–°—Ç–∞—Ç—É—Å: ${validation.isValid ? '‚úÖ –í–ê–õ–ò–î–ù–´–ô' : '‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ô'}`);
  report.push('');

  if (validation.details.statusCode) {
    report.push(`HTTP Status: ${validation.details.statusCode}`);
  }

  if (validation.details.contentType) {
    report.push(`Content-Type: ${validation.details.contentType}`);
  }

  if (validation.details.acceptRanges !== undefined) {
    report.push(`Accept-Ranges: ${validation.details.acceptRanges ? '‚úÖ bytes' : '‚ùå –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}`);
  }

  if (validation.details.contentLength) {
    const sizeMB = validation.details.contentLength / (1024 * 1024);
    report.push(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${sizeMB.toFixed(1)} MB`);
  }

  if (validation.errors.length > 0) {
    report.push('');
    report.push('üö´ –û–®–ò–ë–ö–ò:');
    validation.errors.forEach(error => {
      report.push(`  - ${error}`);
    });
  }

  if (validation.warnings.length > 0) {
    report.push('');
    report.push('‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
    validation.warnings.forEach(warning => {
      report.push(`  - ${warning}`);
    });
  }

  if (validation.details.headers) {
    report.push('');
    report.push('üìã HTTP –ó–ê–ì–û–õ–û–í–ö–ò:');
    Object.entries(validation.details.headers).forEach(([key, value]) => {
      report.push(`  ${key}: ${value}`);
    });
  }

  return report.join('\n');
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ URL –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è Instagram
 */
export async function quickInstagramCheck(videoUrl: string): Promise<boolean> {
  try {
    const response = await fetch(videoUrl, { method: 'HEAD' });
    
    const contentType = response.headers.get('content-type');
    const acceptRanges = response.headers.get('accept-ranges');
    
    return response.ok && 
           contentType?.startsWith('video/') === true && 
           acceptRanges === 'bytes';
  } catch {
    return false;
  }
}