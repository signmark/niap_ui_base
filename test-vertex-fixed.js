import { GeminiProxyService } from './services/gemini-proxy-fixed.js';

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Vertex AI —Å–µ—Ä–≤–∏—Å–∞...');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const geminiService = new GeminiProxyService({
    apiKey: process.env.GEMINI_API_KEY || 'AIzaSyDaYtWfHwI9vq3kTatny217HnbKauAvdxE'
});

async function testVertexAI() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º generateText —Å Vertex AI...');
        
        const result = await geminiService.generateText({
            prompt: "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
            model: "gemini-2.5-flash"
        });
        
        console.log('‚úÖ Vertex AI —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ç–µ–∫—Å—Ç:');
        console.log(result);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Vertex AI:', error.message);
        console.error('–°—Ç–µ–∫:', error.stack);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testVertexAI();