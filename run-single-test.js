/**
 * –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤
 */
import axios from 'axios';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// API URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const API_URL = process.env.API_URL || 'http://localhost:5000';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const settings = {
  telegram: {
    token: process.env.TELEGRAM_BOT_TOKEN || '7529101043:AAG298h0iubyeKPuZ-WRtEFbNEnEyqy_XJU',
    chatId: process.env.TELEGRAM_CHAT_ID || '-1002302366310'
  }
};

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å –¥–ª—è –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤
const testCase = {
  name: '3. –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏',
  description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö HTML-—Ç–µ–≥–æ–≤',
  text: `<b>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ –∂–∏—Ä–Ω–æ–≥–æ

<i>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ –∫—É—Ä—Å–∏–≤–∞

<u>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è

<s>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è

<code>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ –∫–æ–¥–∞

–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤

–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–≥–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ <b>LIFO <i>(Last In, First Out) <u>–∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ</u></i></b> –≤ fixUnclosedTags`
};

/**
 * –ü—É–±–ª–∏–∫—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
async function runTest() {
  try {
    console.log(`\n----- –¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å: ${testCase.name} -----`);
    console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${testCase.description}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const testHeader = `üß™ <b>–¢–ï–°–¢ –ù–ï–ó–ê–ö–†–´–¢–´–• –¢–ï–ì–û–í</b>: ${testCase.name}\n\n`;
    const testContent = testHeader + testCase.text;
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API...`);
    const response = await axios.post(`${API_URL}/api/test/telegram-post`, {
      text: testContent,
      chatId: settings.telegram.chatId,
      token: settings.telegram.token
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", JSON.stringify(response.data, null, 2));
    
    if (response.data && response.data.success) {
      const result = response.data.data;
      console.log(`‚úÖ –£–°–ü–ï–•: –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
      
      if (result.postUrl) {
        console.log(`üîó URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.postUrl}`);
      }
      
      if (result.messageId) {
        console.log(`üìù ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.messageId}`);
      }
      
      return { 
        success: true, 
        messageId: result.messageId,
        postUrl: result.postUrl 
      };
    } else {
      console.log(`‚ùå –û–®–ò–ë–ö–ê: –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!`);
      
      if (response.data && response.data.error) {
        console.log(`–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: ${response.data.error}`);
      }
      
      return { 
        success: false, 
        error: response.data?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      };
    }
  } catch (error) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:`, error.message);
    
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(error.response.data, null, 2));
    }
    
    return { 
      success: false, 
      error: error.message 
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
console.log('======================================================');
console.log('üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ù–ï–ó–ê–ö–†–´–¢–´–• HTML-–¢–ï–ì–û–í –í TELEGRAM');
console.log('======================================================\n');

runTest().then(result => {
  console.log('\n======================================================');
  if (result.success) {
    console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
  } else {
    console.log(`‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: ${result.error}`);
  }
  console.log('======================================================');
}).catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error);
  process.exit(1);
});