/**
 * –¢–µ—Å—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã Instagram Stories creation_id
 */
const axios = require('axios');

async function testInstagramStoriesCreationIdFix() {
  const N8N_WEBHOOK = 'https://n8n.roboflow.space/webhook/publish-stories';
  const VIDEO_URL = 'https://6e679636ae90-ridiculous-seth.s3.ru1.storage.beget.cloud/videos/ig_stories_converted_1755538595646_86mmakylf.mp4';
  
  console.log('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã creation_id –¥–ª—è Instagram Stories');
  
  // –ü–æ–ø—ã—Ç–∫–∞ 1: –£–∫–∞–∑–∞—Ç—å —á—Ç–æ –Ω—É–∂–µ–Ω –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
  const payload1 = {
    contentId: 'test_story_' + Date.now(),
    contentType: 'video_story',
    platforms: ['instagram'],
    
    // Instagram API specific config
    instagram_config: {
      two_step_process: true, // –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω—É–∂–µ–Ω –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
      create_container_first: true,
      media_type: 'VIDEO',
      published: false // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
    },
    
    content: {
      title: 'Test Instagram Stories with creation_id fix',
      videoUrl: VIDEO_URL,
      mediaType: 'VIDEO',
      storyType: 'instagram_stories'
    },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è N8N
    video_url: VIDEO_URL,
    media_type: 'VIDEO',
    publish_mode: 'instagram_stories'
  };
  
  console.log('–ü–æ–ø—ã—Ç–∫–∞ 1: –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å');
  await testPayload(N8N_WEBHOOK, payload1, 'Two-step process');
  
  // –ü–æ–ø—ã—Ç–∫–∞ 2: –ü—Ä—è–º–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å published=true
  const payload2 = {
    contentId: 'test_story_direct_' + Date.now(),
    contentType: 'video_story',
    platforms: ['instagram'],
    
    // –ü—Ä—è–º–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    instagram_config: {
      media_type: 'VIDEO',
      published: true, // –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É
      direct_publish: true
    },
    
    content: {
      title: 'Test Instagram Stories direct publish',
      videoUrl: VIDEO_URL,
      mediaType: 'VIDEO',
      storyType: 'instagram_stories'
    },
    
    video_url: VIDEO_URL,
    media_type: 'VIDEO',
    publish_mode: 'instagram_stories'
  };
  
  console.log('\n–ü–æ–ø—ã—Ç–∫–∞ 2: –ü—Ä—è–º–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è');
  await testPayload(N8N_WEBHOOK, payload2, 'Direct publish');
  
  // –ü–æ–ø—ã—Ç–∫–∞ 3: Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –µ—Å–ª–∏ Stories –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
  const payload3 = {
    contentId: 'test_fallback_' + Date.now(),
    contentType: 'video',
    platforms: ['instagram'],
    
    instagram_config: {
      media_type: 'VIDEO',
      fallback_to_feed: true, // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –≤ –ª–µ–Ω—Ç—É
      message: '–≠—Ç–æ –±—ã–ª–æ Stories, –Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç'
    },
    
    content: {
      title: 'Instagram fallback video post',
      videoUrl: VIDEO_URL,
      description: 'Stories fallback to feed post'
    },
    
    video_url: VIDEO_URL,
    media_type: 'VIDEO'
  };
  
  console.log('\n–ü–æ–ø—ã—Ç–∫–∞ 3: Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç');
  await testPayload(N8N_WEBHOOK, payload3, 'Fallback to feed');
}

async function testPayload(url, payload, testName) {
  try {
    console.log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testName}`);
    console.log('Payload:', JSON.stringify(payload, null, 2));
    
    const response = await axios.post(url, payload, {
      timeout: 60000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`‚úÖ ${testName} - –£–°–ü–ï–•!`);
    console.log('Status:', response.status);
    console.log('Response:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.error(`‚ùå ${testName} - –û–®–ò–ë–ö–ê`);
    
    if (error.response?.data) {
      console.error('Status:', error.response.status);
      console.error('Error details:', JSON.stringify(error.response.data, null, 2));
      
      // –ü–∞—Ä—Å–∏–º –æ—à–∏–±–∫–∏ Instagram API
      if (error.response.data.error?.message) {
        try {
          const instagramError = JSON.parse(error.response.data.error.message.replace(/^\d+\s*-\s*/, ''));
          console.error('Instagram API Error:', instagramError);
          
          if (instagramError.error?.message) {
            console.error('üîç Instagram —Å–æ–æ–±—â–µ–Ω–∏–µ:', instagramError.error.message);
          }
        } catch (parseError) {
          console.error('Raw error message:', error.response.data.error.message);
        }
      }
    } else {
      console.error('Network Error:', error.message);
    }
  }
}

testInstagramStoriesCreationIdFix();