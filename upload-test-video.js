#!/usr/bin/env node

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–∞ S3 –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏
 */

import fs from 'fs';
import FormData from 'form-data';
import fetch from 'node-fetch';

async function uploadVideo() {
  try {
    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ S3...');
    
    const videoPath = 'attached_assets/reels-test_1755686797072.mp4';
    
    if (!fs.existsSync(videoPath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${videoPath}`);
    }
    
    const stats = fs.statSync(videoPath);
    console.log(`üìπ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const response = await fetch('http://localhost:5000/api/test/instagram-upload-and-test', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        videoPath: videoPath,
        testName: 'reels-proxy-test'
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ S3');
      console.log(`üîó S3 URL: ${result.data.uploadUrl}`);
      console.log(`üìÅ S3 Key: ${result.data.uploadKey}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–∫—Å–∏
      const fileName = result.data.uploadKey.split('/').pop();
      const proxyUrl = `http://localhost:5000/api/instagram-video-proxy/${fileName}`;
      
      console.log(`\nüöÄ –ü–†–û–ö–°–ò URL: ${proxyUrl}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
      console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏...');
      
      const proxyResponse = await fetch(proxyUrl, { method: 'HEAD' });
      
      console.log(`üìä –ü—Ä–æ–∫—Å–∏ —Å—Ç–∞—Ç—É—Å: ${proxyResponse.status}`);
      console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`);
      console.log(`  Content-Type: ${proxyResponse.headers.get('content-type')}`);
      console.log(`  Accept-Ranges: ${proxyResponse.headers.get('accept-ranges')}`);
      console.log(`  Content-Length: ${proxyResponse.headers.get('content-length')}`);
      
      if (proxyResponse.headers.get('accept-ranges') === 'bytes') {
        console.log('\nüéâ –ü–†–û–ö–°–ò –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!');
        console.log('‚úÖ Instagram –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç URL');
        console.log(`\nüéØ –ì–æ—Ç–æ–≤—ã–π URL –¥–ª—è Instagram: ${proxyUrl}`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º Range –∑–∞–ø—Ä–æ—Å
        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Range –∑–∞–ø—Ä–æ—Å...');
        const rangeResponse = await fetch(proxyUrl, {
          headers: { 'Range': 'bytes=0-1023' }
        });
        
        console.log(`üìä Range —Å—Ç–∞—Ç—É—Å: ${rangeResponse.status}`);
        if (rangeResponse.status === 206) {
          console.log('‚úÖ Range –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç (HTTP 206)');
          console.log(`üìã Content-Range: ${rangeResponse.headers.get('content-range')}`);
        }
        
        return proxyUrl;
      } else {
        console.log('\n‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Accept-Ranges: bytes');
      }
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${result.error}`);
    }
  } catch (error) {
    console.error(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
  }
  
  return null;
}

async function main() {
  console.log('üöÄ –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ö–°–ò');
  console.log('='.repeat(60));
  
  const proxyUrl = await uploadVideo();
  
  if (proxyUrl) {
    console.log('\n' + '='.repeat(60));
    console.log('üèÜ –£–°–ü–ï–•! –ü—Ä–æ–∫—Å–∏ URL –≥–æ—Ç–æ–≤ –¥–ª—è Instagram:');
    console.log(`üîó ${proxyUrl}`);
    console.log('='.repeat(60));
  } else {
    console.log('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
  }
}

main().catch(console.error);