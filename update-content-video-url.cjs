const axios = require('axios');

async function updateContentVideoUrl() {
  console.log('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï URL –í–ò–î–ï–û –í –ö–û–ù–¢–ï–ù–¢–ï');
  
  const contentId = '7fdcd858-0d14-4cd2-8950-5c8b31f29fea';
  const originalVideoUrl = 'https://6e679636ae90-ridiculous-seth.s3.ru1.storage.beget.cloud/videos/ig_stories_converted_1755600756405_05lqzi6v4.mp4';
  
  try {
    console.log('üìπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    console.log('Content ID:', contentId);
    console.log('–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ:', originalVideoUrl);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º contentId –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const response = await axios.post('http://localhost:5000/api/real-video-converter/convert', {
      videoUrl: originalVideoUrl,
      forceConvert: true,
      contentId: contentId  // –ü–ï–†–ï–î–ê–ï–ú ID –ö–û–ù–¢–ï–ù–¢–ê –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }, {
      timeout: 120000
    });
    
    if (response.data.success) {
      console.log('‚úÖ –†–µ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      console.log('–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ:', response.data.convertedUrl);
      console.log('–ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', response.data.contentUpdated);
      
      // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID –≤ N8N
      console.log('\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ N8N');
      
      const webhookPayload = {
        contentId: contentId
      };
      
      const webhookResponse = await axios.post('https://n8n.roboflow.space/webhook/publish-stories', webhookPayload, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 20000
      });
      
      console.log('‚úÖ N8N WEBHOOK –û–¢–ü–†–ê–í–õ–ï–ù!');
      console.log('–°—Ç–∞—Ç—É—Å:', webhookResponse.status);
      
      return {
        success: true,
        newVideoUrl: response.data.convertedUrl,
        contentUpdated: response.data.contentUpdated,
        webhookStatus: webhookResponse.status
      };
      
    } else {
      throw new Error('–†–µ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ' + response.data.error);
    }
    
  } catch (error) {
    console.log('‚ùå –û–®–ò–ë–ö–ê:', error.message);
    if (error.code === 'ECONNABORTED') {
      console.log('‚ö†Ô∏è Timeout - –Ω–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    }
    return null;
  }
}

updateContentVideoUrl().then(result => {
  if (result && result.success) {
    console.log('\nüèÜ –ö–û–ù–¢–ï–ù–¢ –û–ë–ù–û–í–õ–ï–ù!');
    console.log(`‚úÖ Content ID "${contentId}" —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ`);
    console.log('–ù–æ–≤—ã–π URL:', result.newVideoUrl);
    console.log('–ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Directus:', result.contentUpdated);
    console.log('N8N —Å—Ç–∞—Ç—É—Å:', result.webhookStatus);
  } else {
    console.log('\n‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
  }
});