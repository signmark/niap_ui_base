/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –∑–∞–≤–∏—Å–∞–µ—Ç
 */

import axios from 'axios';

async function testPerformance() {
  console.log('üöÄ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞...');
  
  const tests = [
    'https://example.com',
    'https://google.com',
    'https://github.com'
  ];
  
  for (const url of tests) {
    const startTime = Date.now();
    
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const response = await axios.get(`http://localhost:5000/api/health`, {
        timeout: 5000
      });
      
      const duration = Date.now() - startTime;
      console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ ${duration}ms - —Å–µ—Ä–≤–µ—Ä –ù–ï –∑–∞–≤–∏—Å–∞–µ—Ç!`);
      
    } catch (error) {
      const duration = Date.now() - startTime;
      
      if (error.code === 'ECONNABORTED') {
        console.error(`üî• –ö–†–ò–¢–ò–ß–ù–û: –¢–∞–π–º–∞—É—Ç ${duration}ms - —Å–µ—Ä–≤–µ—Ä –ü–û–î–í–ò–°!`);
      } else {
        console.log(`‚ö° –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ ${duration}ms (–æ—à–∏–±–∫–∞: ${error.message})`);
      }
    }
  }
}

testPerformance();