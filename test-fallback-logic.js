/**
 * –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ fallback –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–æ–≤
 */

import axios from 'axios';

// –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é extractFullSiteContent
async function testExtractContent(url) {
  try {
    console.log(`üöÄ –ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞: ${url}`);
    
    let normalizedUrl = url;
    if (!normalizedUrl.startsWith('http://') && !normalizedUrl.startsWith('https://')) {
      normalizedUrl = `https://${normalizedUrl}`;
    }
    
    const response = await axios.get(normalizedUrl, {
      timeout: 8000,
      maxContentLength: 2 * 1024 * 1024,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
      },
      validateStatus: (status) => status >= 200 && status < 400
    });
    
    const htmlContent = response.data;
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const title = htmlContent.match(/<title[^>]*>([^<]+)<\/title>/i)?.[1]?.trim() || '';
    const description = htmlContent.match(/<meta[^>]*name=["']description["'][^>]*content=["']([^"']+)["']/i)?.[1]?.trim() || '';
    
    const h1s = htmlContent.match(/<h1[^>]*>([^<]+)<\/h1>/gi)?.map(h => h.replace(/<[^>]+>/g, '').trim()).filter(Boolean).slice(0, 8) || [];
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
    let businessType = '–æ–±—â–∞—è';
    const contentLower = (title + ' ' + description + ' ' + h1s.join(' ')).toLowerCase();
    
    if (contentLower.includes('example')) {
      businessType = '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–π—Ç';
    }
    
    const result = {
      url,
      title,
      description, 
      businessType,
      contentLength: htmlContent.length,
      extractedData: h1s
    };
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç:', result);
    return result;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: ${error.message}`);
    
    // Fallback –ª–æ–≥–∏–∫–∞
    const domain = url.replace(/^https?:\/\//, '').split('/')[0].toLowerCase();
    const businessName = domain.split('.')[0].charAt(0).toUpperCase() + domain.split('.')[0].slice(1);
    
    const fallbackResult = {
      url,
      title: `${businessName} - Fallback Analysis`,
      description: '–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–∞',
      businessType: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –¥–æ–º–µ–Ω—É',
      isFallback: true,
      fallbackData: {
        companyName: businessName,
        businessValues: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º, –∫–∞—á–µ—Å—Ç–≤–æ, –∫–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å',
        productBeliefs: '–°—Ç—Ä–µ–º–∏–º—Å—è –∫ excellence –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏'
      }
    };
    
    console.log('üîÑ Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', fallbackResult);
    return fallbackResult;
  }
}

async function runTests() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê –ò FALLBACK\n');
  
  const urls = [
    'https://example.com',
    'https://nonexistent-site-123456.com',
    'https://github.com',
    'invalid-url'
  ];
  
  for (const url of urls) {
    console.log(`\nüìç –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${url}`);
    console.log('='.repeat(50));
    
    const result = await testExtractContent(url);
    
    console.log(`üè∑Ô∏è –¢–∏–ø –±–∏–∑–Ω–µ—Å–∞: ${result.businessType}`);
    if (result.isFallback) {
      console.log(`üõ†Ô∏è Fallback –¥–∞–Ω–Ω—ã–µ:`, result.fallbackData);
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

runTests().catch(console.error);