/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è metadata –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é campaign_content
 * –ü–æ–ª–µ metadata –±—É–¥–µ—Ç —Ç–∏–ø–∞ JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Stories
 */

import axios from 'axios';

async function authenticate() {
  try {
    const response = await axios.post('https://directus.roboflow.tech/auth/login', {
      email: process.env.DIRECTUS_ADMIN_EMAIL || 'admin@roboflow.tech',
      password: process.env.DIRECTUS_ADMIN_PASSWORD || 'roboflow2024!'
    });
    
    return response.data.data.access_token;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.response?.data || error.message);
    throw error;
  }
}

async function addMetadataField(token) {
  try {
    const fieldData = {
      field: 'metadata',
      type: 'json',
      meta: {
        field: 'metadata',
        type: 'json',
        interface: 'input-code',
        display: 'formatted-json-value',
        special: ['cast-json'],
        note: 'JSON –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è Stories',
        hidden: false,
        readonly: false,
        required: false,
        sort: null,
        width: 'full',
        options: {
          language: 'json',
          lineNumber: true,
          template: '{\n  "storyData": null\n}'
        },
        display_options: null,
        validation: null,
        validation_message: null
      },
      schema: {
        name: 'metadata',
        table: 'campaign_content',
        data_type: 'json',
        default_value: null,
        max_length: null,
        numeric_precision: null,
        numeric_scale: null,
        is_nullable: true,
        is_primary_key: false,
        has_auto_increment: false,
        foreign_key_column: null,
        foreign_key_table: null,
        comment: 'JSON field for storing additional data including Stories'
      }
    };

    const response = await axios.post(
      'https://directus.roboflow.tech/fields/campaign_content',
      fieldData,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('‚úÖ –ü–æ–ª–µ metadata —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é campaign_content');
    console.log('–î–µ—Ç–∞–ª–∏:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è metadata:', error.response?.data || error.message);
    throw error;
  }
}

async function refreshDirectusSchema(token) {
  try {
    await axios.post(
      'https://directus.roboflow.tech/schema/snapshot',
      {},
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.log('‚úÖ –°—Ö–µ–º–∞ Directus –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  } catch (error) {
    console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É Directus:', error.response?.data || error.message);
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è metadata –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é campaign_content...');
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    console.log('üì° –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Directus...');
    const token = await authenticate();
    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è metadata
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è metadata...');
    await addMetadataField(token);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã Directus...');
    await refreshDirectusSchema(token);
    
    console.log('üéâ –ü–æ–ª–µ metadata —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å Stories –∫–æ–Ω—Ç–µ–Ω—Ç.');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();