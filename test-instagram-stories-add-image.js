/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è Instagram Stories
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É,
 * —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Instagram Stories.
 * 
 * –ó–∞–ø—É—Å–∫: node test-instagram-stories-add-image.js [contentId]
 */

import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fetch from 'node-fetch';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –¥–ª—è ES –º–æ–¥—É–ª–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const DIRECTUS_URL = process.env.DIRECTUS_URL || 'https://directus.nplanner.ru';
const DIRECTUS_EMAIL = process.env.DIRECTUS_EMAIL;
const DIRECTUS_PASSWORD = process.env.DIRECTUS_PASSWORD;
const TEST_IMAGE_URL = 'https://i.imgur.com/PBgwMUk.jpg'; // –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
const CONTENT_ID = process.argv[2]; // ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

// –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏
function log(message, type = 'info') {
  const now = new Date().toLocaleTimeString();
  let color = colors.blue;
  let prefix = '–ò–ù–§–û';
  
  switch (type) {
    case 'error':
      color = colors.red;
      prefix = '–û–®–ò–ë–ö–ê';
      break;
    case 'success':
      color = colors.green;
      prefix = '–£–°–ü–ï–•';
      break;
    case 'warning':
      color = colors.yellow;
      prefix = '–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï';
      break;
    case 'step':
      color = colors.cyan;
      prefix = '–®–ê–ì';
      break;
    default:
      color = colors.blue;
      prefix = '–ò–ù–§–û';
      break;
  }
  
  console.log(`${color}[${now}] [${prefix}] ${message}${colors.reset}`);
}

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Directus API
 * @returns {Promise<string>} –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function authenticateDirectus() {
  try {
    log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Directus API...', 'step');
    
    const response = await fetch(`${DIRECTUS_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: DIRECTUS_EMAIL,
        password: DIRECTUS_PASSWORD
      })
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (!data.data || !data.data.access_token) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', 'success');
    return data.data.access_token;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
 * @param {string} contentId ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @param {string} token –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Directus
 * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
async function getContentInfo(contentId, token) {
  try {
    log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ ${contentId}...`, 'step');
    
    const response = await fetch(`${DIRECTUS_URL}/items/campaign_content/${contentId}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (!data.data) {
      throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
    }
    
    log(`–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: "${data.data.title || data.data.id}"`, 'success');
    return data.data;
  } catch (error) {
    log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è—è —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 * @param {string} contentId ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @param {string} token –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Directus
 * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
 */
async function updateContentWithImage(contentId, token) {
  try {
    log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${contentId} —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...`, 'step');
    
    // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è additionalImages
    const mediaData = [
      {
        url: TEST_IMAGE_URL,
        type: 'image'
      }
    ];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const response = await fetch(`${DIRECTUS_URL}/items/campaign_content/${contentId}`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        additionalImages: mediaData
      })
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (!data.data) {
      throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    }
    
    log(`–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º`, 'success');
    return data.data;
  } catch (error) {
    log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: ${error.message}`, 'error');
    throw error;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
 */
async function main() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  if (!CONTENT_ID) {
    log('–û—à–∏–±–∫–∞: ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –£–∫–∞–∂–∏—Ç–µ ID –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.', 'error');
    log('–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: node test-instagram-stories-add-image.js 12345-67890-abcde', 'info');
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Directus
  if (!DIRECTUS_EMAIL || !DIRECTUS_PASSWORD) {
    log('–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Directus. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.', 'error');
    log('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: DIRECTUS_EMAIL, DIRECTUS_PASSWORD', 'info');
    process.exit(1);
  }
  
  try {
    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Directus
    const token = await authenticateDirectus();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    const content = await getContentInfo(CONTENT_ID, token);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (content.additionalImages && Array.isArray(content.additionalImages) && content.additionalImages.length > 0) {
      log('–í –∫–æ–Ω—Ç–µ–Ω—Ç–µ —É–∂–µ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', 'warning');
      console.log(JSON.stringify(content.additionalImages, null, 2));
      
      const proceed = process.argv.includes('--force');
      
      if (!proceed) {
        log('–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --force:', 'info');
        log('node test-instagram-stories-add-image.js ' + CONTENT_ID + ' --force', 'info');
        process.exit(0);
      } else {
        log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...', 'warning');
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const updatedContent = await updateContentWithImage(CONTENT_ID, token);
    
    log('\n========== –†–ï–ó–£–õ–¨–¢–ê–¢ ==========');
    log(`‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç ID: ${CONTENT_ID} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
    log(`üìã –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${TEST_IMAGE_URL}`);
    log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ Directus: ${DIRECTUS_URL}/admin/content/campaign_content/${CONTENT_ID}`);
    log(`\nüì± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ Instagram Story`);
  } catch (error) {
    log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();