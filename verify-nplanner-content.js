#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Nplanner.ru –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
 */

import axios from 'axios';

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è Nplanner.ru...');

async function checkPublications() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    const response = await axios.get('http://localhost:5000/api/publications?limit=10&sort=-created_at', {
      headers: {
        'Authorization': `Bearer ${process.env.DIRECTUS_TOKEN || ''}`
      }
    });

    console.log('üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:', response.data?.data?.length || 0);
    
    if (response.data?.data) {
      // –ò—â–µ–º –Ω–∞—à–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      const nplannerPosts = response.data.data.filter(pub => 
        pub.source === 'nplanner_simple_generator' || 
        pub.content?.includes('Nplanner.ru') ||
        pub.title?.includes('–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ') ||
        pub.hashtags?.includes('#nplanner')
      );

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π Nplanner.ru:', nplannerPosts.length);

      nplannerPosts.forEach((pub, index) => {
        console.log(`\nüìÑ –ü—É–±–ª–∏–∫–∞—Ü–∏—è ${index + 1}:`);
        console.log(`   ID: ${pub.id}`);
        console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${pub.title}`);
        console.log(`   –ö–æ–Ω—Ç–µ–Ω—Ç: ${pub.content?.substring(0, 80)}...`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${pub.status}`);
        console.log(`   –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${pub.platforms?.join?.(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${pub.created_at || pub.date_created}`);
        console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${pub.source || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      });

      if (nplannerPosts.length === 0) {
        console.log('‚ö†Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ Nplanner.ru –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å—è—Ö');
        console.log('üìù –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:');
        
        response.data.data.slice(0, 3).forEach((pub, index) => {
          console.log(`\nüìÑ –ü—É–±–ª–∏–∫–∞—Ü–∏—è ${index + 1}:`);
          console.log(`   ID: ${pub.id}`);
          console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${pub.title}`);
          console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${pub.source || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${pub.created_at || pub.date_created}`);
        });
      }

    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkPublications().catch(console.error);