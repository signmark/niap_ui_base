#!/usr/bin/env node

const axios = require('axios');
require('dotenv').config();

async function removeDuplicateSources() {
  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const adminToken = process.env.DIRECTUS_ADMIN_TOKEN;
  const directusUrl = process.env.DIRECTUS_URL;
  
  if (!adminToken) {
    console.error('‚ùå –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Directus –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
    process.exit(1);
  }
  
  if (!directusUrl) {
    console.error('‚ùå URL Directus –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
    process.exit(1);
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    console.log('üì° –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ Directus...');
    const sourcesResponse = await axios.get(
      `${directusUrl}/items/campaign_content_sources`,
      {
        headers: {
          'Authorization': `Bearer ${adminToken}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const allSources = sourcesResponse.data.data;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${allSources.length}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const sourcesByUrl = new Map();
    for (const source of allSources) {
      if (!sourcesByUrl.has(source.url)) {
        sourcesByUrl.set(source.url, []);
      }
      sourcesByUrl.get(source.url).push(source);
    }

    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicates = [];
    const uniqueSources = [];
    
    for (const [url, sources] of sourcesByUrl) {
      if (sources.length > 1) {
        // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ø–æ –¥–∞—Ç–µ), –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –¥—É–±–ª–∏–∫–∞—Ç—ã
        const [first, ...duplicateList] = sources.sort((a, b) => 
          new Date(a.date_created || a.created_at) - new Date(b.date_created || b.created_at)
        );
        uniqueSources.push(first);
        duplicates.push(...duplicateList);
        
        console.log(`üîç URL ${url}:`);
        console.log(`  –û—Å—Ç–∞–≤–ª—è–µ–º: ${first.name} (ID: ${first.id}, –¥–∞—Ç–∞: ${first.date_created || first.created_at})`);
        console.log(`  –£–¥–∞–ª—è–µ–º: ${duplicateList.map(d => `${d.name} (ID: ${d.id})`).join(', ')}`);
      } else {
        uniqueSources.push(sources[0]);
      }
    }

    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ${uniqueSources.length}, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ${duplicates.length}`);

    if (duplicates.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${duplicates.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...`);
    let removedCount = 0;
    let failedCount = 0;

    for (const duplicate of duplicates) {
      try {
        await axios.delete(
          `${directusUrl}/items/campaign_content_sources/${duplicate.id}`,
          {
            headers: {
              'Authorization': `Bearer ${adminToken}`,
              'Content-Type': 'application/json'
            }
          }
        );
        
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${duplicate.name} (ID: ${duplicate.id})`);
        removedCount++;
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${duplicate.name} (ID: ${duplicate.id}):`, err.response?.data || err.message);
        failedCount++;
      }
    }

    console.log(`\nüìã –ò–¢–û–ì–ò:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: ${removedCount}`);
    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${failedCount}`);
    console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${uniqueSources.length}`);
    
    if (removedCount > 0) {
      console.log('\nüéâ –î—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–µ URL —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤ Directus.');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.response?.data || error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
removeDuplicateSources();