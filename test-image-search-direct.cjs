/**
 * –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HTTP API
 */

// –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
async function findAndPrepareImage(text, keywords) {
  console.log('   üîç –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', keywords.join(', '));
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ Unsplash
  console.log('   üì° –ü—Ä–æ–±—É–µ–º Unsplash API...');
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫
  const mockResult = {
    success: true,
    source: 'unsplash',
    size: Math.floor(Math.random() * 100000) + 50000, // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä 50-150KB
    originalUrl: `https://images.unsplash.com/photo-123456?q=${encodeURIComponent(keywords[0])}`,
    imageBuffer: Buffer.alloc(1024) // –ò–º–∏—Ç–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  };
  
  // –°–ª—É—á–∞–π–Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø–∞–¥–µ–Ω–∏–µ –≤ —Ñ–æ–ª–ª–±—ç–∫
  if (Math.random() < 0.3) {
    console.log('   ‚ö†Ô∏è  API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–ª–±—ç–∫...');
    return {
      success: true,
      source: 'fallback',
      size: 85, // –†–∞–∑–º–µ—Ä 1x1 –ø–∏–∫—Å–µ–ª—è
      imageBuffer: Buffer.from([0xFF, 0xD8, 0xFF]) // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π JPEG
    };
  }
  
  console.log('   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
  return mockResult;
}

async function testImageSearchDirect() {
  console.log('üîç –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  
  const testCases = [
    {
      text: '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –±—É–¥—É—â–µ–µ',
      keywords: ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', '–±—É–¥—É—â–µ–µ']
    },
    {
      text: '–µ–¥–∞ –∫—É–ª–∏–Ω–∞—Ä–∏—è —Ä–µ—Ü–µ–ø—Ç—ã', 
      keywords: ['–µ–¥–∞', '–∫—É–ª–∏–Ω–∞—Ä–∏—è', '—Ä–µ—Ü–µ–ø—Ç—ã']
    },
    {
      text: '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø—Ä–∏—Ä–æ–¥–∞ –≥–æ—Ä—ã',
      keywords: ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–ø—Ä–∏—Ä–æ–¥–∞', '–≥–æ—Ä—ã']
    },
    {
      text: '—Å–ø–æ—Ä—Ç —Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
      keywords: ['—Å–ø–æ—Ä—Ç', '—Ñ–∏—Ç–Ω–µ—Å', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏']
    }
  ];

  const results = [];
  let successCount = 0;
  let failCount = 0;

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    
    try {
      console.log(`üì∏ –¢–µ—Å—Ç ${i + 1}/4: –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è "${testCase.text}"`);
      console.log(`   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: [${testCase.keywords.join(', ')}]`);
      
      const startTime = Date.now();
      const result = await findAndPrepareImage(testCase.text, testCase.keywords);
      const duration = Date.now() - startTime;
      
      const testResult = {
        testNumber: i + 1,
        query: testCase.text,
        keywords: testCase.keywords,
        success: result.success,
        size: result.size,
        source: result.source || 'fallback',
        originalUrl: result.originalUrl || '–Ω–µ—Ç URL',
        hasBuffer: !!result.imageBuffer,
        duration: duration
      };
      
      results.push(testResult);
      
      if (result.success && result.source !== 'fallback') {
        console.log(`   ‚úÖ –£—Å–ø–µ—Ö! –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.source}, –†–∞–∑–º–µ—Ä: ${result.size} bytes`);
        console.log(`   üåê URL: ${result.originalUrl}`);
        successCount++;
      } else {
        console.log(`   ‚ö†Ô∏è  –§–æ–ª–ª–±—ç–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –ø–∏–∫—Å–µ–ª—å), —Ä–∞–∑–º–µ—Ä: ${result.size} bytes`);
        failCount++;
      }
      
      console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms\n`);
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
      results.push({
        testNumber: i + 1,
        query: testCase.text,
        keywords: testCase.keywords,
        error: error.message,
        duration: 0
      });
      failCount++;
    }
  }
  
  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
  console.log(`   üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testCases.length}`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount} (—Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)`);
  console.log(`   ‚ö†Ô∏è  –§–æ–ª–ª–±—ç–∫–æ–≤: ${failCount} (1x1 –ø–∏–∫—Å–µ–ª—å)`);
  console.log(`   üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successCount / testCases.length) * 100).toFixed(1)}%`);
  
  // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  results.forEach((result, index) => {
    console.log(`${index + 1}. "${result.query}"`);
    if (result.error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
    } else {
      console.log(`   ${result.success && result.source !== 'fallback' ? '‚úÖ' : '‚ö†Ô∏è'} ${result.source} (${result.size} bytes, ${result.duration}ms)`);
    }
  });
  
  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testImageSearchDirect().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  process.exit(1);
});