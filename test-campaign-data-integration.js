/**
 * –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏ –≤–æ –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–∞—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏" —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */

import axios from 'axios';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const CONFIG = {
  baseUrl: 'http://localhost:5000',
  authToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjUzOTIxZjE2LWY1MWQtNDU5MS04MGI5LThjYWE0ZmRlNGQxMyIsInJvbGUiOiIyODViZGU2OS0yZjA0LTRmM2YtOTg5Yy1mN2RmZWMzZGQ0MDUiLCJhcHBfYWNjZXNzIjp0cnVlLCJhZG1pbl9hY2Nlc3MiOnRydWUsImlhdCI6MTc0ODQ0NzgwNywiZXhwIjoxNzQ4NDQ4NzA3LCJpc3MiOiJkaXJlY3R1cyJ9.4dqTV1zL7jdY03K9L2aCp4djbvwy7lonlU-DPtWShbc',
  campaignId: '46868c44-c6a4-4bed-accf-9ad07bba790e',
  timeout: 30000
};

// –¢–µ—Å—Ç–æ–≤—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã
const AI_SERVICES = [
  { name: 'Claude', service: 'claude' },
  { name: 'Gemini', service: 'gemini-2.0-flash' },
  { name: 'Qwen', service: 'qwen' },
  { name: 'DeepSeek', service: 'deepseek' }
];

// –û–∂–∏–¥–∞–µ–º—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏
const CAMPAIGN_DATA_INDICATORS = [
  'nplanner.ru',
  'NPlanner',
  '–∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
  '–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
  '–ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è'
];

// –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–æ—Ç–æ—Ä—ã—Ö –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ)
const FAKE_DATA_INDICATORS = [
  'example.com',
  'planster.com',
  'yoursite.com',
  'website.com',
  '–∫–æ–º–ø–∞–Ω–∏—è.—Ä—Ñ'
];

class CampaignDataTester {
  constructor() {
    this.results = [];
    this.totalTests = 0;
    this.passedTests = 0;
  }

  async makeRequest(service, useCampaignData = true) {
    try {
      console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${service} —Å useCampaignData=${useCampaignData}...`);
      
      const response = await axios.post(`${CONFIG.baseUrl}/api/generate-content`, {
        prompt: "–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç",
        service: service,
        useCampaignData: useCampaignData,
        campaignId: CONFIG.campaignId
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${CONFIG.authToken}`
        },
        timeout: CONFIG.timeout
      });

      return {
        success: true,
        content: response.data.content,
        service: response.data.service
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${service}:`, error.message);
      return {
        success: false,
        error: error.message,
        service: service
      };
    }
  }

  analyzeContent(content, serviceName) {
    const analysis = {
      hasCampaignData: false,
      hasFakeData: false,
      campaignIndicators: [],
      fakeIndicators: [],
      contentLength: content ? content.length : 0
    };

    if (!content) {
      return analysis;
    }

    const contentLower = content.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏
    CAMPAIGN_DATA_INDICATORS.forEach(indicator => {
      if (contentLower.includes(indicator.toLowerCase())) {
        analysis.hasCampaignData = true;
        analysis.campaignIndicators.push(indicator);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    FAKE_DATA_INDICATORS.forEach(indicator => {
      if (contentLower.includes(indicator.toLowerCase())) {
        analysis.hasFakeData = true;
        analysis.fakeIndicators.push(indicator);
      }
    });

    return analysis;
  }

  async testService(serviceConfig) {
    console.log(`\n${'='.repeat(50)}`);
    console.log(`üß™ –¢–ï–°–¢–ò–†–£–ï–ú ${serviceConfig.name.toUpperCase()}`);
    console.log(`${'='.repeat(50)}`);

    const testResult = {
      serviceName: serviceConfig.name,
      service: serviceConfig.service,
      withCampaignData: null,
      withoutCampaignData: null,
      passed: false,
      issues: []
    };

    // –¢–µ—Å—Ç 1: –° –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    console.log('\nüìä –¢–µ—Å—Ç 1: –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏');
    const withCampaignData = await this.makeRequest(serviceConfig.service, true);
    testResult.withCampaignData = withCampaignData;

    if (withCampaignData.success) {
      const analysis = this.analyzeContent(withCampaignData.content, serviceConfig.name);
      console.log(`‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (${analysis.contentLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      if (analysis.hasCampaignData) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏: ${analysis.campaignIndicators.join(', ')}`);
      } else {
        console.log(`‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã`);
        testResult.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏');
      }

      if (analysis.hasFakeData) {
        console.log(`‚ùå –ù–∞–π–¥–µ–Ω—ã –≤—ã–¥—É–º–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${analysis.fakeIndicators.join(', ')}`);
        testResult.issues.push(`–í—ã–¥—É–º–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${analysis.fakeIndicators.join(', ')}`);
      } else {
        console.log(`‚úÖ –í—ã–¥—É–º–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      console.log(`üìù –§—Ä–∞–≥–º–µ–Ω—Ç: ${withCampaignData.content.substring(0, 150)}...`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${withCampaignData.error}`);
      testResult.issues.push(`–û—à–∏–±–∫–∞ API: ${withCampaignData.error}`);
    }

    // –¢–µ—Å—Ç 2: –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    console.log('\nüìä –¢–µ—Å—Ç 2: –ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏');
    const withoutCampaignData = await this.makeRequest(serviceConfig.service, false);
    testResult.withoutCampaignData = withoutCampaignData;

    if (withoutCampaignData.success) {
      const analysis = this.analyzeContent(withoutCampaignData.content, serviceConfig.name);
      console.log(`‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (${analysis.contentLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
      console.log(`üìù –§—Ä–∞–≥–º–µ–Ω—Ç: ${withoutCampaignData.content.substring(0, 150)}...`);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    if (withCampaignData.success && testResult.issues.length === 0) {
      testResult.passed = true;
      console.log(`\nüéâ ${serviceConfig.name} –ü–†–û–®–ï–õ –¢–ï–°–¢`);
      this.passedTests++;
    } else {
      console.log(`\n‚ùå ${serviceConfig.name} –ù–ï –ü–†–û–®–ï–õ –¢–ï–°–¢`);
      if (testResult.issues.length > 0) {
        console.log(`–ü—Ä–æ–±–ª–µ–º—ã: ${testResult.issues.join(', ')}`);
      }
    }

    this.totalTests++;
    this.results.push(testResult);
    return testResult;
  }

  async runAllTests() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–¢–ï–°–¢–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –î–ê–ù–ù–´–• –ö–ê–ú–ü–ê–ù–ò–ò');
    console.log(`‚è∞ Timeout: ${CONFIG.timeout}ms`);
    console.log(`üéØ Campaign ID: ${CONFIG.campaignId}`);
    
    const startTime = Date.now();

    for (const serviceConfig of AI_SERVICES) {
      await this.testService(serviceConfig);
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    this.printSummary();
    
    const endTime = Date.now();
    console.log(`\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${(endTime - startTime) / 1000}s`);
  }

  printSummary() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('='.repeat(60));
    
    console.log(`‚úÖ –ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç: ${this.passedTests}/${this.totalTests}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç: ${this.totalTests - this.passedTests}/${this.totalTests}`);
    
    console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    
    this.results.forEach(result => {
      const status = result.passed ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${result.serviceName}: ${result.passed ? 'PASSED' : 'FAILED'}`);
      
      if (!result.passed && result.issues.length > 0) {
        result.issues.forEach(issue => {
          console.log(`   ‚ö†Ô∏è  ${issue}`);
        });
      }
    });

    if (this.passedTests === this.totalTests) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏" —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–∞—Ö');
    } else {
      console.log('\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø');
      console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new CampaignDataTester();
  await tester.runAllTests();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
main().catch(console.error);

export { CampaignDataTester, CONFIG, AI_SERVICES };