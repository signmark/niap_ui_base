/**
 * Comprehensive validation of the duplicate prevention and scheduling system
 * Tests all critical components and verifies proper functionality
 */

import fs from 'fs';
import axios from 'axios';

async function validateSystemIntegrity() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í\n');
  
  const results = {
    duplicatePrevention: false,
    statusValidation: false,
    schedulingLogic: false,
    tokenManagement: false,
    quietMode: false
  };

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
  try {
    const schedulerPath = 'server/services/publish-scheduler.ts';
    const schedulerContent = fs.readFileSync(schedulerPath, 'utf8');
    
    const duplicatePreventionChecks = [
      /processedContentIds/,
      /isProcessing.*true/,
      /–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û.*–±–ª–æ–∫–∏—Ä–æ–≤–∫—É/,
      /–ë–õ–û–ö–ò–†–û–í–ö–ê.*–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è/,
      /processingStartTime/
    ];
    
    const passedChecks = duplicatePreventionChecks.filter(check => check.test(schedulerContent));
    results.duplicatePrevention = passedChecks.length >= 4;
    
    console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ ${passedChecks.length}/5 –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
  } catch (error) {
    console.log(`   ‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
  console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤...');
  try {
    const validatorPath = 'server/services/status-validator.ts';
    const validatorContent = fs.readFileSync(validatorPath, 'utf8');
    
    const statusValidationChecks = [
      /–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û.*published.*postUrl/,
      /validatePlatformStatus/,
      /canPublishToPlatform/,
      /postUrl.*trim/
    ];
    
    const passedValidation = statusValidationChecks.filter(check => check.test(validatorContent));
    results.statusValidation = passedValidation.length >= 3;
    
    console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ ${passedValidation.length}/4 –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤`);
  } catch (error) {
    console.log(`   ‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
  try {
    const schedulerPath = 'server/services/publish-scheduler.ts';
    const schedulerContent = fs.readFileSync(schedulerPath, 'utf8');
    
    const schedulingChecks = [
      /platformData\.scheduledAt/,
      /timeUntilPublish/,
      /–ì–û–¢–û–í –ö –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ü–û –í–†–ï–ú–ï–ù–ò/,
      /checkScheduledContent/,
      /publishContent/
    ];
    
    const passedScheduling = schedulingChecks.filter(check => check.test(schedulerContent));
    results.schedulingLogic = passedScheduling.length >= 4;
    
    console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ ${passedScheduling.length}/5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ª–æ–≥–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);
  } catch (error) {
    console.log(`   ‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏
  console.log('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏...');
  try {
    const authPath = 'server/services/directus-auth-manager.ts';
    const authContent = fs.readFileSync(authPath, 'utf8');
    
    const tokenChecks = [
      /adminTokenCache/,
      /tokenExpirationMs/,
      /getSystemToken/,
      /directusAuthManager/
    ];
    
    const passedToken = tokenChecks.filter(check => check.test(authContent));
    results.tokenManagement = passedToken.length >= 3;
    
    console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ ${passedToken.length}/4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏`);
  } catch (error) {
    console.log(`   ‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞
  console.log('5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã...');
  try {
    const schedulerPath = 'server/services/publish-scheduler.ts';
    const validatorPath = 'server/services/status-validator.ts';
    
    const schedulerContent = fs.readFileSync(schedulerPath, 'utf8');
    const validatorContent = fs.readFileSync(validatorPath, 'utf8');
    
    const quietModeChecks = [
      /–¢–∏—Ö–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞/.test(schedulerContent),
      /–í–ê–õ–ò–î–ê–¢–û–† –û–¢–ö–õ–Æ–ß–ï–ù/.test(validatorContent),
      /–¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏/.test(schedulerContent),
      /—Ç–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é/.test(schedulerContent)
    ];
    
    const passedQuiet = quietModeChecks.filter(check => check === true);
    results.quietMode = passedQuiet.length >= 3;
    
    console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ ${passedQuiet.length}/4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞`);
  } catch (error) {
    console.log(`   ‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
  }

  // 6. –¢–µ—Å—Ç API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  console.log('6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...');
  try {
    const response = await axios.get('http://localhost:5000/api/campaigns', {
      timeout: 5000
    });
    
    if (response.status === 200 || response.status === 304) {
      console.log('   ‚úì API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  } catch (error) {
    console.log('   ‚ö† API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:');
  console.log('================================');
  
  Object.entries(results).forEach(([component, status]) => {
    const icon = status ? '‚úÖ' : '‚ùå';
    const componentName = {
      duplicatePrevention: '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤',
      statusValidation: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤',
      schedulingLogic: '–õ–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      tokenManagement: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏',
      quietMode: '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'
    }[component];
    
    console.log(`${icon} ${componentName}: ${status ? '–ò–°–ü–†–ê–í–õ–ï–ù–û' : '–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø'}`);
  });

  const overallScore = Object.values(results).filter(Boolean).length;
  const totalTests = Object.keys(results).length;
  
  console.log(`\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${overallScore}/${totalTests} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
  
  if (overallScore === totalTests) {
    console.log('üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
    console.log('\n–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:');
    console.log('‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π');
    console.log('‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    console.log('‚Ä¢ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã');
    console.log('‚Ä¢ –°–æ–∑–¥–∞–Ω –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤');
    console.log('‚Ä¢ –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è');
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
validateSystemIntegrity().catch(console.error);