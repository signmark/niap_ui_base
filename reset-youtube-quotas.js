/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ quota_exceeded —Å—Ç–∞—Ç—É—Å–æ–≤ YouTube
 * –ù–∞—Ö–æ–¥–∏—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å quota_exceeded —Å—Ç–∞—Ç—É—Å–æ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ pending
 */

import fetch from 'node-fetch';

async function resetYouTubeQuotas() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å YouTube quota_exceeded —Å—Ç–∞—Ç—É—Å–æ–≤...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω
    const adminToken = process.env.DIRECTUS_TOKEN || process.env.DIRECTUS_ADMIN_TOKEN;
    if (!adminToken) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    const directusUrl = process.env.DIRECTUS_URL || 'https://directus.roboflow.tech/';
    const baseUrl = directusUrl.endsWith('/') ? directusUrl.slice(0, -1) : directusUrl;
    
    console.log(`üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Directus: ${baseUrl}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å quota_exceeded —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è YouTube
    const response = await fetch(`${baseUrl}/items/campaign_content?limit=1000`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    const allContent = data.data || [];
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allContent.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    
    let resetCount = 0;
    
    for (const content of allContent) {
      let socialPlatforms = content.social_platforms;
      
      // –ü–∞—Ä—Å–∏–º JSON –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (typeof socialPlatforms === 'string') {
        try {
          socialPlatforms = JSON.parse(socialPlatforms);
        } catch (e) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${content.id}`);
          continue;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º YouTube —Å—Ç–∞—Ç—É—Å
      if (socialPlatforms && socialPlatforms.youtube && socialPlatforms.youtube.status === 'quota_exceeded') {
        console.log(`üé¨ –ö–æ–Ω—Ç–µ–Ω—Ç ${content.id}: –°–±—Ä–∞—Å—ã–≤–∞–µ–º YouTube quota_exceeded`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å YouTube –Ω–∞ pending –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        socialPlatforms.youtube.status = 'pending';
        socialPlatforms.youtube.error = null;
        socialPlatforms.youtube.updatedAt = new Date().toISOString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const updateResponse = await fetch(`${baseUrl}/items/campaign_content/${content.id}`, {
          method: 'PATCH',
          headers: {
            'Authorization': `Bearer ${adminToken}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            social_platforms: JSON.stringify(socialPlatforms)
          })
        });
        
        if (updateResponse.ok) {
          resetCount++;
          console.log(`‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç ${content.id}: YouTube —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω –≤ pending`);
        } else {
          console.log(`‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç ${content.id}: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - ${updateResponse.status}`);
        }
      }
    }
    
    console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${allContent.length}`);
    console.log(`- –°–±—Ä–æ—à–µ–Ω–æ quota_exceeded —Å—Ç–∞—Ç—É—Å–æ–≤: ${resetCount}`);
    console.log(`\nüí° –¢–µ–ø–µ—Ä—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é YouTube –∫–æ–Ω—Ç–µ–Ω—Ç–∞`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ quota_exceeded —Å—Ç–∞—Ç—É—Å–æ–≤:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
resetYouTubeQuotas();