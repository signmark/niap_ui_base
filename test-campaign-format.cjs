/**
 * –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–ø–∞–Ω–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * –ó–∞–ø—É—Å–∫: node test-campaign-format.cjs
 */

const axios = require('axios');
require('dotenv').config();

// ID —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ (–ø–∏—Ç–∞–Ω–∏–µ)
const CAMPAIGN_ID = "46868c44-c6a4-4bed-accf-9ad07bba790e";

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testCases = [
  {
    name: "–ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    text: "<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>\n<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u>\n<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s>\n<code>–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∞</code>\n<a href='https://example.com'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç</a>",
  },
  {
    name: "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    text: "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n<b><i>–ñ–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤</i></b>\n<b><u>–ñ–∏—Ä–Ω—ã–π –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u></b>\n<i><s>–ö—É—Ä—Å–∏–≤–Ω—ã–π –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s></i>",
  },
  {
    name: "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
    text: "<b>–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ –Ω–∞–∏–∑–Ω–∞–Ω–∫—É</b>\n<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>\n<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u>\n<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s>\n<code>–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∞</code>\n<a href='https://example.com'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç</a>\n\n–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n<b><i>–ñ–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤</i></b>\n<b><u>–ñ–∏—Ä–Ω—ã–π –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u></b>\n<i><s>–ö—É—Ä—Å–∏–≤–Ω—ã–π –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s></i>\n\n<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏</b>\n\n<i>–û–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ–± —ç—Ç–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π —Å—Ç–∞—Ç—å–µ. –ú–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å.</i>\n\n–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏, –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–±–∑–∞—Ü–µ–≤ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n–í –∫–æ—Ç–æ—Ä–æ–º –º–æ–≥—É—Ç –±—ã—Ç—å <b>–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏</b> –∏ <i>–≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã</i>.\n\n<a href='https://t.me/your_channel'>–ù–∞—à –∫–∞–Ω–∞–ª</a>\n\nüëç 1",
  },
  {
    name: "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ (–¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è)",
    text: "<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç <i>–∫—É—Ä—Å–∏–≤ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π",
  }
];

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Directus
 * @returns {Promise<string>} –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function getDirectusToken() {
  try {
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Directus
    const authResponse = await axios.post(`${process.env.DIRECTUS_URL}/auth/login`, {
      email: process.env.DIRECTUS_ADMIN_EMAIL,
      password: process.env.DIRECTUS_ADMIN_PASSWORD
    });
    
    return authResponse.data.data.access_token;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ Directus:', error.message);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 * @param {string} title –ó–∞–≥–æ–ª–æ–≤–æ–∫
 * @param {string} text –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
 * @returns {Promise<object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
 */
async function createTestContent(title, text) {
  try {
    const token = await getDirectusToken();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞–º–ø–∞–Ω–∏–∏
    const content = {
      title: title,
      text: text,
      campaign_id: CAMPAIGN_ID,
      social_platforms: ["telegram"]
    };
    
    const response = await axios.post(`${process.env.DIRECTUS_URL}/items/campaign_content`, 
      content,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    return response.data.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç API:', error.response.data);
    }
    throw error;
  }
}

/**
 * –ü—É–±–ª–∏–∫—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ API –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function publishContent(contentId) {
  try {
    const response = await axios.post(`http://localhost:3000/api/content/${contentId}/publish`, {
      platforms: ['telegram']
    });
    
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç API:', error.response.data);
    }
    throw error;
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram
 */
async function runTests() {
  console.log('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HTML-–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –í TELEGRAM –ß–ï–†–ï–ó –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ú–ü–ê–ù–ò–ò ===\n');
  
  let successful = 0;
  let failed = 0;
  
  for (let i = 0; i < testCases.length; i++) {
    const test = testCases[i];
    console.log(`\n[–¢–ï–°–¢ ${i + 1}] ${test.name}`);
    console.log(`–¢–µ–∫—Å—Ç: ${test.text.substring(0, 100)}${test.text.length > 100 ? '...' : ''}`);
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      const title = `–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è #${i + 1}: ${test.name}`;
      const content = await createTestContent(title, test.text);
      console.log(`‚úì –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${content.id}`);
      
      // –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
      const publishResult = await publishContent(content.id);
      console.log(`‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${JSON.stringify(publishResult)}`);
      
      if (publishResult.success) {
        console.log(`‚úì –¢–ï–°–¢ ${i + 1} –ü–†–û–ô–î–ï–ù!`);
        if (publishResult.postUrl) {
          console.log(`  URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${publishResult.postUrl}`);
        }
        successful++;
      } else {
        console.log(`‚úó –¢–ï–°–¢ ${i + 1} –ü–†–û–í–ê–õ–ï–ù: ${publishResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        failed++;
      }
    } catch (error) {
      console.error(`‚úó –¢–ï–°–¢ ${i + 1} –ü–†–û–í–ê–õ–ï–ù —Å –æ—à–∏–±–∫–æ–π: ${error.message}`);
      failed++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < testCases.length - 1) {
      console.log('–û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...');
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }
  
  console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
  console.log(`‚úì –£—Å–ø–µ—à–Ω–æ: ${successful}`);
  console.log(`‚úó –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testCases.length}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
runTests().catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
});