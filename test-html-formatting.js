/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –≤ Telegram
 * –ó–∞–ø—É—Å–∫: node test-html-formatting.js
 */

const axios = require('axios');
require('dotenv').config();

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testCases = [
  {
    name: "–ë–∞–∑–æ–≤—ã–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
    text: "<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> –∏ <i>–∫—É—Ä—Å–∏–≤</i> <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u> <s>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>",
    expectedRendering: true
  },
  {
    name: "–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏",
    text: "<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å <i>–∫—É—Ä—Å–∏–≤–æ–º</i> –≤–Ω—É—Ç—Ä–∏</b>",
    expectedRendering: true
  },
  {
    name: "–ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏",
    text: "–ü–æ—Å–µ—Ç–∏—Ç–µ <a href='https://example.com'>–Ω–∞—à —Å–∞–π—Ç</a> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
    expectedRendering: true
  },
  {
    name: "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ (–¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è)",
    text: "<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç <i>–∫—É—Ä—Å–∏–≤ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π",
    expectedRendering: true
  },
  {
    name: "–°–ø–∏—Å–∫–∏ —Å —ç–º–æ–¥–∑–∏",
    text: "‚Ä¢ üçé –Ø–±–ª–æ–∫–∏\n‚Ä¢ üçå –ë–∞–Ω–∞–Ω—ã\n‚Ä¢ üçá –í–∏–Ω–æ–≥—Ä–∞–¥",
    expectedRendering: true
  },
  {
    name: "–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å–∏–º–≤–æ–ª–æ–≤",
    text: "–°–∏–º–≤–æ–ª—ã < > & –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
    expectedRendering: true
  },
  {
    name: "–§–∏–ª—å—Ç—Ä –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
    text: "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π",
    expectedRendering: true
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
async function sendMessage(text) {
  if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
    console.error("ERROR: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID");
    process.exit(1);
  }

  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à API-–º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  try {
    const response = await axios.post('http://localhost:3000/api/test/telegram-post', {
      text: text,
      token: token,
      chatId: chatId
    });
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞, message_id: ${response.data?.messageId || 'N/A'}`);
    return {
      success: true,
      messageId: response.data?.messageId,
      postUrl: response.data?.postUrl
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${error.message}`);
    if (error.response) {
      console.error(`–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: ${error.response.status}`);
      console.error(`–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data)}`);
    }
    return {
      success: false,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function sanitizeText(text) {
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏
  const unwantedWords = ['–¥–∏—á—å', '–ø–µ–∑–¥—É–ª–∞', '—É–º—Ä–∏', '–Ω–∞—Ö—É–π'];
  let sanitized = text;
  
  unwantedWords.forEach(word => {
    // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏
    const stars = '*'.repeat(word.length);
    sanitized = sanitized.replace(new RegExp(word, 'gi'), stars);
  });
  
  return sanitized;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  console.log("=== –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø HTML-–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –í TELEGRAM ===\n");
  
  let successful = 0;
  let failed = 0;
  
  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`\n[–¢–ï–°–¢ ${i+1}] ${testCase.name}`);
    console.log(`–¢–µ–∫—Å—Ç: ${testCase.text}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const sanitizedText = sanitizeText(testCase.text);
    if (sanitizedText !== testCase.text) {
      console.log(`‚ö†Ô∏è –¢–µ–∫—Å—Ç –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω: ${sanitizedText}`);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const result = await sendMessage(sanitizedText);
    
    if (result.success) {
      console.log(`‚úÖ –¢–ï–°–¢ ${i+1} –ü–†–û–ô–î–ï–ù!`);
      console.log(`–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${result.postUrl || 'N/A'}`);
      successful++;
    } else {
      console.log(`‚ùå –¢–ï–°–¢ ${i+1} –ü–†–û–í–ê–õ–ï–ù: ${result.error}`);
      failed++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram API
    await new Promise(resolve => setTimeout(resolve, 1500));
  }
  
  console.log("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===");
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testCases.length}`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
  process.exit(1);
});