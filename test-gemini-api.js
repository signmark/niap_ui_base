/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ Gemini API
 * 
 * –ó–∞–ø—É—Å–∫: node test-gemini-api.js GEMINI_API_KEY
 * –ü—Ä–∏–º–µ—Ä: node test-gemini-api.js "AIza..."
 */

const https = require('https');

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const apiKey = process.argv[2];

if (!apiKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-gemini-api.js API_KEY');
  console.log('–ü—Ä–∏–º–µ—Ä: node test-gemini-api.js "AIza..."');
  process.exit(1);
}

console.log('üîë API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏');
console.log(`üëÄ –ü–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞ –∫–ª—é—á–∞: ${apiKey.substring(0, 4)}...`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞
function logStep(message) {
  console.log(`\nüìã ${message}`);
}

// –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const prompt = "–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ-—Ä—É—Å—Å–∫–∏";

// –í—ã–∑–æ–≤ API
logStep('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API...');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ gemini-1.5-flash (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
const requestBody = {
  contents: [
    {
      parts: [
        {
          text: prompt
        }
      ]
    }
  ],
  generationConfig: {
    temperature: 0.7,
    maxOutputTokens: 100
  }
};

const requestData = JSON.stringify(requestBody);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ JSON
try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
  JSON.parse(requestData);
  console.log('\n‚úÖ JSON-–∑–∞–ø—Ä–æ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω');
} catch (e) {
  console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:', e.message);
  process.exit(1);
}

// –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º gemini-1.5-flash, —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≤ –ø—Ä–æ–µ–∫—Ç–µ
const options = {
  hostname: 'generativelanguage.googleapis.com',
  path: `/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`,
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(requestData)
  }
};

logStep('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API...');
console.log('URL:', `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey.substring(0, 4)}...`);
console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestBody, null, 2));

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
const req = https.request(options, (res) => {
  console.log(`\nüåê –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
  
  let responseData = '';
  
  res.on('data', (chunk) => {
    responseData += chunk;
  });
  
  res.on('end', () => {
    console.log('\nüìä –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API:', responseData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (res.statusCode === 200) {
      try {
        const parsedData = JSON.parse(responseData);
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        console.log('\n‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω:');
        console.log('üìå –ú–æ–¥–µ–ª—å: gemini-1.5-flash');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const responseText = parsedData.candidates[0].content.parts[0].text;
        console.log('\nüìù –û—Ç–≤–µ—Ç API:');
        console.log('------------------------');
        console.log(responseText);
        console.log('------------------------');
        
        console.log('\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! API –∫–ª—é—á Gemini —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
      } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:', error.message);
        console.log('–ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:', responseData);
      }
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
      console.error('\n‚ùå –û—à–∏–±–∫–∞ API:');
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
        if (responseData && responseData.trim()) {
          const errorData = JSON.parse(responseData);
          if (errorData.error) {
            console.error(`–ö–æ–¥ –æ—à–∏–±–∫–∏: ${errorData.error.code || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${errorData.error.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}`);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –∏–∑-–∑–∞ —Ä–µ–≥–∏–æ–Ω–∞
            if (errorData.error.message && errorData.error.message.includes('User location is not supported')) {
              console.error('\nüì¢ –û–®–ò–ë–ö–ê –†–ï–ì–ò–û–ù–ê: –í–∞—à —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Gemini API.');
              console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://ai.google.dev/available_regions');
              console.error('–†–µ—à–µ–Ω–∏—è:');
              console.error('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω (–°–®–ê, –ï–°)');
              console.error('2. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ä–µ–≥–∏–æ–Ω–µ');
              console.error('3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API (Claude –æ—Ç Anthropic)');
            }
          } else {
            console.error('–û—Ç–≤–µ—Ç API:', errorData);
          }
        } else {
          console.error(`–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${res.statusCode}`);
        }
        
        // –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫
        if (res.statusCode === 400) {
          console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.');
        } else if (res.statusCode === 401) {
          console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ API.');
        } else if (res.statusCode === 403) {
          console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. API –∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É API.');
        } else if (res.statusCode === 429) {
          console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.');
        } else if (res.statusCode >= 500) {
          console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Gemini API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.');
        }
      } catch (e) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ—Ç–≤–µ—Ç–∞ API:', e.message);
        console.error('–ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:', responseData);
      }
    }
  });
});

req.on('error', (error) => {
  console.error('\n‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
  console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
req.write(requestData);
req.end();

logStep('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...');