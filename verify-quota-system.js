/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–≤–æ—Ç YouTube - –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã —Å YouTube –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã
 */

import { storage } from './server/storage.js';

async function verifyQuotaSystem() {
    try {
        console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ö–í–û–¢ YOUTUBE');
        console.log('=' .repeat(50));
        
        const authToken = process.env.DIRECTUS_TOKEN;
        if (!authToken) {
            console.error('‚ùå –ù–µ—Ç DIRECTUS_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Directus API
        console.log('üìã –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã...');
        
        const directusUrl = process.env.DIRECTUS_URL || 'https://directus.roboflow.tech/';
        const response = await fetch(`${directusUrl}items/campaign_content`, {
            headers: {
                'Authorization': `Bearer ${authToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${await response.text()}`);
        }
        
        const result = await response.json();
        const allContent = result.data || [];
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–≤: ${allContent.length}`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç—ã —Å YouTube
        const youtubeContent = allContent.filter(content => {
            if (!content.social_platforms) return false;
            
            const platforms = typeof content.social_platforms === 'string' 
                ? JSON.parse(content.social_platforms) 
                : content.social_platforms;
                
            return platforms && platforms.youtube;
        });
        
        console.log(`üé¨ –ö–æ–Ω—Ç–µ–Ω—Ç–æ–≤ —Å YouTube: ${youtubeContent.length}`);
        console.log('');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
        const statusCounts = {};
        youtubeContent.forEach(content => {
            const platforms = typeof content.social_platforms === 'string' 
                ? JSON.parse(content.social_platforms) 
                : content.social_platforms;
                
            const status = platforms.youtube.status || 'unknown';
            statusCounts[status] = (statusCounts[status] || 0) + 1;
            
            console.log(`üìπ ${content.id} (${content.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'})`);
            console.log(`   –°—Ç–∞—Ç—É—Å: ${status}`);
            console.log(`   –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${content.status}`);
            
            if (platforms.youtube.error) {
                console.log(`   –û—à–∏–±–∫–∞: ${platforms.youtube.error}`);
            }
            
            if (platforms.youtube.lastAttempt) {
                console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: ${platforms.youtube.lastAttempt}`);
            }
            console.log('');
        });
        
        console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–û–í:');
        Object.entries(statusCounts).forEach(([status, count]) => {
            console.log(`   ${status}: ${count} –∫–æ–Ω—Ç–µ–Ω—Ç–æ–≤`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        const scheduledContent = youtubeContent.filter(content => 
            ['scheduled', 'partial'].includes(content.status)
        );
        
        console.log('');
        console.log(`‚è∞ –ö–æ–Ω—Ç–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º: ${scheduledContent.length}`);
        
        scheduledContent.forEach(content => {
            const platforms = typeof content.social_platforms === 'string' 
                ? JSON.parse(content.social_platforms) 
                : content.social_platforms;
                
            const youtubeStatus = platforms.youtube.status;
            const shouldBeSkipped = youtubeStatus === 'quota_exceeded';
            
            console.log(`üìÖ ${content.id} - YouTube —Å—Ç–∞—Ç—É—Å: ${youtubeStatus} ${shouldBeSkipped ? '(–ë–£–î–ï–¢ –ü–†–û–ü–£–©–ï–ù)' : '(–ë–£–î–ï–¢ –û–ë–†–ê–ë–û–¢–ê–ù)'}`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

verifyQuotaSystem();