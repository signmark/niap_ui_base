/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ Directus –≤ –Ω–æ–≤—ã–π
 */

import axios from 'axios';

const OLD_DIRECTUS_URL = 'https://directus.nplanner.ru';
const NEW_DIRECTUS_URL = 'https://directus.roboflow.tech';

// –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_EMAIL = 'lbrspb@gmail.com';
const ADMIN_PASSWORD = 'Qwerty123';

async function authenticateOldServer() {
  try {
    console.log('üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ...');
    const response = await axios.post(`${OLD_DIRECTUS_URL}/auth/login`, {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD
    });
    return response.data.data.access_token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ:', error.response?.data || error.message);
    return null;
  }
}

async function authenticateNewServer() {
  try {
    console.log('üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ...');
    const response = await axios.post(`${NEW_DIRECTUS_URL}/auth/login`, {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD
    });
    return response.data.data.access_token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ:', error.response?.data || error.message);
    return null;
  }
}

async function getRolesFromOldServer(token) {
  try {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
    const response = await axios.get(`${OLD_DIRECTUS_URL}/roles`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    return response.data.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', error.response?.data || error.message);
    return [];
  }
}

async function getRolesFromNewServer(token) {
  try {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π —Å –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
    const response = await axios.get(`${NEW_DIRECTUS_URL}/roles`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    return response.data.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π —Å –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', error.response?.data || error.message);
    return [];
  }
}

async function createRoleOnNewServer(token, roleData) {
  try {
    const cleanRoleData = {
      name: roleData.name,
      icon: roleData.icon,
      description: roleData.description,
      admin_access: roleData.admin_access || false,
      app_access: roleData.app_access || true
    };

    console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ "${roleData.name}" –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ...`);
    const response = await axios.post(`${NEW_DIRECTUS_URL}/roles`, cleanRoleData, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    return response.data.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ "${roleData.name}":`, error.response?.data || error.message);
    return null;
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ
  const oldToken = await authenticateOldServer();
  if (!oldToken) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏.');
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏ –≤—Ä—É—á–Ω—É—é
    const standardRoles = [
      {
        name: 'SMM Manager User',
        icon: 'person',
        description: '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å SMM —Å–∏—Å—Ç–µ–º—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏',
        admin_access: false,
        app_access: true
      },
      {
        name: 'SMM Admin',
        icon: 'admin_panel_settings',
        description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä SMM —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏',
        admin_access: true,
        app_access: true
      },
      {
        name: 'Content Creator',
        icon: 'create',
        description: '–°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        admin_access: false,
        app_access: true
      },
      {
        name: 'Analytics Viewer',
        icon: 'analytics',
        description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        admin_access: false,
        app_access: true
      }
    ];

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
    const newToken = await authenticateNewServer();
    if (!newToken) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏
    const existingRoles = await getRolesFromNewServer(newToken);
    const existingRoleNames = existingRoles.map(role => role.name);

    // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–æ–ª–∏
    for (const role of standardRoles) {
      if (!existingRoleNames.includes(role.name)) {
        await createRoleOnNewServer(newToken, role);
      } else {
        console.log(`‚úÖ –†–æ–ª—å "${role.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }

    console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  const oldRoles = await getRolesFromOldServer(oldToken);
  if (oldRoles.length === 0) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞');
    return;
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${oldRoles.length} —Ä–æ–ª–µ–π –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ`);

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
  const newToken = await authenticateNewServer();
  if (!newToken) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
  const existingRoles = await getRolesFromNewServer(newToken);
  const existingRoleNames = existingRoles.map(role => role.name);

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingRoles.length} —Ä–æ–ª–µ–π –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ\n`);

  // –ö–æ–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏
  let copiedCount = 0;
  for (const role of oldRoles) {
    if (!existingRoleNames.includes(role.name)) {
      const newRole = await createRoleOnNewServer(newToken, role);
      if (newRole) {
        copiedCount++;
      }
    } else {
      console.log(`‚úÖ –†–æ–ª—å "${role.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
  }

  console.log(`\nüéâ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${copiedCount} —Ä–æ–ª–µ–π.`);
}

main().catch(console.error);