/**
 * –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π API-–º–∞—Ä—à—Ä—É—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏
 * 
 * –ó–∞–ø—É—Å–∫: node test-html-publish.cjs
 */

const axios = require('axios');
require('dotenv').config();

// ID –∫–∞–º–ø–∞–Ω–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const CAMPAIGN_ID = "46868c44-c6a4-4bed-accf-9ad07bba790e";

// –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testCases = [
  {
    name: "–ü–æ–ª–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É",
    text: "<b>–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ –Ω–∞–∏–∑–Ω–∞–Ω–∫—É</b>\n\n<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>\n<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u>\n<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s>\n<code>–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∞</code>\n<a href='https://example.com'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç</a>\n\n–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n<b><i>–ñ–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤</i></b>\n<b><u>–ñ–∏—Ä–Ω—ã–π –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u></b>\n<i><s>–ö—É—Ä—Å–∏–≤–Ω—ã–π –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s></i>"
  }
];

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –≤ Telegram
 * @param {string} text –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ 
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
async function testHtmlFormatting(text) {
  try {
    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é...");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–ø–∞–Ω–∏–∏
    const response = await axios.post('http://localhost:5000/api/test/telegram-html', {
      text,
      campaignId: CAMPAIGN_ID
    });
    
    return {
      success: true,
      data: response.data
    };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
    if (error.response) {
      console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
    }
    
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
 */
async function runAllTests() {
  console.log("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HTML-–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –í TELEGRAM ===\n");
  
  let successful = 0;
  let failed = 0;
  
  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`\n[–¢–ï–°–¢ ${i+1}] ${testCase.name}`);
    
    // –ö—Ä–∞—Ç–∫–∏–π –ø–æ–∫–∞–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`–¢–µ–∫—Å—Ç: ${testCase.text.substring(0, 100)}...`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    const result = await testHtmlFormatting(testCase.text);
    
    if (result.success) {
      console.log(`‚úÖ –¢–ï–°–¢ ${i+1} –£–°–ü–ï–®–ï–ù!`);
      if (result.data?.postUrl) {
        console.log(`üîó URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.data.postUrl}`);
      }
      successful++;
    } else {
      console.log(`‚ùå –¢–ï–°–¢ ${i+1} –ü–†–û–í–ê–õ–ï–ù: ${result.error}`);
      failed++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    if (i < testCases.length - 1) {
      console.log("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...");
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  console.log("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===");
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testCases.length}`);
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
console.log("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –≤ Telegram");
runAllTests().catch(error => {
  console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:", error);
});