/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Directus –≤ Telegram
 * —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –∫—ç—à —Ç–æ–∫–µ–Ω–æ–≤ Directus
 * 
 * –í–µ—Ä—Å–∏—è –¥–ª—è ES –º–æ–¥—É–ª–µ–π
 */
import { config } from 'dotenv';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import os from 'os';
import FormData from 'form-data';
import { fileURLToPath } from 'url';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dotenv
config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Directus
const DIRECTUS_URL = process.env.DIRECTUS_URL || 'https://directus.nplanner.ru';
const DIRECTUS_EMAIL = process.env.DIRECTUS_EMAIL;
const DIRECTUS_PASSWORD = process.env.DIRECTUS_PASSWORD;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
const IMAGE_URL = process.env.TEST_IMAGE_URL || 'https://directus.nplanner.ru/assets/3b34be64-9579-4b1d-b4e2-98d3de5c2a14';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authTokens = {
  directus: null,
  expiresAt: 0
};

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω Directus
function isTokenValid() {
  return authTokens.directus && Date.now() < authTokens.expiresAt;
}

// –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Directus
async function getDirectusToken() {
  console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Directus...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
  if (isTokenValid()) {
    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω Directus');
    return authTokens.directus;
  }
  
  try {
    // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
      email: DIRECTUS_EMAIL,
      password: DIRECTUS_PASSWORD
    });
    
    if (response.data && response.data.data && response.data.data.access_token) {
      authTokens.directus = response.data.data.access_token;
      authTokens.expiresAt = Date.now() + (response.data.data.expires * 1000 || 3600000);
      
      console.log('‚úÖ –¢–æ–∫–µ–Ω Directus —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      return authTokens.directus;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Directus: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Directus:', error.message);
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
    return null;
  }
}

// –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
async function downloadImage(imageUrl) {
  console.log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageUrl.substring(0, 50)}...`);
  
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    const headers = {
      'Accept': 'image/*',
      'User-Agent': 'Mozilla/5.0 SMM Planner Bot',
      'Cache-Control': 'no-cache'
    };
    
    // –ï—Å–ª–∏ URL –æ—Ç Directus, –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (imageUrl.includes('directus.nplanner.ru')) {
      const token = await getDirectusToken();
      
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
        console.log('üîë –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Directus');
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Directus, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    console.time('‚è±Ô∏è –í—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    const response = await axios.get(imageUrl, {
      responseType: 'arraybuffer',
      timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      headers: headers
    });
    console.timeEnd('‚è±Ô∏è –í—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const dataSize = response.data.length;
    if (dataSize === 0) {
      throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentType = response.headers['content-type'] || 'image/jpeg';
    
    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${dataSize} –±–∞–π—Ç, —Ç–∏–ø: ${contentType}`);
    
    return {
      buffer: Buffer.from(response.data),
      contentType: contentType
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
    throw error;
  }
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ FormData
async function sendImageToTelegram(imageBuffer, contentType, caption) {
  console.log('üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram...');
  
  if (!TELEGRAM_TOKEN || !TELEGRAM_CHAT_ID) {
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID');
  }
  
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  const tempDir = path.join(os.tmpdir(), 'telegram_test');
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const timestamp = Date.now();
  const randomString = Math.random().toString(36).substring(2, 10);
  const fileExtension = contentType.includes('png') ? 'png' : 'jpg';
  const tempFilePath = path.join(tempDir, `telegram_${timestamp}_${randomString}.${fileExtension}`);
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(tempFilePath, imageBuffer);
    console.log(`üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempFilePath} (${fs.statSync(tempFilePath).size} –±–∞–π—Ç)`);
    
    // –°–æ–∑–¥–∞–µ–º FormData
    const formData = new FormData();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    formData.append('chat_id', TELEGRAM_CHAT_ID);
    
    if (caption) {
      formData.append('caption', caption);
      formData.append('parse_mode', 'HTML');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    const fileStream = fs.createReadStream(tempFilePath);
    formData.append('photo', fileStream, { 
      filename: `image_${timestamp}.${fileExtension}`,
      contentType: contentType
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API
    console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram —á–∞—Ç: ${TELEGRAM_CHAT_ID}`);
    console.time('‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
    
    const baseUrl = 'https://api.telegram.org/bot';
    const response = await axios.post(`${baseUrl}${TELEGRAM_TOKEN}/sendPhoto`, formData, {
      headers: {
        ...formData.getHeaders(),
        'Accept': 'application/json'
      },
      maxContentLength: Infinity,
      maxBodyLength: Infinity,
      timeout: 60000 // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });
    
    console.timeEnd('‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è
    fileStream.destroy();
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try {
      fs.unlinkSync(tempFilePath);
      console.log(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${tempFilePath}`);
    } catch (unlinkError) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${unlinkError}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (response.data && response.data.ok) {
      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: message_id=${response.data.result.message_id}`);
      return response.data;
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram: ${JSON.stringify(response.data)}`);
      throw new Error(`API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${JSON.stringify(response.data)}`);
    }
  } catch (error) {
    // –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if (fs.existsSync(tempFilePath)) {
      try {
        fs.unlinkSync(tempFilePath);
        console.log(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: ${tempFilePath}`);
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
      }
    }
    
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram:', error.message);
    
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
    
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
async function runTest() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Directus –≤ Telegram');
  console.log(`üîó URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${IMAGE_URL}`);
  console.log(`üì± Telegram —á–∞—Ç: ${TELEGRAM_CHAT_ID}`);
  
  try {
    // –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    const { buffer, contentType } = await downloadImage(IMAGE_URL);
    
    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram
    const result = await sendImageToTelegram(
      buffer, 
      contentType, 
      '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å <b>–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π</b> Directus üöÄ\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ESM —Å–∫—Ä–∏–ø—Ç'
    );
    
    console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result.result)}`);
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});