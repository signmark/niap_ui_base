/**
 * –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö API: Unsplash, Pexels, Pixabay
 */

const imageSearchService = require('./server/services/image-search-service');

async function testRealImageSearchFinal() {
  console.log('üîç –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–û–ò–°–ö–ê –†–ï–ê–õ–¨–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô');
  console.log('=' .repeat(70) + '\n');
  
  const testCases = [
    {
      text: 'technology innovation future',
      keywords: ['technology', 'innovation', 'future'],
      category: 'üè¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
    },
    {
      text: 'food cooking delicious',
      keywords: ['food', 'cooking', 'delicious'],
      category: 'üç≥ –ö—É–ª–∏–Ω–∞—Ä–∏—è' 
    },
    {
      text: 'travel nature landscape',
      keywords: ['travel', 'nature', 'landscape'],
      category: 'üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'
    },
    {
      text: 'fitness sport workout',
      keywords: ['fitness', 'sport', 'workout'],
      category: 'üí™ –°–ø–æ—Ä—Ç'
    }
  ];

  const results = [];
  let successCount = 0;
  let apiSuccessCount = 0;
  let fallbackCount = 0;
  let errorCount = 0;

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    
    console.log(`üì∏ –¢–ï–°–¢ ${i + 1}/4: ${testCase.category}`);
    console.log(`   –ó–∞–ø—Ä–æ—Å: "${testCase.text}"`);
    console.log(`   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: [${testCase.keywords.join(', ')}]`);
    
    try {
      const startTime = Date.now();
      const result = await imageSearchService.findAndPrepareImage(testCase.text, testCase.keywords);
      const duration = Date.now() - startTime;
      
      const testResult = {
        testNumber: i + 1,
        category: testCase.category,
        query: testCase.text,
        keywords: testCase.keywords,
        success: result.success,
        size: result.size,
        source: result.source || 'fallback',
        originalUrl: result.originalUrl || '–Ω–µ—Ç URL',
        hasBuffer: !!result.imageBuffer,
        duration: duration
      };
      
      results.push(testResult);
      
      if (result.success) {
        successCount++;
        
        if (result.source && result.source !== 'fallback') {
          apiSuccessCount++;
          console.log(`   ‚úÖ –£–°–ü–ï–•! –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.source.toUpperCase()}`);
          console.log(`   üìä –†–∞–∑–º–µ—Ä: ${(result.size / 1024).toFixed(1)} KB`);
          if (result.originalUrl) {
            console.log(`   üåê URL: ${result.originalUrl.substring(0, 60)}...`);
          }
        } else {
          fallbackCount++;
          console.log(`   ‚ö†Ô∏è  –§–û–õ–õ–ë–≠–ö: 1x1 –ø–∏–∫—Å–µ–ª—å (${result.size} bytes)`);
        }
      } else {
        errorCount++;
        console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
      
      console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
      
    } catch (error) {
      console.error(`   üí• –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: ${error.message}`);
      results.push({
        testNumber: i + 1,
        category: testCase.category,
        query: testCase.text,
        keywords: testCase.keywords,
        error: error.message,
        duration: 0
      });
      errorCount++;
    }
    
    console.log('');
  }
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  console.log('=' .repeat(70));
  console.log(`üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${testCases.length}`);
  console.log(`‚úÖ –û–±—â–∏–π —É—Å–ø–µ—Ö: ${successCount} (${((successCount / testCases.length) * 100).toFixed(1)}%)`);
  console.log(`üé® –†–µ–∞–ª—å–Ω—ã–µ API: ${apiSuccessCount} (${((apiSuccessCount / testCases.length) * 100).toFixed(1)}%)`);
  console.log(`‚ö†Ô∏è  –§–æ–ª–ª–±—ç–∫: ${fallbackCount} (${((fallbackCount / testCases.length) * 100).toFixed(1)}%)`);
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${errorCount} (${((errorCount / testCases.length) * 100).toFixed(1)}%)`);
  
  // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  console.log('\nüèÜ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
  if (apiSuccessCount >= 3) {
    console.log('üåü –û–¢–õ–ò–ß–ù–û! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ');
  } else if (apiSuccessCount >= 2) {
    console.log('üëç –•–û–†–û–®–û! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
  } else if (successCount >= 3) {
    console.log('‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ñ–æ–ª–ª–±—ç–∫–µ');
  } else {
    console.log('‚ùå –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø! –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫');
  }
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
  console.log('-'.repeat(70));
  results.forEach((result, index) => {
    const status = result.error ? '‚ùå –û–®–ò–ë–ö–ê' : 
                   (result.success && result.source !== 'fallback') ? '‚úÖ API' : 
                   result.success ? '‚ö†Ô∏è  –§–û–õ–õ–ë–≠–ö' : 'üí• –°–ë–û–ô';
                   
    console.log(`${index + 1}. ${result.category} - ${status}`);
    console.log(`   "${result.query}"`);
    if (result.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
    } else if (result.source !== 'fallback') {
      console.log(`   ${result.source} (${(result.size / 1024).toFixed(1)} KB, ${result.duration}ms)`);
    } else {
      console.log(`   fallback (${result.size} bytes, ${result.duration}ms)`);
    }
    console.log('');
  });
  
  console.log('üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
  console.log('=' .repeat(70));
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  return {
    totalTests: testCases.length,
    successCount,
    apiSuccessCount,
    fallbackCount,
    errorCount,
    results
  };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if (require.main === module) {
  testRealImageSearchFinal()
    .then(results => {
      console.log('\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
      console.log(`–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ API: ${((results.apiSuccessCount / results.totalTests) * 100).toFixed(1)}%`);
      console.log(`–û–±—â–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: ${((results.successCount / results.totalTests) * 100).toFixed(1)}%`);
      
      process.exit(results.apiSuccessCount >= 2 ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error);
      process.exit(1);
    });
}