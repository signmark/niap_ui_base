/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Vertex AI –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Gemini 2.5
 */

async function testVertexAIAuth() {
  try {
    console.log('=== –¢–µ—Å—Ç Vertex AI –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { vertexAIAuth } = await import('./server/services/vertex-ai-auth.js');
    
    console.log('1. –ü–æ–ª—É—á–µ–Ω–∏–µ Access Token...');
    const accessToken = await vertexAIAuth.getAccessToken();
    
    if (!accessToken) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Access Token');
      return;
    }
    
    console.log('‚úÖ Access Token –ø–æ–ª—É—á–µ–Ω:', accessToken.substring(0, 20) + '...');
    console.log('2. –ü—Ä–æ–µ–∫—Ç ID:', vertexAIAuth.getProjectId());
    console.log('3. –õ–æ–∫–∞—Ü–∏—è:', vertexAIAuth.getLocation());
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º URL –¥–ª—è Gemini 2.5
    const model = 'gemini-2.5-flash-preview-0520';
    const url = vertexAIAuth.getVertexAIUrl(model);
    console.log('4. URL –¥–ª—è Vertex AI:', url);
    
    console.log('\n=== –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Vertex AI ===');
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ Vertex AI
    const requestData = {
      contents: [
        {
          parts: [
            {
              text: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.4,
        topP: 0.9,
        topK: 40,
        maxOutputTokens: 1000
      }
    };
    
    console.log('5. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Vertex AI...');
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestData)
    });
    
    console.log('6. –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞:', errorText);
      return;
    }
    
    const responseData = await response.json();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Vertex AI');
    
    if (responseData.candidates && responseData.candidates.length > 0) {
      const text = responseData.candidates[0].content.parts[0].text;
      console.log('üìù –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:', text);
    }
    
    console.log('\n‚úÖ Vertex AI —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Vertex AI:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testVertexAIAuth();