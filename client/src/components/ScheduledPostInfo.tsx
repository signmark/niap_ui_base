import React from 'react';
import { Badge } from "@/components/ui/badge";
import { Clock, Instagram, AlertTriangle, CheckCircle2, Calendar } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { formatDateWithTimezone } from '@/lib/date-utils';

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç URL Telegram –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param url URL Telegram –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL
 */
const formatTelegramUrl = (url: string | null): string | null => {
  if (!url) return null;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ URL Telegram
  if (!url.includes('t.me')) return url;
  
  try {
    // –†–∞–∑–±–∏—Ä–∞–µ–º URL
    const urlObj = new URL(url);
    const pathParts = urlObj.pathname.split('/').filter(Boolean);
    
    if (pathParts.length === 0) return url;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è URL –≤–∏–¥–∞ https://t.me/-1002302366310
    // –§–æ—Ä–º–∞—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö ID –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø
    if (pathParts[0].startsWith('-100')) {
      // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID —Å -100 –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –≤–∏–¥–µ https://t.me/c/ID_–ë–ï–ó_–ú–ò–ù–£–°_100
      const channelId = pathParts[0].substring(4); // –£–±–∏—Ä–∞–µ–º -100
      const messageId = pathParts.length > 1 ? pathParts[1] : '';
      return `https://t.me/c/${channelId}${messageId ? `/${messageId}` : ''}`;
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö ID
    if (pathParts[0].startsWith('-') && !pathParts[0].startsWith('-100')) {
      // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –≤–∏–¥–µ https://t.me/c/ID_–ë–ï–ó_–ú–ò–ù–£–°–ê
      const channelId = pathParts[0].substring(1); // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Å
      const messageId = pathParts.length > 1 ? pathParts[1] : '';
      return `https://t.me/c/${channelId}${messageId ? `/${messageId}` : ''}`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø—É—Ç–∏ —á–∏—Å–ª–æ–≤—ã–º ID (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π)
    // –ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/2302366310 (—á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞ –±–µ–∑ /c/)
    if (pathParts.length === 1 && pathParts[0].match(/^\d+$/)) {
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ ID (–ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞), –¥–æ–±–∞–≤–ª—è—è –ø—Ä–µ—Ñ–∏–∫—Å /c/
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID –∫–∞–Ω–∞–ª–æ–≤: https://t.me/c/1234567890/123
      // –ù–æ –µ—Å–ª–∏ –Ω–µ—Ç ID –ø–æ—Å—Ç–∞, —Ç–æ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –≤–µ–¥–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª, –∞ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
      if (url.split('/').length <= 4) {

        return `https://t.me/c/${pathParts[0]}`; // –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ URL —Å ID –ø–æ—Å—Ç–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      const messageId = pathParts.length > 1 ? pathParts[1] : '';
      return `https://t.me/c/${pathParts[0]}${messageId ? `/${messageId}` : ''}`;
    }
    
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL-–∞–¥—Ä–µ—Å–æ–≤ Telegram
    // –ü—Ä–∏–º–µ—Ä: https://t.me/c/@ya_delayu_moschno/575 -> https://t.me/ya_delayu_moschno/575
    if (pathParts[0] === 'c') {
      // –ò–º—è –∫–∞–Ω–∞–ª–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ /c/
      let channelName = pathParts.length > 1 ? pathParts[1] : '';
      
      // –ï—Å–ª–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      if (channelName.startsWith('@')) {
        channelName = channelName.substring(1);
      }
      
      // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –∏–º–µ–µ—Ç —á–∏—Å–ª–æ–≤–æ–π ID –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã)
      if (channelName.match(/^\d+$/) && !channelName.startsWith('-100')) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º /c/ –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        return `https://t.me/c/${channelName}${pathParts.length > 2 ? `/${pathParts[2]}` : ''}`;
      }
      
      // –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π - –∫–∞–Ω–∞–ª —Å –∏–º–µ–Ω–µ–º
      return `https://t.me/${channelName}${pathParts.length > 2 ? `/${pathParts[2]}` : ''}`;
    } 
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª @
    if (pathParts[0].startsWith('@')) {
      return `https://t.me/${pathParts[0].substring(1)}${pathParts.length > 1 ? `/${pathParts[1]}` : ''}`;
    }
    
    // –û–±—ã—á–Ω—ã–π URL –¥–ª—è username: https://t.me/username/123
    return `https://t.me/${pathParts[0]}${pathParts.length > 1 ? `/${pathParts[1]}` : ''}`;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ URL Telegram:', error);
    return url;
  }
};

interface SocialPublicationStatus {
  platform: string;
  status: 'pending' | 'published' | 'failed' | 'quota_exceeded';
  publishedAt: string | null;
  postId?: string | null;
  postUrl?: string | null;
  error?: string | null;
}

interface ScheduledPostInfoProps {
  scheduledAt: string | null;
  publishedAt: string | null;
  socialPlatforms?: Record<string, SocialPublicationStatus> | null;
  compact?: boolean;
  className?: string;
}

const platformIcons: Record<string, React.ReactNode> = {
  instagram: <Instagram size={14} />,
  telegram: <span className="text-xs">üì±</span>,
  vk: <span className="text-xs">üí¨</span>,
  facebook: <span className="text-xs">üë•</span>,
  youtube: <span className="text-xs">üì∫</span>,
};

const platformNames: Record<string, string> = {
  instagram: "Instagram",
  telegram: "Telegram",
  vk: "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ",
  facebook: "Facebook",
  youtube: "YouTube",
};

const statusColors: Record<string, string> = {
  pending: "bg-amber-100 text-amber-800 border-amber-200 dark:bg-amber-900/30 dark:text-amber-400 dark:border-amber-800/30",
  published: "bg-green-100 text-green-800 border-green-200 dark:bg-green-900/30 dark:text-green-400 dark:border-green-800/30",
  failed: "bg-red-100 text-red-800 border-red-200 dark:bg-red-900/30 dark:text-red-400 dark:border-red-800/30",
  quota_exceeded: "bg-orange-100 text-orange-800 border-orange-200 dark:bg-orange-900/30 dark:text-orange-400 dark:border-orange-800/30",
};

export function ScheduledPostInfo({ scheduledAt, publishedAt, socialPlatforms, compact = false, className }: ScheduledPostInfoProps) {
  const hasPlatforms = socialPlatforms && Object.keys(socialPlatforms).length > 0;
  const isPublished = publishedAt !== null;
  const isScheduled = scheduledAt !== null && !isPublished;
  
  // If the post isn't scheduled or published, or there are no platforms, return null
  if ((!isScheduled && !isPublished) || !hasPlatforms) {
    return null;
  }
  
  // Convert null to undefined for type safety with Object methods
  const safeSocialPlatforms = socialPlatforms || {};

  // For compact display (inside a card)
  if (compact) {
    return (
      <div className={`flex flex-wrap gap-1.5 mt-2 ${className || ''}`}>
        {isScheduled && (
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Badge variant="outline" className="flex items-center gap-1 px-2 py-0.5 h-5 bg-muted/40">
                  <Clock size={12} />
                  <span className="text-[10px]">
                    {formatDateWithTimezone(scheduledAt)}
                  </span>
                </Badge>
              </TooltipTrigger>
              <TooltipContent side="bottom">
                <p>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {formatDateWithTimezone(scheduledAt)}</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )}
        
        {hasPlatforms && (
          <div className="flex gap-1">
            {Object.entries(safeSocialPlatforms).map(([platform, status]) => {
              const statusIcon = 
                status.status === 'published' ? <CheckCircle2 size={12} /> :
                status.status === 'failed' ? <AlertTriangle size={12} /> :
                <Clock size={12} />;
              
              return (
                <TooltipProvider key={platform}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Badge 
                        variant="outline" 
                        className={`flex items-center gap-1 px-1.5 py-0.5 h-5 ${
                          statusColors[status.status] || "bg-muted/40"
                        }`}
                      >
                        {platformIcons[platform] || platform.substring(0, 1).toUpperCase()}
                        {statusIcon}
                      </Badge>
                    </TooltipTrigger>
                    <TooltipContent side="bottom">
                      <p className="font-medium">{platformNames[platform] || platform}</p>
                      <p className="text-xs">
                        {status.status === 'published' 
                          ? `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ${formatDateWithTimezone(status.publishedAt)}`
                          : status.status === 'failed'
                            ? status.error 
                              ? `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: ${status.error}`
                              : '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å'
                            : '–û–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
                        }
                      </p>
                      {status.postUrl && (
                        <p className="text-xs mt-1">
                          <a 
                            href={platform === 'telegram' ? formatTelegramUrl(status.postUrl!) || status.postUrl : status.postUrl} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="text-primary underline"
                          >
                            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                          </a>
                        </p>
                      )}
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              );
            })}
          </div>
        )}
      </div>
    );
  }
  
  // Full display (for details view)
  return (
    <div className={`space-y-3 mt-4 ${className || ''}`}>
      <h4 className="text-sm font-medium">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</h4>
      
      {isScheduled && (
        <div className="flex items-center gap-2 text-sm">
          <Calendar className="text-muted-foreground" size={16} />
          <span>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {formatDateWithTimezone(scheduledAt)}</span>
        </div>
      )}
      
      {hasPlatforms && (
        <div className="space-y-2">
          <h5 className="text-xs font-medium text-muted-foreground">–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:</h5>
          <div className="grid gap-2">
            {Object.entries(safeSocialPlatforms).map(([platform, status]) => (
              <div 
                key={platform} 
                className={`flex items-center justify-between p-2 rounded-md border ${
                  statusColors[status.status] || "bg-muted/20"
                }`}
              >
                <div className="flex items-center gap-2">
                  <div className="w-6 h-6 flex items-center justify-center">
                    {platformIcons[platform] || platform.substring(0, 1).toUpperCase()}
                  </div>
                  <span>{platformNames[platform] || platform}</span>
                </div>
                <div className="flex items-center gap-1.5">
                  <span className="text-xs">
                    {status.status === 'published' 
                      ? `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ${formatDateWithTimezone(status.publishedAt)}`
                      : status.status === 'failed'
                        ? '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'
                        : status.status === 'quota_exceeded'
                          ? '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API'
                          : status.status === 'pending'
                            ? '–û–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
                            : status.status === 'scheduled'
                              ? '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
                              : '–û–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
                    }
                  </span>
                  {status.status === 'published' ? (
                    <CheckCircle2 size={14} className="text-green-500" />
                  ) : status.status === 'failed' ? (
                    status.error ? (
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger>
                            <AlertTriangle size={14} className="text-red-500" />
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>{status.error}</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    ) : (
                      <AlertTriangle size={14} className="text-red-500" />
                    )
                  ) : status.status === 'quota_exceeded' ? (
                    status.error ? (
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger>
                            <AlertTriangle size={14} className="text-orange-500" />
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>{status.error}</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    ) : (
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger>
                            <AlertTriangle size={14} className="text-orange-500" />
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    )
                  ) : (
                    <Clock size={14} className="text-amber-500" />
                  )}
                </div>
              </div>
            ))}
          </div>
          
          {/* Links to published posts if available */}
          {Object.values(safeSocialPlatforms).some(status => status.postUrl) && (
            <div className="mt-2">
              <h5 className="text-xs font-medium text-muted-foreground mb-1">–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</h5>
              <div className="flex flex-wrap gap-2">
                {Object.entries(safeSocialPlatforms)
                  .filter(([_, status]) => status.postUrl)
                  .map(([platform, status]) => (
                    <a 
                      key={platform}
                      href={platform === 'telegram' ? formatTelegramUrl(status.postUrl!) || status.postUrl! : status.postUrl!} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="text-xs text-primary underline flex items-center gap-1"
                    >
                      {platformIcons[platform] || platform.substring(0, 1).toUpperCase()}
                      <span>{platformNames[platform] || platform}</span>
                    </a>
                  ))
                }
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}