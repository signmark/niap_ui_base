import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { CheckIcon, Cross2Icon, ImageIcon, VideoIcon, ColorWheelIcon, InfoCircledIcon } from '@radix-ui/react-icons';
import { apiRequest } from '@/lib/queryClient';
import { Loader2, BarChart2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface MediaAnalysisResult {
  mediaUrl: string;
  mediaType: 'image' | 'video';
  objects?: string[];
  textContent?: string[];
  colors?: string[];
  composition?: string;
  sentiment?: 'positive' | 'neutral' | 'negative';
  duration?: number;
  keyScenes?: Array<{ timestamp: number; description: string }>;
  audio?: {
    hasMusic: boolean;
    hasSpeech: boolean;
    speechText?: string;
  };
  engagement?: number;
  timestamp: Date;
  description?: string;
}

interface MediaAnalysisPanelProps {
  mediaUrl?: string;
  trendId?: string;
  onAnalysisComplete?: (result: MediaAnalysisResult) => void;
}

export const MediaAnalysisPanel: React.FC<MediaAnalysisPanelProps> = ({
  mediaUrl,
  trendId,
  onAnalysisComplete
}) => {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const { toast } = useToast();
  
  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const { isLoading, data, error, refetch } = useQuery({
    queryKey: ['mediaAnalysis', mediaUrl],
    queryFn: async () => {
      if (!mediaUrl) return null;
      
      const params = new URLSearchParams();
      params.append('mediaUrl', mediaUrl);
      
      if (trendId) {
        params.append('trendId', trendId);
      }
      
      try {
        console.log('–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è URL:', mediaUrl);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        toast({
          title: '–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω',
          description: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.',
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        console.log(`üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞: ${mediaUrl?.substring(0, 50)}..., trendId: ${trendId || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        const response = await apiRequest(`/api/media-analysis?${params.toString()}`, {
          method: 'GET',
          headers: {
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        });
        
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏–∞:`, {
          success: !!response?.success,
          hasResult: !!response?.result,
          mediaType: response?.result?.mediaType,
        });
        
        if (response.result) {
          // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
          if (onAnalysisComplete) {
            onAnalysisComplete(response.result);
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ø–µ—à–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
          toast({
            title: '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
            description: '–ú–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.',
            variant: 'default'
          });
        } else if (response.error) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –æ—Ç–≤–µ—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
          console.error('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response.error);
          toast({
            title: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
            description: response.error,
            variant: 'destructive'
          });
        }
        
        return response;
      } catch (error) {
        console.error('Media analysis error:', error);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        let errorType = 'unknown';
        let errorDetails = {};
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        const anyError = error as any;
        if (anyError.response) {
          // –û—à–∏–±–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
          errorType = 'api';
          errorDetails = {
            status: anyError.response.status,
            statusText: anyError.response.statusText,
            data: anyError.response.data,
            headers: anyError.response.headers
          };
          console.error('–û—à–∏–±–∫–∞ API:', errorDetails);
        } else if (anyError.request) {
          // –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
          errorType = 'network';
          errorDetails = {
            readyState: anyError.request.readyState,
            status: anyError.request.status,
            statusText: anyError.request.statusText,
            responseType: anyError.request.responseType
          };
          console.error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorDetails);
        } else if (anyError.name === 'AbortError') {
          // –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
          errorType = 'timeout';
          errorDetails = {
            message: anyError.message,
            name: anyError.name
          };
          console.error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:', errorDetails);
        } else {
          // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
          errorType = 'other';
          errorDetails = {
            message: anyError.message,
            name: anyError.name,
            stack: anyError.stack?.substring(0, 200)
          };
          console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', errorDetails);
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
        console.error(`üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏–∞:`, {
          errorType,
          mediaUrl: mediaUrl?.substring(0, 50),
          trendId,
          online: navigator.onLine,
          time: new Date().toISOString(),
          ...errorDetails
        });
        
        throw error;
      }
    },
    enabled: false, // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    retry: 2 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  });
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
  const showError = (error: any) => {
    let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç';
    
    if (error?.message) {
      errorMessage += `: ${error.message}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.error(`üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏–∑–∞:`, {
      error: error?.message,
      errorCode: error?.code,
      errorName: error?.name,
      errorMessage,
      errorType: error?.constructor?.name,
      responseStatus: error?.response?.status,
      responseData: error?.response?.data,
      mediaUrl: mediaUrl?.substring(0, 50),
      trendId,
      time: new Date().toISOString(),
      online: navigator.onLine,
      stack: error?.stack?.substring(0, 200)
    });
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (error?.code === 'ECONNABORTED' || error?.message?.includes('timeout')) {
      errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π URL.';
      console.warn(`üìä –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞:`, { 
        mediaUrl: mediaUrl?.substring(0, 50),
        time: new Date().toISOString(),
        online: navigator.onLine
      });
    } else if (error?.response?.status === 401 || error?.response?.status === 403) {
      errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞.';
      console.warn(`üìä –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:`, { 
        responseStatus: error?.response?.status,
        responseData: error?.response?.data,
        tokenExists: !!localStorage.getItem('authToken')
      });
    } else if (error?.message?.includes('Network Error') || !navigator.onLine) {
      errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      console.warn(`üìä –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º:`, { 
        online: navigator.onLine,
        error: error?.message,
        time: new Date().toISOString()
      });
    } else if (error?.response?.data?.missingApiKey) {
      errorMessage = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á FAL AI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Directus.';
      console.warn(`üìä –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á:`, {
        service: 'FAL AI',
        userId: localStorage.getItem('userId')?.substring(0, 8)
      });
    }
    
    toast({
      title: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
      description: errorMessage,
      variant: 'destructive'
    });
  };
  
  // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const startAnalysis = async () => {
    try {
      if (!mediaUrl) {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: 'URL –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω',
          variant: 'destructive'
        });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FAL AI API –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–∞
      const falApiKeyAvailable = await fetch('/api/check-fal-ai-key', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`,
          'Content-Type': 'application/json'
        }
      })
      .then(res => res.json())
      .then(data => data.available)
      .catch(error => {
        console.warn(`üìä –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞ FAL AI:`, {
          error: error?.message,
          time: new Date().toISOString()
        });
        return false;
      });
      
      if (!falApiKeyAvailable) {
        toast({
          title: '–¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á',
          description: '–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á FAL AI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Directus.',
          variant: 'destructive'
        });
        
        console.warn(`üìä –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á FAL AI:`, {
          userId: localStorage.getItem('userId')?.substring(0, 8),
          time: new Date().toISOString()
        });
        
        return;
      }
      
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–∞
      console.log(`üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∞–ª–∏–∑–∞:`, {
        mediaUrl: mediaUrl?.substring(0, 50),
        trendId,
        timestamp: new Date().toISOString(),
        navigator: {
          onLine: navigator.onLine,
          userAgent: navigator.userAgent.substring(0, 50)
        },
        authState: {
          hasTokenInStorage: !!localStorage.getItem('authToken')
        },
        screenSize: {
          width: window.innerWidth,
          height: window.innerHeight
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
      try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ URL
        toast({
          title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ URL',
          description: '–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞...',
        });
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const response = await fetch(mediaUrl, { 
          method: 'HEAD',
          mode: 'no-cors', // –ò—Å–ø–æ–ª—å–∑—É–µ–º no-cors –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
          cache: 'no-cache',
          headers: {
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        }).catch((fetchError) => {
          console.warn(`üìä –û—à–∏–±–∫–∞ –ø—Ä–∏ fetch –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL:`, {
            error: fetchError?.message,
            type: fetchError?.constructor?.name,
            mediaUrl: mediaUrl?.substring(0, 50),
            time: new Date().toISOString(),
            online: navigator.onLine
          });
          return null;
        });
        
        // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if (!response) {
          console.warn(`üìä –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑`, {
            mediaUrl: mediaUrl?.substring(0, 50),
            time: new Date().toISOString()
          });
          toast({
            title: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
            description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ê–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ç—Ä—É–¥–Ω—ë–Ω.'
          });
        } else {
          console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:`, {
            status: response.status || 'unknown (no-cors)',
            mediaUrl: mediaUrl?.substring(0, 50),
            type: mediaUrl.includes('.mp4') || mediaUrl.includes('video') ? 'video' : 'image'
          });
        }
      } catch (urlCheckError) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑
        console.warn(`üìä –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞:`, {
          error: (urlCheckError as Error)?.message,
          type: (urlCheckError as Error)?.constructor?.name,
          stack: (urlCheckError as Error)?.stack?.substring(0, 200),
          mediaUrl: mediaUrl?.substring(0, 50)
        });
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
      toast({
        title: '–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞',
        description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞...',
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
      console.log(`üìä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ React Query:`, {
        mediaUrl: mediaUrl?.substring(0, 50),
        trendId,
        time: new Date().toISOString(),
        queryKey: ['mediaAnalysis', mediaUrl?.substring(0, 20)],
      });
      
      const result = await refetch();
      
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞:`, {
        success: !!result.data?.success,
        hasResult: !!result.data?.result,
        mediaType: result.data?.result?.mediaType,
        hasError: !!result.error,
        timeCompleted: new Date().toISOString()
      });
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      setIsDialogOpen(true);
    } catch (error) {
      console.error(`üìä –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–µ–¥–∏–∞:`, {
        error: (error as Error)?.message,
        type: (error as Error)?.constructor?.name,
        stack: (error as Error)?.stack?.substring(0, 200),
        mediaUrl: mediaUrl?.substring(0, 50),
        trendId,
        time: new Date().toISOString(),
        online: navigator.onLine,
        userAgent: navigator.userAgent.substring(0, 50)
      });
      showError(error);
    }
  };
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
  const getSentimentLabel = (sentiment?: 'positive' | 'neutral' | 'negative') => {
    switch (sentiment) {
      case 'positive':
        return { label: '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π', color: 'bg-green-500' };
      case 'negative':
        return { label: '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π', color: 'bg-red-500' };
      case 'neutral':
      default:
        return { label: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', color: 'bg-gray-500' };
    }
  };
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
  const getCompositionLabel = (composition?: string) => {
    switch (composition) {
      case 'rule_of_thirds':
        return '–ü—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π';
      case 'golden_ratio':
        return '–ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ';
      case 'balanced':
        return '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è';
      case 'dynamic':
        return '–î–∏–Ω–∞–º–∏—á–Ω–∞—è';
      default:
        return composition || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞';
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
  const detectMediaType = (url?: string): 'video' | 'image' => {
    if (!url) return 'image';
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
    const videoExtensions = ['.mp4', '.mov', '.avi', '.webm', '.mkv', '.wmv', '.flv', '.mpeg', '.3gp'];
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –≤–∏–¥–µ–æ
    const videoKeywords = ['video', '–≤–∏–¥–µ–æ', 'movie', '—Ñ–∏–ª—å–º', 'watch', 'play'];
    // –î–æ–º–µ–Ω—ã –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥–æ–≤
    const videoHosts = ['youtube.com', 'youtu.be', 'vimeo.com', 'tiktok.com', 'rutube.ru', 'vk.com/video'];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const hasVideoExtension = videoExtensions.some(ext => url.toLowerCase().includes(ext));
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ URL
    const hasVideoKeyword = videoKeywords.some(keyword => url.toLowerCase().includes(keyword));
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥–∞
    const isVideoHost = videoHosts.some(host => url.toLowerCase().includes(host));
    
    // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∏–¥–µ–æ, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –≤–∏–¥–µ–æ
    return (hasVideoExtension || hasVideoKeyword || isVideoHost) ? 'video' : 'image';
  };
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const detectedMediaType = detectMediaType(mediaUrl);
  
  // –ï—Å–ª–∏ mediaUrl –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
  if (!mediaUrl) {
    return (
      <Card className="w-full">
        <CardHeader>
          <CardTitle>–ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-4">
            <p className="text-muted-foreground">–£–∫–∞–∂–∏—Ç–µ URL –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
          </div>
        </CardContent>
      </Card>
    );
  }
  
  return (
    <>
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="flex items-center">
            {detectedMediaType === 'video' ? (
              <VideoIcon className="mr-2" />
            ) : (
              <ImageIcon className="mr-2" />
            )}
            –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="relative w-full h-48 overflow-hidden rounded-md">
              {detectedMediaType === 'video' ? (
                <video 
                  src={mediaUrl} 
                  className="w-full h-full object-cover"
                  controls
                  onError={(e) => {
                    console.warn(`üìä –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ –ø—Ä–µ–≤—å—é:`, {
                      mediaUrl: mediaUrl?.substring(0, 50),
                      time: new Date().toISOString(),
                      browser: navigator.userAgent.substring(0, 50)
                    });
                    // –¢–∏—Ö–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–æ–ª—å–∫–æ –ª–æ–≥–≥–∏—Ä—É–µ–º
                  }}
                />
              ) : (
                <img 
                  src={mediaUrl} 
                  alt="–ú–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞" 
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    console.warn(`üìä –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–µ–≤—å—é:`, {
                      mediaUrl: mediaUrl?.substring(0, 50),
                      time: new Date().toISOString(),
                      browser: navigator.userAgent.substring(0, 50)
                    });
                    // –¢–∏—Ö–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–æ–ª—å–∫–æ –ª–æ–≥–≥–∏—Ä—É–µ–º
                  }}
                />
              )}
            </div>
            
            <Button 
              onClick={startAnalysis} 
              disabled={isLoading}
              className="w-full"
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...
                </>
              ) : (
                <>
                  <BarChart2 className="mr-2 h-4 w-4" />
                  –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
      
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞</DialogTitle>
            <DialogDescription>
              –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞
            </DialogDescription>
          </DialogHeader>
          
          {isLoading ? (
            <div className="flex justify-center items-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <span className="ml-2">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç...</span>
            </div>
          ) : error ? (
            <div className="text-center py-4 text-destructive">
              <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
              <p className="text-sm mt-2">
                {(error as any)?.response?.data?.error || 
                 (error as Error)?.message || 
                 "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}
              </p>
              {(error as any)?.response?.data?.missingApiKey ? (
                <div className="mt-4 p-3 bg-amber-50 dark:bg-amber-950 border border-amber-200 dark:border-amber-800 rounded-md text-amber-800 dark:text-amber-200 text-sm">
                  <p className="font-medium">–¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á FAL AI</p>
                  <p className="mt-1">–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á FAL AI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Directus.</p>
                </div>
              ) : (
                <Button 
                  variant="outline" 
                  onClick={() => refetch()}
                  className="mt-2"
                >
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </Button>
              )}
            </div>
          ) : data?.result ? (
            <div className="space-y-4">
              {/* –ü—Ä–µ–≤—å—é –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
              <div className="relative w-full h-64 overflow-hidden rounded-md">
                {data.result.mediaType === 'video' ? (
                  <video 
                    src={data.result.mediaUrl} 
                    className="w-full h-full object-cover"
                    controls
                    onError={(e) => {
                      console.error(`üìä –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:`, {
                        error: e,
                        mediaUrl: data.result.mediaUrl?.substring(0, 50),
                        time: new Date().toISOString(),
                        type: 'video_loading_error',
                        browser: navigator.userAgent.substring(0, 50)
                      });
                      toast({
                        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ',
                        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.',
                        variant: 'destructive'
                      });
                    }}
                  />
                ) : (
                  <img 
                    src={data.result.mediaUrl} 
                    alt="–ú–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç" 
                    className="w-full h-full object-cover"
                    onError={(e) => {
                      console.error(`üìä –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, {
                        error: e,
                        mediaUrl: data.result.mediaUrl?.substring(0, 50),
                        time: new Date().toISOString(), 
                        type: 'image_loading_error',
                        browser: navigator.userAgent.substring(0, 50)
                      });
                      toast({
                        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.',
                        variant: 'destructive'
                      });
                    }}
                  />
                )}
              </div>
              
              <Separator />
              
              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h3 className="text-lg font-medium mb-2">–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                  
                  <div className="space-y-2">
                    <div className="flex items-center">
                      <span className="text-muted-foreground w-32">–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</span>
                      <Badge variant="outline">
                        {data.result.mediaType === 'video' ? '–í–∏–¥–µ–æ' : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
                      </Badge>
                    </div>
                    
                    {data.result.mediaType === 'video' && data.result.duration && (
                      <div className="flex items-center">
                        <span className="text-muted-foreground w-32">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                        <span>{Math.floor(data.result.duration / 60)}:{(data.result.duration % 60).toString().padStart(2, '0')}</span>
                      </div>
                    )}
                    
                    <div className="flex items-center">
                      <span className="text-muted-foreground w-32">–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω:</span>
                      <Badge className={getSentimentLabel(data.result.sentiment).color}>
                        {getSentimentLabel(data.result.sentiment).label}
                      </Badge>
                    </div>
                    
                    {data.result.mediaType === 'image' && data.result.composition && (
                      <div className="flex items-center">
                        <span className="text-muted-foreground w-32">–ö–æ–º–ø–æ–∑–∏—Ü–∏—è:</span>
                        <Badge variant="outline">{getCompositionLabel(data.result.composition)}</Badge>
                      </div>
                    )}
                  </div>
                </div>
                
                {/* –û–±—ä–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏/–≤–∏–¥–µ–æ */}
                <div>
                  <h3 className="text-lg font-medium mb-2">–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã</h3>
                  {data.result.objects && data.result.objects.length > 0 ? (
                    <div className="flex flex-wrap gap-1">
                      {data.result.objects.map((obj: string, index: number) => (
                        <Badge key={index} variant="secondary">{obj}</Badge>
                      ))}
                    </div>
                  ) : (
                    <p className="text-muted-foreground">–û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</p>
                  )}
                </div>
              </div>
              
              <Separator />
              
              {/* –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ */}
              {data.result.colors && data.result.colors.length > 0 && (
                <div>
                  <h3 className="text-lg font-medium mb-2">–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞</h3>
                  <div className="flex flex-wrap gap-2">
                    {data.result.colors.map((color: string, index: number) => (
                      <div key={index} className="flex flex-col items-center">
                        <div 
                          className="w-8 h-8 rounded-full" 
                          style={{ backgroundColor: color }}
                        />
                        <span className="text-xs mt-1">{color}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* –¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ */}
              {data.result.textContent && data.result.textContent.length > 0 && (
                <div>
                  <h3 className="text-lg font-medium mb-2">–¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏</h3>
                  <div className="bg-muted p-2 rounded-md">
                    {data.result.textContent.map((text: string, index: number) => (
                      <p key={index}>{text}</p>
                    ))}
                  </div>
                </div>
              )}
              
              {/* –ö–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã –≤–∏–¥–µ–æ */}
              {data.result.mediaType === 'video' && data.result.keyScenes && data.result.keyScenes.length > 0 && (
                <div>
                  <h3 className="text-lg font-medium mb-2">–ö–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã</h3>
                  <div className="space-y-2">
                    {data.result.keyScenes.map((scene: { timestamp: number; description: string }, index: number) => (
                      <div key={index} className="flex items-start space-x-2 border p-2 rounded-md">
                        <span className="text-muted-foreground whitespace-nowrap">
                          {Math.floor(scene.timestamp / 60)}:{(scene.timestamp % 60).toString().padStart(2, '0')}
                        </span>
                        <p>{scene.description}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* –ê—É–¥–∏–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–ª—è –≤–∏–¥–µ–æ) */}
              {data.result.mediaType === 'video' && data.result.audio && (
                <div>
                  <h3 className="text-lg font-medium mb-2">–ê—É–¥–∏–æ –∞–Ω–∞–ª–∏–∑</h3>
                  <div className="grid grid-cols-2 gap-2">
                    <div className="flex items-center space-x-2">
                      <span className="text-muted-foreground">–ú—É–∑—ã–∫–∞:</span>
                      {data.result.audio.hasMusic ? (
                        <CheckIcon className="text-green-500" />
                      ) : (
                        <Cross2Icon className="text-red-500" />
                      )}
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-muted-foreground">–†–µ—á—å:</span>
                      {data.result.audio.hasSpeech ? (
                        <CheckIcon className="text-green-500" />
                      ) : (
                        <Cross2Icon className="text-red-500" />
                      )}
                    </div>
                  </div>
                  {data.result.audio.hasSpeech && data.result.audio.speechText && (
                    <div className="mt-2">
                      <Label>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</Label>
                      <div className="bg-muted p-2 rounded-md mt-1">
                        <p>{data.result.audio.speechText}</p>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          ) : (
            <div className="text-center py-4">
              <p className="text-muted-foreground">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default MediaAnalysisPanel;