import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Loader2, Youtube, ExternalLink, CheckCircle, User, Users, Eye } from 'lucide-react';

interface YouTubeChannelInfo {
  channelId: string;
  channelTitle: string;
  channelDescription: string;
  thumbnails: any;
  subscriberCount: string;
  viewCount: string;
  videoCount: string;
  publishedAt: string;
}

interface YouTubeSetupWizardProps {
  campaignId: string;
  initialSettings?: any;
  onComplete: (data: { 
    channelId: string; 
    channelTitle: string;
    accessToken: string;
    refreshToken: string;
    channelInfo: YouTubeChannelInfo;
  }) => void;
}

export function YouTubeSetupWizard({ campaignId, initialSettings, onComplete }: YouTubeSetupWizardProps) {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [step, setStep] = useState(1);
  const [channelInfo, setChannelInfo] = useState<YouTubeChannelInfo | null>(null);
  const [authTokens, setAuthTokens] = useState<{ accessToken: string; refreshToken: string } | null>(null);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–∞—Å—Ç–µ—Ä–∞
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ OAuth callback
    const oauthTokens = localStorage.getItem('youtubeOAuthTokens');
    let freshTokens = null;
    
    if (oauthTokens) {
      try {
        const tokens = JSON.parse(oauthTokens);
        // –¢–æ–∫–µ–Ω—ã —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
        if (Date.now() - tokens.timestamp < 5 * 60 * 1000) {
          freshTokens = tokens;
          console.log('üÜï [YouTube Wizard] Found fresh OAuth tokens from callback:', {
            hasCampaignId: !!tokens.campaignId,
            campaignId: tokens.campaignId || 'not specified'
          });
          localStorage.removeItem('youtubeOAuthTokens'); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        }
      } catch (e) {
        console.error('‚ùå [YouTube Wizard] Error parsing OAuth tokens:', e);
        localStorage.removeItem('youtubeOAuthTokens');
      }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const tokensToUse = freshTokens || initialSettings?.youtube;
    
    if (tokensToUse?.accessToken) {
      console.log('üîÑ [YouTube Wizard] Loading YouTube settings...', {
        source: freshTokens ? 'fresh OAuth' : 'existing settings',
        hasAccessToken: !!tokensToUse.accessToken,
        hasChannelId: !!tokensToUse.channelId
      });
      
      setAuthTokens({
        accessToken: tokensToUse.accessToken,
        refreshToken: tokensToUse.refreshToken || ''
      });
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å channelId –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º OAuth
      if (initialSettings?.youtube?.channelId && !freshTokens) {
        setStep(3);
        fetchChannelInfo(tokensToUse.accessToken);
      } else {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–µ–∂–∏–µ —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç channelId, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        setStep(2);
        fetchChannelInfo(tokensToUse.accessToken, {
          accessToken: tokensToUse.accessToken,
          refreshToken: tokensToUse.refreshToken || ''
        });
      }
    }
  }, [initialSettings]);

  const handleOAuthStart = async () => {
    setIsLoading(true);
    try {
      console.log('üöÄ [YouTube Wizard] Starting OAuth process...');
      
      const response = await fetch(`/api/youtube/auth/start`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ campaignId })
      });
      
      if (!response.ok) {
        throw new Error(`OAuth start failed: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.success && data.authUrl) {
        console.log('‚úÖ [YouTube Wizard] Opening OAuth popup window...');
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º popup –æ–∫–Ω–æ –¥–ª—è OAuth
        const popup = window.open(
          data.authUrl,
          'youtube-oauth',
          'width=600,height=700,scrollbars=yes,resizable=yes,status=yes,location=yes,toolbar=no,menubar=no'
        );
        
        if (!popup) {
          throw new Error('Popup window was blocked. Please allow popups for this site.');
        }
        
        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è OAuth –≤ popup
        const checkClosed = setInterval(() => {
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å popup –æ–∫–Ω–∞
            if (popup.closed) {
              clearInterval(checkClosed);
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω—ã –≤ localStorage
              const oauthTokens = localStorage.getItem('youtubeOAuthTokens');
              if (oauthTokens) {
                try {
                  const tokens = JSON.parse(oauthTokens);
                  console.log('üéâ [YouTube Wizard] OAuth completed successfully in popup');
                  
                  setAuthTokens({
                    accessToken: tokens.accessToken,
                    refreshToken: tokens.refreshToken
                  });
                  
                  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                  fetchChannelInfo(tokens.accessToken, {
                    accessToken: tokens.accessToken,
                    refreshToken: tokens.refreshToken
                  });
                  
                  // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ localStorage
                  localStorage.removeItem('youtubeOAuthTokens');
                  setIsLoading(false);
                } catch (e) {
                  console.error('‚ùå [YouTube Wizard] Error parsing OAuth tokens:', e);
                  setIsLoading(false);
                  toast({
                    title: "–û—à–∏–±–∫–∞",
                    description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    variant: "destructive"
                  });
                }
              } else {
                console.log('‚ö†Ô∏è [YouTube Wizard] OAuth popup closed without tokens');
                setIsLoading(false);
                toast({
                  title: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                  description: "OAuth –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤",
                  variant: "destructive"
                });
              }
            }
          } catch (error) {
            // Cross-Origin-Opener-Policy –æ—à–∏–±–∫–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const oauthTokens = localStorage.getItem('youtubeOAuthTokens');
            if (oauthTokens) {
              clearInterval(checkClosed);
              try {
                const tokens = JSON.parse(oauthTokens);
                console.log('üéâ [YouTube Wizard] OAuth completed successfully in popup');
                
                setAuthTokens({
                  accessToken: tokens.accessToken,
                  refreshToken: tokens.refreshToken
                });
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                fetchChannelInfo(tokens.accessToken, {
                  accessToken: tokens.accessToken,
                  refreshToken: tokens.refreshToken
                });
                
                // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ localStorage
                localStorage.removeItem('youtubeOAuthTokens');
                setIsLoading(false);
              } catch (e) {
                console.error('‚ùå [YouTube Wizard] Error parsing OAuth tokens:', e);
                setIsLoading(false);
                toast({
                  title: "–û—à–∏–±–∫–∞",
                  description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                  variant: "destructive"
                });
              }
            }
          }
        }, 1000);
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è popup (10 –º–∏–Ω—É—Ç)
        setTimeout(() => {
          if (!popup.closed) {
            popup.close();
            clearInterval(checkClosed);
            setIsLoading(false);
            toast({
              title: "–¢–∞–π–º–∞—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
              description: "OAuth –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
              variant: "destructive"
            });
          }
        }, 10 * 60 * 1000);
        
      } else {
        throw new Error(data.error || 'Failed to get authorization URL');
      }
    } catch (error: any) {
      console.error('‚ùå [YouTube Wizard] OAuth start error:', error);
      setIsLoading(false);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
        variant: "destructive"
      });
    }
  };

  const fetchChannelInfo = async (accessToken: string, tokens?: { accessToken: string; refreshToken: string }) => {
    try {
      console.log('üìä [YouTube Wizard] Fetching channel info...');
      console.log('üìä [YouTube Wizard] Access token length:', accessToken?.length || 0);
      console.log('üìä [YouTube Wizard] Access token preview:', accessToken?.substring(0, 20) + '...');
      
      const response = await fetch(`/api/youtube/channel-info?accessToken=${encodeURIComponent(accessToken)}`);
      
      console.log('üìä [YouTube Wizard] Response status:', response.status, response.statusText);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('üìä [YouTube Wizard] Error response:', errorText);
        throw new Error(`Channel info request failed: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.success && data.channelInfo) {
        console.log('‚úÖ [YouTube Wizard] Channel info received:', data.channelInfo);
        setChannelInfo(data.channelInfo);
        setStep(3);
        
        toast({
          title: "–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω!",
          description: `–ö–∞–Ω–∞–ª "${data.channelInfo.channelTitle}" –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
        const tokensToUse = tokens || authTokens;
        console.log('üîç [YouTube Wizard] Checking auto-completion conditions:', {
          hasTokens: !!tokensToUse,
          tokens: tokens ? 'passed as parameter' : 'from state',
          authTokens: !!authTokens,
          onComplete: typeof onComplete,
          campaignId: campaignId
        });
        
        if (tokensToUse) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º campaignId –∏–∑ props
          const targetCampaignId = campaignId;
          
          console.log('‚úÖ [YouTube Wizard] Auto-completing setup with data:', {
            channelId: data.channelInfo.channelId,
            channelTitle: data.channelInfo.channelTitle,
            accessToken: tokensToUse.accessToken ? 'present' : 'missing',
            refreshToken: tokensToUse.refreshToken ? 'present' : 'missing',
            targetCampaignId: targetCampaignId
          });
          
          try {
            onComplete({
              channelId: data.channelInfo.channelId,
              channelTitle: data.channelInfo.channelTitle,
              accessToken: tokensToUse.accessToken,
              refreshToken: tokensToUse.refreshToken,
              channelInfo: data.channelInfo
            });
            console.log('‚úÖ [YouTube Wizard] onComplete called successfully for campaign:', targetCampaignId);
          } catch (error) {
            console.error('‚ùå [YouTube Wizard] Error calling onComplete:', error);
          }
        } else {
          console.warn('‚ö†Ô∏è [YouTube Wizard] No tokens available for auto-completion');
        }
      } else {
        throw new Error(data.error || 'Failed to get channel info');
      }
    } catch (error: any) {
      console.error('‚ùå [YouTube Wizard] Channel info error:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error.message?.includes('–£ –≤–∞—Å –Ω–µ—Ç YouTube –∫–∞–Ω–∞–ª–∞')) {
        console.log('üîÑ [YouTube Wizard] No channel found - showing channel creation step');
        setStep(5); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
      } else if (error.message?.includes('401') || error.message?.includes('Unauthorized')) {
        console.log('üîÑ [YouTube Wizard] Authorization error detected, returning to step 1');
        setStep(1); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —à–∞–≥—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        setAuthTokens({ accessToken: '', refreshToken: '' }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ",
        variant: "destructive"
      });
    }
  };

  const handleComplete = () => {
    if (channelInfo && authTokens) {
      console.log('‚úÖ [YouTube Wizard] Completing setup with data:', {
        channelId: channelInfo.channelId,
        channelTitle: channelInfo.channelTitle
      });
      
      onComplete({
        channelId: channelInfo.channelId,
        channelTitle: channelInfo.channelTitle,
        accessToken: authTokens.accessToken,
        refreshToken: authTokens.refreshToken,
        channelInfo
      });
      
      toast({
        title: "YouTube –Ω–∞—Å—Ç—Ä–æ–µ–Ω!",
        description: `–ö–∞–Ω–∞–ª "${channelInfo.channelTitle}" –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ`
      });
    }
  };

  const formatNumber = (num: string) => {
    const number = parseInt(num);
    if (number >= 1000000) {
      return `${(number / 1000000).toFixed(1)}M`;
    } else if (number >= 1000) {
      return `${(number / 1000).toFixed(1)}K`;
    }
    return number.toString();
  };

  return (
    <div className="space-y-6">
      {step === 1 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Youtube className="h-6 w-6 text-red-600" />
              –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YouTube
            </CardTitle>
            <CardDescription>
              –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à YouTube –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.
              –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π API –∫–ª—é—á - –≤–∞–º –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="font-medium text-blue-900 mb-2">–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:</h4>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>‚Ä¢ –û—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ YouTube</li>
                <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—Å—è ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞</li>
                <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ</li>
                <li>‚Ä¢ API –∫–ª—é—á —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π</li>
              </ul>
            </div>
            
            <Button 
              onClick={handleOAuthStart} 
              disabled={isLoading}
              className="w-full"
              size="lg"
            >
              {isLoading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...
                </>
              ) : (
                <>
                  <ExternalLink className="h-4 w-4 mr-2" />
                  –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ YouTube
                </>
              )}
            </Button>
          </CardContent>
        </Card>
      )}

      {step === 2 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Loader2 className="h-6 w-6 animate-spin text-blue-600" />
              –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            </CardTitle>
            <CardDescription>
              –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ YouTube –∫–∞–Ω–∞–ª–∞...
            </CardDescription>
          </CardHeader>
        </Card>
      )}

      {step === 4 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <ExternalLink className="h-6 w-6 text-orange-600" />
              –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            </CardTitle>
            <CardDescription>
              –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="bg-orange-50 p-4 rounded-lg">
              <h4 className="font-medium text-orange-900 mb-2">–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:</h4>
              <ul className="text-sm text-orange-800 space-y-1">
                <li>‚Ä¢ –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ YouTube –∏—Å—Ç–µ–∫</li>
                <li>‚Ä¢ –ò–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞</li>
                <li>‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤</li>
              </ul>
            </div>
            
            <Button 
              onClick={() => {
                setStep(1);
                setAuthTokens(null);
                setChannelInfo(null);
              }}
              className="w-full"
              size="lg"
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ
            </Button>
          </CardContent>
        </Card>
      )}

      {step === 5 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Youtube className="h-6 w-6 text-red-600" />
              –°–æ–∑–¥–∞–π—Ç–µ YouTube –∫–∞–Ω–∞–ª
            </CardTitle>
            <CardDescription>
              –£ –≤–∞—Å –µ—Å—Ç—å Google –∞–∫–∫–∞—É–Ω—Ç, –Ω–æ –Ω–µ—Ç YouTube –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="bg-red-50 p-4 rounded-lg">
              <h4 className="font-medium text-red-900 mb-2">–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</h4>
              <ol className="text-sm text-red-800 space-y-2 list-decimal list-inside">
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ <a href="https://studio.youtube.com" target="_blank" rel="noopener noreferrer" className="underline font-medium">YouTube Studio</a></li>
                <li>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π Google –∞–∫–∫–∞—É–Ω—Ç</li>
                <li>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π YouTube –∫–∞–Ω–∞–ª (—Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ)</li>
                <li>–í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"</li>
              </ol>
            </div>
            
            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="font-medium text-blue-900 mb-2">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±:</h4>
              <p className="text-sm text-blue-800">
                –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é –≤ <a href="https://youtube.com" target="_blank" rel="noopener noreferrer" className="underline font-medium">YouTube</a> - 
                –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≤–∞—Ç–∞—Ä –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É ‚Üí "–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª"
              </p>
            </div>
            
            <div className="flex gap-3">
              <Button 
                onClick={() => {
                  window.open('https://studio.youtube.com', '_blank');
                }}
                variant="outline"
                className="flex-1"
              >
                <ExternalLink className="h-4 w-4 mr-2" />
                –û—Ç–∫—Ä—ã—Ç—å YouTube Studio
              </Button>
              <Button 
                onClick={() => {
                  setStep(1);
                  setAuthTokens({ accessToken: '', refreshToken: '' });
                  setChannelInfo(null);
                }}
                className="flex-1"
              >
                <Youtube className="h-4 w-4 mr-2" />
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {step === 3 && channelInfo && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="h-6 w-6 text-green-600" />
              YouTube –∫–∞–Ω–∞–ª –≥–æ—Ç–æ–≤!
            </CardTitle>
            <CardDescription>
              –í–∞—à –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-start gap-4 p-4 bg-green-50 rounded-lg">
              {channelInfo.thumbnails?.default?.url && (
                <img 
                  src={channelInfo.thumbnails.default.url} 
                  alt="Channel Avatar"
                  className="w-16 h-16 rounded-full"
                />
              )}
              <div className="flex-1">
                <h4 className="font-semibold text-lg">{channelInfo.channelTitle}</h4>
                <p className="text-sm text-gray-600 mb-2">
                  ID: {channelInfo.channelId}
                </p>
                <div className="flex gap-4 text-sm">
                  <Badge variant="secondary" className="flex items-center gap-1">
                    <Users className="h-3 w-3" />
                    {formatNumber(channelInfo.subscriberCount)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                  </Badge>
                  <Badge variant="secondary" className="flex items-center gap-1">
                    <Eye className="h-3 w-3" />
                    {formatNumber(channelInfo.viewCount)} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                  </Badge>
                  <Badge variant="secondary" className="flex items-center gap-1">
                    <Youtube className="h-3 w-3" />
                    {channelInfo.videoCount} –≤–∏–¥–µ–æ
                  </Badge>
                </div>
              </div>
            </div>
            
            <div className="flex gap-3">
              <Button onClick={handleComplete} className="flex-1" size="lg">
                <CheckCircle className="h-4 w-4 mr-2" />
                –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
              </Button>
              <Button 
                onClick={() => {
                  setStep(1);
                  setAuthTokens(null);
                  setChannelInfo(null);
                }} 
                variant="outline" 
                size="lg"
              >
                <ExternalLink className="h-4 w-4 mr-2" />
                –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}