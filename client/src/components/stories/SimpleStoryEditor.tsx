import { useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useSimpleStoryStore } from '@/lib/simpleStoryStore';
import { useCampaignStore } from '@/lib/campaignStore';

// –ü—Ä–æ—Å—Ç–æ–π Stories Editor –ë–ï–ó —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ persist –∏ —Ñ–ª–∞–≥–æ–≤
export function SimpleStoryEditor({ storyId }: { storyId: string }) {
  const campaignId = useCampaignStore(state => state.activeCampaign?.id);
  
  const {
    slides,
    currentSlideIndex,
    storyTitle,
    selectedElement,
    setSlides,
    setStoryTitle,
    addElement,
    updateElement,
    deleteElement,
    clearStore
  } = useSimpleStoryStore();

  // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ React Query - –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
  const { data: storyData, isLoading } = useQuery({
    queryKey: ['/api/stories', storyId],
    enabled: !!storyId && !!campaignId && storyId !== 'new',
    staleTime: 0, // –í—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    refetchOnMount: true // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (storyData) {
      console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Stories:', storyData);
      
      // –ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
      if (storyData?.metadata?.slides) {
        setSlides(storyData.metadata.slides);
        setStoryTitle(storyData.title || '');
        console.log('‚úÖ Stories –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', storyData.metadata.slides.length, '—Å–ª–∞–π–¥–æ–≤');
      }
    }
  }, [storyData, setSlides, setStoryTitle]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ SimpleStoryEditor');
      clearStore();
    };
  }, [clearStore]);

  // –ü—Ä–æ—Å—Ç–æ–π –ª–æ–∞–¥–∏–Ω–≥
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ Stories...</p>
        </div>
      </div>
    );
  }

  // –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–Ω–¥–µ—Ä –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
  return (
    <div className="simple-story-editor">
      <div className="mb-4">
        <h2 className="text-xl font-bold">Simple Stories Editor</h2>
        <p>Stories ID: {storyId}</p>
        <p>–°–ª–∞–π–¥–æ–≤: {slides.length}</p>
        <p>–¢–µ–∫—É—â–∏–π —Å–ª–∞–π–¥: {currentSlideIndex + 1}</p>
      </div>

      {slides.length > 0 && (
        <div className="slide-content">
          <h3>–°–ª–∞–π–¥ {currentSlideIndex + 1}</h3>
          <p>–≠–ª–µ–º–µ–Ω—Ç–æ–≤: {slides[currentSlideIndex]?.elements?.length || 0}</p>
          
          <div className="mt-4">
            <button 
              onClick={() => addElement('text')}
              className="bg-blue-500 text-white px-4 py-2 rounded mr-2"
            >
              –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
            </button>
            <button 
              onClick={() => addElement('image')}
              className="bg-green-500 text-white px-4 py-2 rounded"
            >
              –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            </button>
          </div>

          <div className="mt-4">
            {slides[currentSlideIndex]?.elements?.map((element, index) => (
              <div key={element.id} className="border p-2 mb-2">
                <p>–≠–ª–µ–º–µ–Ω—Ç {index + 1}: {element.type}</p>
                <p>–ö–æ–Ω—Ç–µ–Ω—Ç: {element.content}</p>
                <button 
                  onClick={() => deleteElement(element.id)}
                  className="bg-red-500 text-white px-2 py-1 rounded text-sm"
                >
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}