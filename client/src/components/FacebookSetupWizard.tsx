import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import { Loader2, CheckCircle } from "lucide-react";

const facebookSetupSchema = z.object({
  token: z.string().min(1, "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
});

type FacebookSetupForm = z.infer<typeof facebookSetupSchema>;

interface FacebookPage {
  id: string;
  name: string;
  access_token: string;
  category: string;
  tasks?: string[];
}

interface FacebookSetupWizardProps {
  campaignId: string;
  onComplete: (data: { token: string; pageId: string; pageName: string }) => void;
  onCancel: () => void;
}

export default function FacebookSetupWizard({
  campaignId,
  onComplete,
  onCancel,
}: FacebookSetupWizardProps) {
  const [pages, setPages] = useState<FacebookPage[]>([]);
  const [loadingPages, setLoadingPages] = useState(false);
  const { toast } = useToast();

  const form = useForm<FacebookSetupForm>({
    resolver: zodResolver(facebookSetupSchema),
    defaultValues: {
      token: "",
    },
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Facebook —Å—Ç—Ä–∞–Ω–∏—Ü
  const fetchFacebookPages = async () => {
    const formData = form.getValues();
    const token = formData.token;
    
    if (!token || token.length < 10) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞",
        variant: "destructive",
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥ –∫–æ–Ω—Å–æ–ª–∏
    if (token.includes('Facebook Wizard:') || token.includes('%20') || token.includes('FacebookSetupWizard')) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–ª–µ —Ç–æ–∫–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π Facebook —Ç–æ–∫–µ–Ω.",
        variant: "destructive",
      });
      return;
    }

    setLoadingPages(true);
    try {
      const response = await fetch(`/api/facebook/pages?token=${encodeURIComponent(token)}`);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü');
      }

      if (data.pages && data.pages.length > 0) {
        setPages(data.pages);
        toast({
          title: "–£—Å–ø–µ—à–Ω–æ",
          description: `–ù–∞–π–¥–µ–Ω–æ ${data.pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü`,
        });
      } else {
        toast({
          title: "–í–Ω–∏–º–∞–Ω–∏–µ",
          description: "Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        variant: "destructive",
      });
    } finally {
      setLoadingPages(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handlePageSelect = (pageId: string, pageName: string) => {
    const token = form.getValues('token');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥ –∫–æ–Ω—Å–æ–ª–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π
    if (token.includes('Facebook Wizard:') || token.includes('%20') || token.includes('FacebookSetupWizard')) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–¢–æ–∫–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω Facebook.",
        variant: "destructive",
      });
      return;
    }
    
    console.log('Facebook Wizard: –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', {
      pageId,
      pageName,
      tokenLength: token.length,
      tokenValid: token.length > 50 && !token.includes('Facebook Wizard:')
    });
    
    onComplete({
      token,
      pageId,
      pageName,
    });
    setPages([]); // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    toast({
      title: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞",
      description: `–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${pageName}`,
    });
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Facebook</h3>
        <Button variant="outline" onClick={onCancel} size="sm">
          –û—Ç–º–µ–Ω–∞
        </Button>
      </div>

      <div className="space-y-4">
        <Form {...form}>
          <div className="space-y-4">
            {/* –í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ */}
            <FormField
              control={form.control}
              name="token"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Facebook Access Token</FormLabel>
                  <div className="flex space-x-2 mt-1">
                    <FormControl>
                      <Input
                        type="password"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ Facebook Access Token"
                        {...field}
                      />
                    </FormControl>
                    <Button 
                      type="button" 
                      onClick={fetchFacebookPages}
                      disabled={loadingPages || !form.getValues('token')}
                      size="sm"
                    >
                      {loadingPages ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          –ü–æ–∏—Å–∫...
                        </>
                      ) : (
                        'üìã –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
                      )}
                    </Button>
                  </div>
                  <FormMessage />
                  <div className="text-xs text-muted-foreground">
                    –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ Facebook –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ‚Üí Graph API Explorer
                  </div>
                </FormItem>
              )}
            />
          </div>
        </Form>

        {/* –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü */}
        {pages.length > 0 && (
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <h4 className="font-medium">–í—ã–±–µ—Ä–∏—Ç–µ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—É:</h4>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setPages([])}
              >
                –°–∫—Ä—ã—Ç—å
              </Button>
            </div>
            <div className="space-y-2 max-h-64 overflow-y-auto">
              {pages.map((page) => (
                <Card key={page.id} className="cursor-pointer hover:bg-gray-100 transition-colors">
                  <CardContent className="p-3">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                          <span className="text-blue-600 dark:text-blue-400 font-semibold">
                            {page.name.charAt(0).toUpperCase()}
                          </span>
                        </div>
                        <div>
                          <h5 className="font-semibold">{page.name}</h5>
                          <p className="text-sm text-gray-600">{page.category}</p>
                          <span className="text-xs text-gray-500">ID: {page.id}</span>
                        </div>
                      </div>
                      <Button 
                        onClick={() => handlePageSelect(page.id, page.name)}
                        disabled={loadingPages}
                        size="sm"
                        variant="outline"
                      >
                        –í—ã–±—Ä–∞—Ç—å
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}