import React, { useState } from 'react';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { cn } from '@/lib/utils';
import { Smile } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–º–æ–¥–∑–∏
const emojiCategories = {
  '–°–º–∞–π–ª—ã –∏ –ª—é–¥–∏': [
    'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'ü•≤', '‚ò∫Ô∏è', 'üòä', 'üòá', 
    'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 
    'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü•∏', 'ü§©', 'ü•≥', 'üòè', 'üòí', 
    'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 
    'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨', 'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 
    'üò•', 'üòì', 'ü´£', 'ü§ó', 'ü´°', 'ü§î', 'ü´¢', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 
    'üòë', 'üò¨', 'ü´†', 'üôÑ', 'üòØ', 'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§'
  ],
  '–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏': [
    'üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà', 'üçí', 
    'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶', 'ü•¨', 'ü•í', 'üå∂', 
    'ü´ë', 'üåΩ', 'ü•ï', 'ü´í', 'üßÑ', 'üßÖ', 'ü•î', 'üç†', 'ü•ê', 'ü•Ø', 'üçû', 'ü•ñ', 
    'ü•®', 'üßÄ', 'ü•ö', 'üç≥', 'üßà', 'ü•û', 'üßá', 'ü•ì', 'ü•©', 'üçó', 'üçñ', 'ü¶¥', 
    'üå≠', 'üçî', 'üçü', 'üçï', 'ü´ì', 'ü•™', 'ü•ô', 'üßÜ', 'üåÆ', 'üåØ', 'ü´î', 'ü•ó', 
    'ü•ò', 'ü´ï', 'ü•´', 'üçù', 'üçú', 'üç≤', 'üçõ', 'üç£', 'üç±', 'ü•ü', 'ü¶™', 'üç§', 
    'üçô', 'üçö', 'üçò', 'üç•', 'ü•†', 'ü•Æ', 'üç¢', 'üç°', 'üçß', 'üç®', 'üç¶', 'ü•ß'
  ],
  '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': [
    '‚öΩÔ∏è', 'üèÄ', 'üèà', '‚öæÔ∏è', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì', 
    'üè∏', 'üèí', 'üèë', 'ü•ç', 'üèè', 'ü™É', 'ü•Ö', '‚õ≥Ô∏è', 'ü™Å', 'üèπ', 'üé£', 'ü§ø', 
    'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõº', 'üõ∑', '‚õ∏', 'ü•å', 'üéø', '‚õ∑', 'üèÇ', 'ü™Ç', 
    'üèãÔ∏è‚Äç‚ôÄÔ∏è', 'üèãÔ∏è', 'üèãÔ∏è‚Äç‚ôÇÔ∏è', 'ü§º‚Äç‚ôÄÔ∏è', 'ü§º', 'ü§º‚Äç‚ôÇÔ∏è', 'ü§∏‚Äç‚ôÄÔ∏è', 'ü§∏', 'ü§∏‚Äç‚ôÇÔ∏è', '‚õπÔ∏è‚Äç‚ôÄÔ∏è', '‚õπÔ∏è', 
    '‚õπÔ∏è‚Äç‚ôÇÔ∏è', 'ü§∫', 'ü§æ‚Äç‚ôÄÔ∏è', 'ü§æ', 'ü§æ‚Äç‚ôÇÔ∏è', 'üèåÔ∏è‚Äç‚ôÄÔ∏è', 'üèåÔ∏è', 'üèåÔ∏è‚Äç‚ôÇÔ∏è', 'üèá', 'üßò‚Äç‚ôÄÔ∏è', 'üßò', 
    'üßò‚Äç‚ôÇÔ∏è', 'üèÑ‚Äç‚ôÄÔ∏è', 'üèÑ', 'üèÑ‚Äç‚ôÇÔ∏è', 'üèä‚Äç‚ôÄÔ∏è', 'üèä', 'üèä‚Äç‚ôÇÔ∏è', 'ü§Ω‚Äç‚ôÄÔ∏è', 'ü§Ω', 'ü§Ω‚Äç‚ôÇÔ∏è', 'üö£‚Äç‚ôÄÔ∏è', 
    'üö£', 'üö£‚Äç‚ôÇÔ∏è', 'üßó‚Äç‚ôÄÔ∏è', 'üßó', 'üßó‚Äç‚ôÇÔ∏è', 'üöµ‚Äç‚ôÄÔ∏è', 'üöµ', 'üöµ‚Äç‚ôÇÔ∏è', 'üö¥‚Äç‚ôÄÔ∏è', 'üö¥', 'üö¥‚Äç‚ôÇÔ∏è'
  ],
  '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –º–µ—Å—Ç–∞': [
    'üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèé', 'üöì', 'üöë', 'üöí', 'üöê', 'üõª', 'üöö', 
    'üöõ', 'üöú', 'ü¶Ø', 'ü¶Ω', 'ü¶º', 'üõ¥', 'üö≤', 'üõµ', 'üèç', 'üõ∫', 'üö®', 'üöî', 
    'üöç', 'üöò', 'üöñ', 'üö°', 'üö†', 'üöü', 'üöÉ', 'üöã', 'üöû', 'üöù', 'üöÑ', 'üöÖ', 
    'üöà', 'üöÇ', 'üöÜ', 'üöá', 'üöä', 'üöâ', '‚úàÔ∏è', 'üõ´', 'üõ¨', 'üõ©', 'üí∫', 'üõ∞', 
    'üöÄ', 'üõ∏', 'üöÅ', 'üõ∂', '‚õµÔ∏è', 'üö§', 'üõ•', 'üõ≥', '‚õ¥', 'üö¢', '‚öìÔ∏è', 'ü™ù', 
    '‚õΩÔ∏è', 'üöß', 'üö¶', 'üö•', 'üöè', 'üó∫', 'üóø', 'üóΩ', 'üóº', 'üè∞', 'üèØ', 'üèü', 
    'üé°', 'üé¢', 'üé†', '‚õ≤Ô∏è', '‚õ±', 'üèñ', 'üèù', 'üèú', 'üåã', '‚õ∞', 'üèî', 'üóª'
  ],
  '–û–±—ä–µ–∫—Ç—ã': [
    '‚åöÔ∏è', 'üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•', 'üñ®', 'üñ±', 'üñ≤', 'üïπ', 'üóú', 'üíΩ', 
    'üíæ', 'üíø', 'üìÄ', 'üìº', 'üì∑', 'üì∏', 'üìπ', 'üé•', 'üìΩ', 'üéû', 'üìû', '‚òéÔ∏è', 
    'üìü', 'üì†', 'üì∫', 'üìª', 'üéô', 'üéö', 'üéõ', 'üß≠', '‚è±', '‚è≤', '‚è∞', 'üï∞', 
    '‚åõÔ∏è', '‚è≥', 'üì°', 'üîã', 'üîå', 'üí°', 'üî¶', 'üïØ', 'ü™î', 'üßØ', 'üõ¢', 'üí∏', 
    'üíµ', 'üí¥', 'üí∂', 'üí∑', 'ü™ô', 'üí∞', 'üí≥', 'üíé', '‚öñÔ∏è', 'ü™ú', 'üß∞', 'ü™õ', 
    'üîß', 'üî®', '‚öí', 'üõ†', '‚õè', 'ü™ö', 'üî©', '‚öôÔ∏è', 'ü™§', 'üß±', '‚õì', 'üß≤', 
    'üî´', 'üí£', 'üß®', 'ü™ì', 'üî™', 'üó°', '‚öîÔ∏è', 'üõ°', 'üö¨', '‚ö∞Ô∏è', 'ü™¶', '‚ö±Ô∏è'
  ],
  '–°–∏–º–≤–æ–ª—ã': [
    '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 
    'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', '‚òÆÔ∏è', '‚úùÔ∏è', '‚ò™Ô∏è', 'üïâ', '‚ò∏Ô∏è', 
    '‚ú°Ô∏è', 'üîØ', 'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê', '‚õé', '‚ôàÔ∏è', '‚ôâÔ∏è', '‚ôäÔ∏è', '‚ôãÔ∏è', '‚ôåÔ∏è', 
    '‚ôçÔ∏è', '‚ôéÔ∏è', '‚ôèÔ∏è', '‚ôêÔ∏è', '‚ôëÔ∏è', '‚ôíÔ∏è', '‚ôìÔ∏è', 'üÜî', '‚öõÔ∏è', 'üâë', '‚ò¢Ô∏è', '‚ò£Ô∏è', 
    'üì¥', 'üì≥', 'üà∂', 'üàöÔ∏è', 'üà∏', 'üà∫', 'üà∑Ô∏è', '‚ú¥Ô∏è', 'üÜö', 'üíÆ', 'üâê', '„äôÔ∏è', 
    '„äóÔ∏è', 'üà¥', 'üàµ', 'üàπ', 'üà≤', 'üÖ∞Ô∏è', 'üÖ±Ô∏è', 'üÜé', 'üÜë', 'üÖæÔ∏è', 'üÜò', '‚ùå', 
    '‚≠ïÔ∏è', 'üõë', '‚õîÔ∏è', 'üìõ', 'üö´', 'üíØ', 'üí¢', '‚ô®Ô∏è', 'üö∑', 'üöØ', 'üö≥', 'üö±'
  ]
};

// –í—Å–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
const allEmojis = Object.values(emojiCategories).flat();

interface EmojiPickerProps {
  onEmojiSelect: (emoji: string) => void;
}

export function EmojiPicker({ onEmojiSelect }: EmojiPickerProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [activeTab, setActiveTab] = useState('–°–º–∞–π–ª—ã –∏ –ª—é–¥–∏');

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredEmojis = searchQuery
    ? allEmojis.filter(emoji => emoji.includes(searchQuery))
    : emojiCategories[activeTab as keyof typeof emojiCategories];

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <PopoverTrigger asChild>
              <Button 
                variant="outline" 
                size="sm"
                className="h-8 px-2"
              >
                <Smile className="h-4 w-4" />
              </Button>
            </PopoverTrigger>
          </TooltipTrigger>
          <TooltipContent>–≠–º–æ–¥–∑–∏</TooltipContent>
        </Tooltip>
      </TooltipProvider>
      
      <PopoverContent className="w-80 p-0">
        <div className="p-4 space-y-4">
          <Tabs defaultValue={activeTab} onValueChange={(value) => setActiveTab(value)}>
            <div className="space-y-2">
              <Input
                placeholder="–ü–æ–∏—Å–∫"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="mb-2"
              />
              
              {!searchQuery && (
                <TabsList className="grid grid-cols-3 h-auto">
                  <TabsTrigger value="–°–º–∞–π–ª—ã –∏ –ª—é–¥–∏">–°–º–∞–π–ª—ã</TabsTrigger>
                  <TabsTrigger value="–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏">–ï–¥–∞</TabsTrigger>
                  <TabsTrigger value="–°–∏–º–≤–æ–ª—ã">–°–∏–º–≤–æ–ª—ã</TabsTrigger>
                </TabsList>
              )}
            </div>
            
            <div className="h-[300px] overflow-y-auto py-2">
              {Object.keys(emojiCategories).map((category) => (
                <TabsContent key={category} value={category} className="m-0">
                  {searchQuery ? (
                    <div className="mt-2">
                      <h3 className="mb-2 text-sm font-medium">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h3>
                      <div className="grid grid-cols-8 gap-1">
                        {filteredEmojis.map((emoji, index) => (
                          <button
                            key={`${emoji}-${index}`}
                            className="p-1.5 hover:bg-muted rounded cursor-pointer text-lg"
                            onClick={() => {
                              onEmojiSelect(emoji);
                              setIsOpen(false);
                              setSearchQuery('');
                            }}
                          >
                            {emoji}
                          </button>
                        ))}
                      </div>
                    </div>
                  ) : (
                    <>
                      <h3 className="mb-2 text-sm font-medium">{category}</h3>
                      <div className="grid grid-cols-8 gap-1">
                        {emojiCategories[category as keyof typeof emojiCategories].map((emoji, index) => (
                          <button
                            key={`${emoji}-${index}`}
                            className="p-1.5 hover:bg-muted rounded cursor-pointer text-lg"
                            onClick={() => {
                              onEmojiSelect(emoji);
                              setIsOpen(false);
                            }}
                          >
                            {emoji}
                          </button>
                        ))}
                      </div>
                    </>
                  )}
                </TabsContent>
              ))}
            </div>
          </Tabs>
        </div>
      </PopoverContent>
    </Popover>
  );
}