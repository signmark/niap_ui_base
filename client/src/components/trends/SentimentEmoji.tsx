interface SentimentEmojiProps {
  sentiment?: {
    sentiment?: string;
    score?: number;
    confidence?: number;
    [key: string]: any;
  } | string;
  className?: string;
}

export function SentimentEmoji({ sentiment, className = "" }: SentimentEmojiProps) {
  const getSentimentEmoji = (sentiment?: { sentiment?: string; score?: number } | string): string => {
    if (!sentiment) return "‚ùì";
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º
    if (typeof sentiment === 'object') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ sentiment –≤ –æ–±—ä–µ–∫—Ç–µ
      const sentimentValue = sentiment.sentiment;
      if (sentimentValue) {
        switch (sentimentValue.toLowerCase()) {
          case 'positive':
            return "üòä";
          case 'negative':
            return "üòû";
          case 'neutral':
            return "üòê";
          default:
            return "‚ùì";
        }
      }
      return "‚ùì";
    }
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    if (typeof sentiment === 'string') {
      const text = sentiment.toLowerCase();
      
      const positiveKeywords = [
        "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω", "–ø–æ–∑–∏—Ç–∏–≤–Ω", "—Ö–æ—Ä–æ—à", "–æ—Ç–ª–∏—á–Ω", "–ø—Ä–µ–∫—Ä–∞—Å–Ω", 
        "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω", "—É—Å–ø–µ—à–Ω", "–≤—ã–≥–æ–¥–Ω", "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω", "–º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â"
      ];
      
      const negativeKeywords = [
        "–Ω–µ–≥–∞—Ç–∏–≤–Ω", "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω", "–ø–ª–æ—Ö", "—É–∂–∞—Å–Ω", "–ø—Ä–æ–±–ª–µ–º–Ω",
        "—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω", "–æ–ø–∞—Å–Ω", "–Ω–µ—É–¥–∞—á–Ω"
      ];
      
      const neutralKeywords = [
        "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω", "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω", "—É–º–µ—Ä–µ–Ω–Ω", "—Å—Ç–∞–±–∏–ª—å–Ω",
        "–æ–±—ã—á–Ω", "—Å—Ä–µ–¥–Ω", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω"
      ];
      
      if (positiveKeywords.some(keyword => text.includes(keyword))) {
        return "üòä";
      }
      
      if (negativeKeywords.some(keyword => text.includes(keyword))) {
        return "üòû";
      }
      
      if (neutralKeywords.some(keyword => text.includes(keyword))) {
        return "üòê";
      }
    }
    
    return "‚ùì";
  };

  const getSentimentTitle = (sentiment?: { sentiment?: string; score?: number; confidence?: number } | string): string => {
    let sentimentType = "";
    let score = "";
    let confidence = "";
    
    if (typeof sentiment === 'object' && sentiment) {
      sentimentType = sentiment.sentiment || "";
      score = sentiment.score ? ` (–±–∞–ª–ª: ${sentiment.score})` : "";
      confidence = sentiment.confidence ? ` (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(sentiment.confidence * 100)}%)` : "";
    }
    
    switch (sentimentType.toLowerCase()) {
      case "positive":
        return `–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥${score}${confidence}`;
      case "negative":
        return `–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥${score}${confidence}`;
      case "neutral":
        return `–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥${score}${confidence}`;
      default:
        return "–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";
    }
  };

  return (
    <span 
      className={`text-lg select-none ${className}`}
      title={getSentimentTitle(sentiment)}
    >
      {getSentimentEmoji(sentiment)}
    </span>
  );
}