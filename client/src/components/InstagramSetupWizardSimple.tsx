import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, ExternalLink, Loader2, Instagram, ArrowRight, Search } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';

interface InstagramSetupWizardProps {
  campaignId: string;
  onComplete: () => void;
  onCancel: () => void;
}

const InstagramSetupWizardSimple: React.FC<InstagramSetupWizardProps> = ({ campaignId, onComplete, onCancel }) => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [showAccountSelection, setShowAccountSelection] = useState(false);
  const [availableAccounts, setAvailableAccounts] = useState<Array<{
    id: string;
    name: string;
    username?: string;
  }>>([]);
  const [formData, setFormData] = useState({
    appId: '',
    appSecret: '',
    accessToken: '',
    businessAccountId: ''
  });
  const [error, setError] = useState<string | null>(null);
  
  const { toast } = useToast();

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  console.log('Instagram Setup Wizard rendering with campaignId:', campaignId);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Facebook
  useEffect(() => {
    const loadExistingSettings = async () => {
      try {
        const response = await fetch(`/api/campaigns/${campaignId}/instagram-settings`, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success && data.settings) {
            const settings = data.settings;
            const accessToken = settings.accessToken || settings.longLivedToken || settings.token || '';
            
            setFormData({
              appId: settings.appId || '',
              appSecret: settings.appSecret || '',
              accessToken: accessToken,
              businessAccountId: settings.businessAccountId || settings.instagramId || ''
            });

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (accessToken) {
              console.log('üîç Auto-checking Facebook pages for existing Instagram token...');
              try {
                const facebookResponse = await fetch(`/api/facebook/pages?token=${encodeURIComponent(accessToken)}`, {
                  method: 'GET',
                  headers: {
                    'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                  }
                });

                if (facebookResponse.ok) {
                  const facebookData = await facebookResponse.json();
                  console.log('üîç Facebook pages found during loading:', facebookData);
                  
                  // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ—ë
                  if (facebookData.success && facebookData.pages && facebookData.pages.length === 1) {
                    const page = facebookData.pages[0];
                    console.log('üîß Auto-configuring Facebook page during Instagram load:', page);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Facebook –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                    const currentFbResponse = await fetch(`/api/campaigns/${campaignId}/facebook-settings`, {
                      headers: {
                        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                      }
                    });

                    const currentFbData = await currentFbResponse.json();
                    const hasExistingFb = currentFbData.success && currentFbData.settings && currentFbData.settings.pageId;

                    if (!hasExistingFb) {
                      // –°–æ—Ö—Ä–∞–Ω—è–µ–º Facebook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                      const saveFacebookResponse = await fetch(`/api/campaigns/${campaignId}`, {
                        method: 'PATCH',
                        headers: {
                          'Content-Type': 'application/json',
                          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                        },
                        body: JSON.stringify({
                          social_media_settings: {
                            facebook: {
                              token: accessToken,
                              pageId: page.id,
                              pageName: page.name,
                              autoConfiguredAt: new Date().toISOString()
                            }
                          }
                        })
                      });

                      if (saveFacebookResponse.ok) {
                        toast({
                          title: "Facebook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                          description: `–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${page.name}`,
                          variant: "default"
                        });
                        console.log('‚úÖ Facebook page auto-configured during Instagram load');
                      }
                    }
                  }
                }
              } catch (fbError) {
                console.error('Error auto-checking Facebook pages:', fbError);
                // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              }
            }
          }
        }
      } catch (error) {
        console.error('Error loading Instagram settings:', error);
      }
    };

    loadExistingSettings();
  }, [campaignId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Facebook
  const handleDiscoverAccounts = async () => {
    if (!formData.accessToken) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ Access Token –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    try {
      // 1. –ù–∞—Ö–æ–¥–∏–º Instagram –∞–∫–∫–∞—É–Ω—Ç—ã
      const instagramResponse = await fetch(`/api/campaigns/${campaignId}/discover-instagram-accounts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          accessToken: formData.accessToken
        })
      });

      const instagramData = await instagramResponse.json();
      
      if (instagramData.success && instagramData.accounts) {
        setAvailableAccounts(instagramData.accounts);
        setShowAccountSelection(true);
        
        // 2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–º –∂–µ —Ç–æ–∫–µ–Ω–æ–º
        try {
          console.log('üîç Checking Facebook pages with Instagram token...');
          const facebookResponse = await fetch(`/api/facebook/pages?token=${encodeURIComponent(formData.accessToken)}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
            }
          });

          if (facebookResponse.ok) {
            const facebookData = await facebookResponse.json();
            console.log('üîç Facebook pages found:', facebookData);
            
            // 3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ—ë
            if (facebookData.success && facebookData.pages && facebookData.pages.length === 1) {
              const page = facebookData.pages[0];
              console.log('üîß Auto-configuring single Facebook page:', page);
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º Facebook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
              const saveFacebookResponse = await fetch(`/api/campaigns/${campaignId}`, {
                method: 'PATCH',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
                },
                body: JSON.stringify({
                  social_media_settings: {
                    facebook: {
                      token: formData.accessToken,
                      pageId: page.id,
                      pageName: page.name,
                      autoConfiguredAt: new Date().toISOString()
                    }
                  }
                })
              });

              if (saveFacebookResponse.ok) {
                toast({
                  title: "Facebook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                  description: `–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${page.name}`,
                  variant: "default"
                });
                console.log('‚úÖ Facebook page auto-configured successfully');
              }
            } else if (facebookData.pages && facebookData.pages.length > 1) {
              toast({
                title: "Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã",
                description: `–ù–∞–π–¥–µ–Ω–æ ${facebookData.pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ä–∞–∑–¥–µ–ª–µ Facebook.`,
                variant: "default"
              });
            }
          }
        } catch (fbError) {
          console.error('Error checking Facebook pages:', fbError);
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        }

        toast({
          title: "Instagram –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã",
          description: `–ù–∞–π–¥–µ–Ω–æ ${instagramData.accounts.length} Instagram Business –∞–∫–∫–∞—É–Ω—Ç–æ–≤`
        });
      } else {
        throw new Error(instagramData.error || 'Instagram –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error: any) {
      console.error('Error discovering Instagram accounts:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleSelectAccount = async (accountId: string, accountName: string) => {
    console.log('üîç Selecting Instagram account:', { accountId, accountName });
    setFormData(prev => {
      const newData = { ...prev, businessAccountId: accountId };
      console.log('üîç Updated formData:', newData);
      return newData;
    });
    setShowAccountSelection(false);
    
    // –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
      const response = await fetch(`/api/campaigns/${campaignId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          social_media_settings: {
            instagram: {
              appId: formData.appId,
              appSecret: formData.appSecret,
              accessToken: formData.accessToken,
              businessAccountId: accountId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π ID
              longLivedToken: formData.accessToken,
              setupCompletedAt: new Date().toISOString()
            }
          }
        })
      });

      if (response.ok) {
        toast({
          title: "–ê–∫–∫–∞—É–Ω—Ç –≤—ã–±—Ä–∞–Ω",
          description: `–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: ${accountName} (ID: ${accountId})`
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if (onComplete) {
          onComplete();
        }
      }
    } catch (error) {
      console.error('Error saving selected account:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç",
        variant: "destructive"
      });
    }
  };

  const handleGetToken = async () => {
    if (!formData.appId || !formData.appSecret) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ App ID –∏ App Secret",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    try {
      const response = await fetch(`/api/instagram/auth/start`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          appId: formData.appId,
          appSecret: formData.appSecret,
          redirectUri: `${window.location.origin}/instagram-callback`,
          campaignId: campaignId
        })
      });

      const data = await response.json();
      
      if (data.success && data.authUrl) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ VK
        window.open(data.authUrl, 'instagram-auth', 'width=600,height=600');
        
        toast({
          title: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Instagram",
          description: "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ –Ω–∏–∂–µ, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç"
        });
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error: any) {
      console.error('Error starting Instagram OAuth:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const handleSaveSettings = async () => {
    if (!formData.accessToken || !formData.businessAccountId) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ Access Token –∏ Business Account ID",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    try {
      const response = await fetch(`/api/campaigns/${campaignId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          social_media_settings: {
            instagram: {
              appId: formData.appId,
              appSecret: formData.appSecret,
              accessToken: formData.accessToken,
              businessAccountId: formData.businessAccountId,
              longLivedToken: formData.accessToken,
              setupCompletedAt: new Date().toISOString()
            }
          }
        })
      });

      const data = await response.json();
      
      if (response.ok) {
        toast({
          title: "–£—Å–ø–µ—Ö",
          description: "Instagram –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
          variant: "default"
        });
        setTimeout(() => {
          onComplete();
        }, 1500);
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
    } catch (error: any) {
      console.error('Error saving Instagram settings:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  if (error) {
    return (
      <div className="max-w-2xl mx-auto p-6">
        <Alert>
          <AlertDescription>
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Instagram: {error}
          </AlertDescription>
        </Alert>
        <Button onClick={onCancel} className="mt-4">
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-base font-semibold">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Instagram API</h3>
          <p className="text-sm text-gray-600">–ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
          {/* Debug info */}
          <p className="text-xs text-gray-400 mt-1">
            Debug: businessAccountId = {formData.businessAccountId || '–Ω–µ –≤—ã–±—Ä–∞–Ω'}
          </p>
        </div>
        <Button 
          variant="ghost" 
          size="sm" 
          onClick={onCancel}
          className="text-gray-500 hover:text-gray-700"
        >
          ‚úï
        </Button>
      </div>
      
      <Alert className="py-3">
        <AlertDescription>
          <ol className="list-decimal list-inside space-y-1 text-sm">
            <li>–í–≤–µ–¥–∏—Ç–µ App ID –∏ App Secret –∏–∑ Facebook –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
            <li>–ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Instagram" –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</li>
            <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ "Access Token"</li>
            <li>–í—ã–±–µ—Ä–∏—Ç–µ Instagram Business –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞</li>
            <li>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
          </ol>
        </AlertDescription>
      </Alert>
        
      <Card>
        <CardContent className="pt-4 space-y-3">
            {/* App ID –∏ App Secret */}
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="appId">App ID *</Label>
                <Input
                  id="appId"
                  type="text"
                  value={formData.appId}
                  onChange={(e) => setFormData(prev => ({ ...prev, appId: e.target.value }))}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ App ID"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="appSecret">App Secret *</Label>
                <Input
                  id="appSecret"
                  type="password"
                  value={formData.appSecret}
                  onChange={(e) => setFormData(prev => ({ ...prev, appSecret: e.target.value }))}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ App Secret"
                  required
                />
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ */}
            <Button 
              onClick={handleGetToken}
              disabled={isProcessing || !formData.appId || !formData.appSecret}
              className="w-full"
              variant="outline"
            >
              {isProcessing ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...
                </>
              ) : (
                <>
                  <ExternalLink className="mr-2 h-4 w-4" />
                  –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Instagram
                </>
              )}
            </Button>

            {/* Access Token */}
            <div className="space-y-2">
              <Label htmlFor="accessToken">Access Token *</Label>
              <Input
                id="accessToken"
                type="text"
                value={formData.accessToken}
                onChange={(e) => setFormData(prev => ({ ...prev, accessToken: e.target.value }))}
                placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"
                required
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ */}
            {formData.accessToken && !showAccountSelection && (
              <Button 
                onClick={handleDiscoverAccounts}
                disabled={isProcessing}
                className="w-full"
                variant="outline"
              >
                {isProcessing ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    –ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...
                  </>
                ) : (
                  <>
                    <Search className="mr-2 h-4 w-4" />
                    –ù–∞–π—Ç–∏ Instagram –∞–∫–∫–∞—É–Ω—Ç—ã
                  </>
                )}
              </Button>
            )}

            {/* –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ */}
            {showAccountSelection && availableAccounts.length > 0 && (
              <div className="space-y-3">
                <Label>–í—ã–±–µ—Ä–∏—Ç–µ Instagram Business –∞–∫–∫–∞—É–Ω—Ç:</Label>
                <div className="space-y-2">
                  {availableAccounts.map((account) => (
                    <Card key={account.id} className="cursor-pointer hover:bg-gray-50 transition-colors">
                      <CardContent className="p-4">
                        <div className="flex justify-between items-center">
                          <div>
                            <h4 className="font-semibold">{account.name}</h4>
                            {account.username && (
                              <p className="text-sm text-gray-600">@{account.username}</p>
                            )}
                            <Badge variant="outline" className="mt-1">
                              ID: {account.id}
                            </Badge>
                          </div>
                          <Button 
                            onClick={() => handleSelectAccount(account.id, account.name)}
                            disabled={isProcessing}
                            size="sm"
                          >
                            <>
                              –í—ã–±—Ä–∞—Ç—å
                              <ArrowRight className="ml-2 h-4 w-4" />
                            </>
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            )}

            {/* Business Account ID (–≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω) */}
            {formData.accessToken && (
              <div className="space-y-2">
                <Label htmlFor="businessAccountId">Business Account ID</Label>
                <Input
                  id="businessAccountId"
                  type="text"
                  value={formData.businessAccountId || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, businessAccountId: e.target.value }))}
                  placeholder={formData.businessAccountId ? "ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞" : "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç"}
                  readOnly={!!formData.businessAccountId}
                />
                {formData.businessAccountId && (
                  <p className="text-xs text-green-600">‚úì –ê–∫–∫–∞—É–Ω—Ç –≤—ã–±—Ä–∞–Ω</p>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="mt-6 flex justify-between">
        <Button 
          variant="outline" 
          onClick={() => {
            console.log('Instagram wizard: –û—Ç–º–µ–Ω–∞ –Ω–∞–∂–∞—Ç–∞');
            if (onCancel) {
              onCancel();
            }
          }}
          disabled={isProcessing}
        >
          –û—Ç–º–µ–Ω–∞
        </Button>
        
        <Button 
          onClick={handleSaveSettings}
          disabled={isProcessing || !formData.accessToken || !formData.businessAccountId}
        >
          {isProcessing ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
            </>
          ) : (
            <>
              <CheckCircle className="mr-2 h-4 w-4" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </>
          )}
        </Button>
      </div>
    </div>
  );
};

export default InstagramSetupWizardSimple;