import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import { Loader2, CheckCircle, XCircle, AlertCircle } from "lucide-react";
import { directusApi } from "@/lib/directus";
import { api } from "@/lib/api";
import { Badge } from "@/components/ui/badge";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { YouTubeOAuthSetup } from "./YouTubeOAuthSetup";
import InstagramSetupWizard from "./InstagramSetupWizardComplete";
import type { SocialMediaSettings } from "@shared/schema";

const socialMediaSettingsSchema = z.object({
  telegram: z.object({
    token: z.string().nullable(),
    chatId: z.string().nullable(),
  }),
  vk: z.object({
    token: z.string().nullable(),
    groupId: z.string().nullable(),
  }),
  instagram: z.object({
    token: z.string().nullable(),
    accessToken: z.string().nullable(),
    businessAccountId: z.string().nullable(),
    appId: z.string().nullable(),
    appSecret: z.string().nullable(),
  }),
  facebook: z.object({
    token: z.string().nullable(),
    pageId: z.string().nullable(),
  }),
  youtube: z.object({
    apiKey: z.string().nullable(),
    channelId: z.string().nullable(),
    accessToken: z.string().nullable(),
    refreshToken: z.string().nullable(),
  }),
});

interface SocialMediaSettingsProps {
  campaignId: string;
  initialSettings?: SocialMediaSettings;
  onSettingsUpdated?: () => void;
}

interface ValidationStatus {
  isValid?: boolean;
  message?: string;
  isLoading: boolean;
}

export function SocialMediaSettings({
  campaignId,
  initialSettings,
  onSettingsUpdated
}: SocialMediaSettingsProps) {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  const [, setLocation] = useLocation();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ Instagram wizard
  const [showInstagramWizard, setShowInstagramWizard] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Instagram –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const [instagramSettings, setInstagramSettings] = useState<any>(null);
  const [loadingInstagramSettings, setLoadingInstagramSettings] = useState(false);
  
  // –°—Ç–∞—Ç—É—Å—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ—Ü—Å–µ—Ç–∏
  const [telegramStatus, setTelegramStatus] = useState<ValidationStatus>({ isLoading: false });
  const [vkStatus, setVkStatus] = useState<ValidationStatus>({ isLoading: false });
  const [instagramStatus, setInstagramStatus] = useState<ValidationStatus>({ isLoading: false });
  const [facebookStatus, setFacebookStatus] = useState<ValidationStatus>({ isLoading: false });
  const [youtubeStatus, setYoutubeStatus] = useState<ValidationStatus>({ isLoading: false });

  const form = useForm<SocialMediaSettings>({
    resolver: zodResolver(socialMediaSettingsSchema),
    defaultValues: initialSettings || {
      telegram: { token: null, chatId: null },
      vk: { token: null, groupId: null },
      instagram: { token: null, accessToken: null, businessAccountId: null, appId: null, appSecret: null },
      facebook: { token: null, pageId: null },
      youtube: { apiKey: null, channelId: null, accessToken: null, refreshToken: null }
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Instagram –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const loadInstagramSettings = async () => {
    console.log('üî• Loading Instagram settings for campaign:', campaignId);
    setLoadingInstagramSettings(true);
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ —Ä–æ—É—Ç–µ—Ä –∏–º–µ–µ—Ç fallback –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–∫–µ–Ω
      const response = await fetch(`/api/campaigns/${campaignId}/instagram-settings`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const responseText = await response.text();
      console.log('üî• Raw response text:', responseText);
      console.log('üî• Response status:', response.status);
      console.log('üî• Response headers:', response.headers);
      
      let data;
      try {
        data = JSON.parse(responseText);
        console.log('üî• Parsed JSON data:', data);
      } catch (e) {
        console.error('üî• Failed to parse JSON:', e);
        console.log('üî• Response is not valid JSON');
        return;
      }
      
      if (data.success && data.settings) {
        setInstagramSettings(data.settings);
        console.log('üî• Instagram settings loaded successfully');
      } else {
        console.log('üî• No Instagram settings found or request failed');
        console.log('üî• Response data:', data);
      }
    } catch (error: any) {
      console.error('üî• Error loading Instagram settings:', error);
      console.error('üî• Error response:', error.response?.data);
      console.error('üî• Error status:', error.response?.status);
      console.error('üî• Error message:', error.message);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (error.response?.status === 401) {
        console.log('üî• Authorization error - need to refresh token');
      }
    } finally {
      setLoadingInstagramSettings(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º Instagram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (campaignId) {
      loadInstagramSettings();
    }
  }, [campaignId]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∫–æ–≥–¥–∞ Instagram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  useEffect(() => {
    if (instagramSettings) {
      console.log('üî• Updating form with Instagram settings:', instagramSettings);
      console.log('üî• Current form values before update:', form.getValues('instagram'));
      
      // –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∫ —Ñ–æ—Ä–º–∞—Ç—É —Å—Ö–µ–º—ã —Ñ–æ—Ä–º—ã
      const formattedInstagramData = {
        token: instagramSettings.longLivedToken || instagramSettings.accessToken || instagramSettings.token || '',
        accessToken: instagramSettings.longLivedToken || instagramSettings.accessToken || instagramSettings.token || '',
        businessAccountId: instagramSettings.businessAccountId || instagramSettings.instagramId || '',
        appId: instagramSettings.appId || '',
        appSecret: instagramSettings.appSecret || '',
      };
      
      console.log('üî• Formatted Instagram data for form:', formattedInstagramData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      form.setValue('instagram.token', formattedInstagramData.token);
      form.setValue('instagram.accessToken', formattedInstagramData.accessToken);
      form.setValue('instagram.businessAccountId', formattedInstagramData.businessAccountId);
      form.setValue('instagram.appId', formattedInstagramData.appId);
      form.setValue('instagram.appSecret', formattedInstagramData.appSecret);
      
      console.log('üî• Form values after update:', form.getValues('instagram'));
      console.log('üî• Form state dirty?', form.formState.isDirty);
      console.log('üî• Form field values individual check:');
      console.log('  - token:', form.getValues('instagram.token'));
      console.log('  - accessToken:', form.getValues('instagram.accessToken')); 
      console.log('  - businessAccountId:', form.getValues('instagram.businessAccountId'));
      console.log('  - appId:', form.getValues('instagram.appId'));
      console.log('  - appSecret:', form.getValues('instagram.appSecret'));
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
      form.trigger('instagram');
    }
  }, [instagramSettings, form]);



  // –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π
  const validateTelegramToken = async () => {
    const token = form.getValues("telegram.token");
    if (!token) {
      toast({
        variant: "destructive",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
      });
      return;
    }
    
    try {
      setTelegramStatus({ isLoading: true });
      const response = await api.post('/validate/telegram', { token });
      
      setTelegramStatus({
        isLoading: false,
        isValid: response.data.success,
        message: response.data.message
      });
      
      toast({
        variant: response.data.success ? "default" : "destructive",
        description: response.data.message
      });

      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (response.data.success) {
        console.log('üî• Telegram –≤–∞–ª–∏–¥–µ–Ω, –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
        await onSubmit(form.getValues());
      }
    } catch (error) {
      console.error('Error validating Telegram token:', error);
      setTelegramStatus({
        isLoading: false,
        isValid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞'
      });
      
      toast({
        variant: "destructive",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Telegram"
      });
    }
  };
  
  const validateVkToken = async () => {
    const token = form.getValues("vk.token");
    const groupId = form.getValues("vk.groupId");
    
    if (!token) {
      toast({
        variant: "destructive",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
      });
      return;
    }
    
    try {
      setVkStatus({ isLoading: true });
      const response = await api.post('/validate/vk', { token, groupId });
      
      setVkStatus({
        isLoading: false,
        isValid: response.data.success,
        message: response.data.message
      });
      
      toast({
        variant: response.data.success ? "default" : "destructive",
        description: response.data.message
      });

      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (response.data.success) {
        console.log('üî• VK –≤–∞–ª–∏–¥–µ–Ω, –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
        await onSubmit(form.getValues());
      }
    } catch (error) {
      console.error('Error validating VK token:', error);
      setVkStatus({
        isLoading: false,
        isValid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞'
      });
      
      toast({
        variant: "destructive",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"
      });
    }
  };
  
  const validateInstagramToken = async () => {
    const token = form.getValues("instagram.token");
    
    if (!token) {
      toast({
        variant: "destructive",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Instagram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
      });
      return;
    }
    
    try {
      setInstagramStatus({ isLoading: true });
      const response = await api.post('/validate/instagram', { token });
      
      setInstagramStatus({
        isLoading: false,
        isValid: response.data.success,
        message: response.data.message
      });
      
      toast({
        variant: response.data.success ? "default" : "destructive",
        description: response.data.message
      });

      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (response.data.success) {
        console.log('üî• Instagram –≤–∞–ª–∏–¥–µ–Ω, –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
        await onSubmit(form.getValues());
      }
    } catch (error) {
      console.error('Error validating Instagram token:', error);
      setInstagramStatus({
        isLoading: false,
        isValid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞'
      });
      
      toast({
        variant: "destructive",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Instagram"
      });
    }
  };

  const fetchInstagramBusinessId = async () => {
    const accessToken = form.getValues("instagram.token");
    if (!accessToken) {
      toast({
        variant: "destructive",
        description: "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Access Token"
      });
      return;
    }
    
    try {
      setInstagramStatus({ isLoading: true });
      console.log('üîç Fetching Instagram Business Account ID...');
      
      const response = await api.post(`/campaigns/${campaignId}/fetch-instagram-business-id`, {
        accessToken
      });
      
      if (response.data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Ñ–æ—Ä–º—ã —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º Business Account ID
        form.setValue('instagram.businessAccountId', response.data.businessAccountId);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await loadInstagramSettings();
        
        toast({
          variant: "default",
          description: `Business Account ID –ø–æ–ª—É—á–µ–Ω: ${response.data.businessAccountId}`
        });
        
        console.log('‚úÖ Instagram Business Account ID fetched:', response.data.businessAccountId);
      } else {
        toast({
          variant: "destructive",
          description: response.data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Business Account ID"
        });
      }
      
      setInstagramStatus({ isLoading: false });
    } catch (error: any) {
      console.error('Error fetching Instagram Business ID:', error);
      setInstagramStatus({ isLoading: false });
      
      let errorMessage = error.response?.data?.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Instagram Business Account ID";
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏, –ø–æ–∫–∞–∂–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (error.response?.data?.details?.availablePages) {
        const pages = error.response.data.details.availablePages;
        const pageInfo = pages.map((p: any) => {
          let status = '–Ω–µ—Ç Instagram';
          if (p.hasInstagramBusiness) status = '–µ—Å—Ç—å Business Account';
          else if (p.hasConnectedInstagram) status = '–µ—Å—Ç—å Connected Account';
          return `${p.name} (${status})`;
        }).join(', ');
        errorMessage += `\n\n–í–∞—à–∏ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageInfo}`;
      }
      
      toast({
        variant: "destructive",
        description: errorMessage
      });
    }
  };
  
  const validateFacebookToken = async () => {
    const token = form.getValues("facebook.token");
    const pageId = form.getValues("facebook.pageId");
    
    if (!token) {
      toast({
        variant: "destructive",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Facebook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
      });
      return;
    }
    
    try {
      setFacebookStatus({ isLoading: true });
      const response = await api.post('/validate/facebook', { token, pageId });
      
      setFacebookStatus({
        isLoading: false,
        isValid: response.data.success,
        message: response.data.message
      });
      
      toast({
        variant: response.data.success ? "default" : "destructive",
        description: response.data.message
      });

      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (response.data.success) {
        console.log('üî• Facebook –≤–∞–ª–∏–¥–µ–Ω, –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
        await onSubmit(form.getValues());
      }
    } catch (error) {
      console.error('Error validating Facebook token:', error);
      setFacebookStatus({
        isLoading: false,
        isValid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞'
      });
      
      toast({
        variant: "destructive",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Facebook"
      });
    }
  };
  
  const validateYoutubeApiKey = async () => {
    const apiKey = form.getValues("youtube.apiKey");
    const channelId = form.getValues("youtube.channelId");
    
    if (!apiKey) {
      toast({
        variant: "destructive",
        description: "–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á YouTube –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
      });
      return;
    }
    
    try {
      setYoutubeStatus({ isLoading: true });
      const response = await api.post('/validate/youtube', { apiKey, channelId });
      
      setYoutubeStatus({
        isLoading: false,
        isValid: response.data.success,
        message: response.data.message
      });
      
      toast({
        variant: response.data.success ? "default" : "destructive",
        description: response.data.message
      });

      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (response.data.success) {
        console.log('üî• YouTube –≤–∞–ª–∏–¥–µ–Ω, –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...');
        await onSubmit(form.getValues());
      }
    } catch (error) {
      console.error('Error validating YouTube API key:', error);
      setYoutubeStatus({
        isLoading: false,
        isValid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞'
      });
      
      toast({
        variant: "destructive",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á YouTube"
      });
    }
  };
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const ValidationBadge = ({ status }: { status: ValidationStatus }) => {
    if (status.isLoading) {
      return <Badge variant="outline" className="ml-2"><Loader2 className="h-4 w-4 animate-spin" /></Badge>;
    }
    
    if (status.isValid === undefined) {
      return null;
    }
    
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <Badge variant={status.isValid ? "success" : "destructive"} className="ml-2">
              {status.isValid ? 
                <CheckCircle className="h-4 w-4 mr-1" /> : 
                <XCircle className="h-4 w-4 mr-1" />
              }
              {status.isValid ? "–í–∞–ª–∏–¥–µ–Ω" : "–û—à–∏–±–∫–∞"}
            </Badge>
          </TooltipTrigger>
          <TooltipContent>
            <p>{status.message || (status.isValid ? "–ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω" : "–ö–ª—é—á –Ω–µ –≤–∞–ª–∏–¥–µ–Ω")}</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  };

  const onSubmit = async (data: SocialMediaSettings) => {
    console.log('üî• [SAVE SETTINGS] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', data);
    console.log('üî• [SAVE SETTINGS] Campaign ID:', campaignId);
    console.log('üî• [SAVE SETTINGS] Form data:', JSON.stringify(data, null, 2));
    
    try {
      setIsLoading(true);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à API endpoint –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Directus
      console.log('üî• [SAVE SETTINGS] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å –∫ /api/campaigns/', campaignId);
      const response = await api.patch(`/api/campaigns/${campaignId}`, {
        social_media_settings: data
      });

      console.log('üî• [SAVE SETTINGS] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ü—Å–µ—Ç–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
      });

      onSettingsUpdated?.();
    } catch (error: any) {
      console.error('üî• [SAVE SETTINGS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      console.error('üî• [SAVE SETTINGS] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞!",
        description: error.response?.data?.message || error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <Accordion type="multiple" className="space-y-2">
          {/* Telegram Settings */}
          <AccordionItem value="telegram">
            <AccordionTrigger className="py-2">
              <div className="flex items-center space-x-2">
                <span>Telegram</span>
                <ValidationBadge status={telegramStatus} />
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-2">
              <FormField
                control={form.control}
                name="telegram.token"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Bot Token</FormLabel>
                    <div className="flex space-x-2">
                      <FormControl>
                        <Input 
                          type="password" 
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞" 
                          {...field} 
                          value={field.value || ''} 
                        />
                      </FormControl>
                      <Button 
                        type="button" 
                        variant="outline" 
                        size="sm"
                        onClick={validateTelegramToken}
                        disabled={telegramStatus.isLoading}
                      >
                        {telegramStatus.isLoading ? 
                          <Loader2 className="h-4 w-4 animate-spin" /> : 
                          <AlertCircle className="h-4 w-4" />
                        }
                      </Button>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="telegram.chatId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ID –ß–∞—Ç–∞ –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: -1001234567890 –∏–ª–∏ @channel_name" 
                        {...field} 
                        value={field.value || ''}
                        className={field.value?.startsWith('@') ? "border-green-500" : ""}
                      />
                    </FormControl>
                    <div className="text-xs text-muted-foreground">
                      <span className="font-medium text-orange-600">–í–∞–∂–Ω–æ!</span> –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª—É—á—à–µ —É–∫–∞–∑—ã–≤–∞—Ç—å @username –∫–∞–Ω–∞–ª–∞.
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </AccordionContent>
          </AccordionItem>

          {/* VK Settings */}
          <AccordionItem value="vk">
            <AccordionTrigger className="py-2">
              <div className="flex items-center space-x-2">
                <span>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</span>
                <ValidationBadge status={vkStatus} />
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-2">
              <FormField
                control={form.control}
                name="vk.token"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Access Token</FormLabel>
                    <div className="flex space-x-2">
                      <FormControl>
                        <Input 
                          type="password" 
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞" 
                          {...field} 
                          value={field.value || ''}
                        />
                      </FormControl>
                      <Button 
                        type="button" 
                        variant="outline" 
                        size="sm"
                        onClick={validateVkToken}
                        disabled={vkStatus.isLoading}
                      >
                        {vkStatus.isLoading ? 
                          <Loader2 className="h-4 w-4 animate-spin" /> : 
                          <AlertCircle className="h-4 w-4" />
                        }
                      </Button>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="vk.groupId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ID –ì—Ä—É–ø–ø—ã</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 228626989 (–±–µ–∑ –∑–Ω–∞–∫–∞ –º–∏–Ω—É—Å)" 
                        {...field} 
                        value={field.value || ''}
                      />
                    </FormControl>
                    <div className="text-xs text-muted-foreground">
                      ID –≥—Ä—É–ø–ø—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: vk.com/club<span className="font-semibold">123456789</span>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </AccordionContent>
          </AccordionItem>

          {/* Instagram Settings */}
          <AccordionItem value="instagram">
            <AccordionTrigger className="py-2">
              <div className="flex items-center space-x-2">
                <span>Instagram</span>
                <ValidationBadge status={instagramStatus} />
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-2">
              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-blue-900 dark:text-blue-100">Instagram API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                    <p className="text-sm text-blue-700 dark:text-blue-200 mt-1">
                      –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Instagram API –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
                    </p>
                  </div>
                  <Button 
                    type="button" 
                    variant={instagramSettings?.configured || initialSettings?.instagram?.token ? "default" : "outline"}
                    size="sm"
                    onClick={() => setShowInstagramWizard(!showInstagramWizard)}
                    disabled={loadingInstagramSettings}
                  >
                    {loadingInstagramSettings ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        –ó–∞–≥—Ä—É–∑–∫–∞...
                      </>
                    ) : (instagramSettings?.configured || initialSettings?.instagram?.token) ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ' : '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Instagram'}
                  </Button>
                </div>
              </div>
              
              {showInstagramWizard && (
                <InstagramSetupWizard 
                  campaignId={campaignId}
                  instagramSettings={instagramSettings ? {
                    appId: (instagramSettings as any).appId || '',
                    appSecret: (instagramSettings as any).appSecret || '',
                    instagramId: (instagramSettings as any).businessAccountId || (instagramSettings as any).instagramId || '',
                    accessToken: (instagramSettings as any).longLivedToken || (instagramSettings as any).token || ''
                  } : {
                    appId: initialSettings?.instagram?.appId || '',
                    appSecret: initialSettings?.instagram?.appSecret || '',
                    instagramId: initialSettings?.instagram?.businessAccountId || '',
                    accessToken: initialSettings?.instagram?.token || ''
                  }}
                  onSettingsUpdate={(settings) => {
                    console.log('üîÑ Instagram settings updated:', settings);
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    loadInstagramSettings();
                    
                    // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Ñ–ª–∞–≥ needsRefresh, –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if (settings.needsRefresh) {
                      setTimeout(() => {
                        console.log('üîÑ Delayed refresh of Instagram settings...');
                        loadInstagramSettings();
                      }, 1000);
                    }
                    
                    if (onSettingsUpdated) {
                      onSettingsUpdated();
                    }
                    setShowInstagramWizard(false);
                  }}
                />
              )}
              
              <FormField
                control={form.control}
                name="instagram.token"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Access Token</FormLabel>
                    <div className="flex space-x-2">
                      <FormControl>
                        <Input 
                          type="password" 
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞" 
                          {...field} 
                          value={field.value || ''}
                        />
                      </FormControl>
                      <Button 
                        type="button" 
                        variant="outline" 
                        size="sm"
                        onClick={validateInstagramToken}
                        disabled={instagramStatus.isLoading}
                      >
                        {instagramStatus.isLoading ? 
                          <Loader2 className="h-4 w-4 animate-spin" /> : 
                          <AlertCircle className="h-4 w-4" />
                        }
                      </Button>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="instagram.businessAccountId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ID –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞</FormLabel>
                    <div className="flex space-x-2">
                      <FormControl>
                        <Input 
                          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 17841409299499997" 
                          {...field} 
                          value={field.value || ''}
                        />
                      </FormControl>
                      <Button 
                        type="button" 
                        variant="outline" 
                        size="sm"
                        onClick={fetchInstagramBusinessId}
                        disabled={instagramStatus.isLoading}
                      >
                        {instagramStatus.isLoading ? 
                          <Loader2 className="h-4 w-4 animate-spin" /> : 
                          <span>üîç</span>
                        }
                      </Button>
                    </div>
                    <div className="text-xs text-muted-foreground">
                      –ù–∞–∂–º–∏—Ç–µ üîç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è Business Account ID —á–µ—Ä–µ–∑ Graph API
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </AccordionContent>
          </AccordionItem>

          {/* Facebook Settings */}
          <AccordionItem value="facebook">
            <AccordionTrigger className="py-2">
              <div className="flex items-center space-x-2">
                <span>Facebook</span>
                <ValidationBadge status={facebookStatus} />
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-2">
              <FormField
                control={form.control}
                name="facebook.token"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Access Token</FormLabel>
                    <div className="flex space-x-2">
                      <FormControl>
                        <Input 
                          type="password" 
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞" 
                          {...field} 
                          value={field.value || ''}
                        />
                      </FormControl>
                      <Button 
                        type="button" 
                        variant="outline" 
                        size="sm"
                        onClick={validateFacebookToken}
                        disabled={facebookStatus.isLoading}
                      >
                        {facebookStatus.isLoading ? 
                          <Loader2 className="h-4 w-4 animate-spin" /> : 
                          <AlertCircle className="h-4 w-4" />
                        }
                      </Button>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="facebook.pageId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Page ID</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 102938475647382" 
                        {...field} 
                        value={field.value || ''}
                      />
                    </FormControl>
                    <div className="text-xs text-muted-foreground">
                      ID Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –≤ URL: facebook.com/yourpagename
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </AccordionContent>
          </AccordionItem>

          {/* YouTube Settings */}
          <AccordionItem value="youtube">
            <AccordionTrigger className="py-2">
              <div className="flex items-center space-x-2">
                <span>YouTube</span>
                <ValidationBadge status={youtubeStatus} />
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-2">
              <div className="space-y-4">
                <div className="text-sm text-muted-foreground bg-blue-50 p-3 rounded">
                  <span className="font-medium">–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è YouTube:</span>
                  <br />‚Ä¢ <span className="font-medium">API Key</span> - –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å YouTube API
                  <br />‚Ä¢ <span className="font-medium">ID –ö–∞–Ω–∞–ª–∞</span> - –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                  <br />‚Ä¢ <span className="font-medium">OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</span> - –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ (—Å–º. –Ω–∏–∂–µ)
                </div>
                
                <FormField
                  control={form.control}
                  name="youtube.apiKey"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>API Key (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</FormLabel>
                      <div className="flex space-x-2">
                        <FormControl>
                          <Input 
                            type="password" 
                            placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á YouTube" 
                            {...field} 
                            value={field.value || ''}
                          />
                        </FormControl>
                        <Button 
                          type="button" 
                          variant="outline" 
                          size="sm"
                          onClick={validateYoutubeApiKey}
                          disabled={youtubeStatus.isLoading}
                        >
                          {youtubeStatus.isLoading ? 
                            <Loader2 className="h-4 w-4 animate-spin" /> : 
                            <AlertCircle className="h-4 w-4" />
                          }
                        </Button>
                      </div>
                      <div className="text-xs text-muted-foreground">
                        –ü–æ–ª—É—á–∏—Ç–µ –≤ Google Cloud Console ‚Üí APIs & Services ‚Üí Credentials
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="youtube.channelId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>ID –ö–∞–Ω–∞–ª–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</FormLabel>
                      <FormControl>
                        <Input 
                          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: UCxxxxxxxxxxxxxxxxxxxxxxx" 
                          {...field} 
                          value={field.value || ''}
                        />
                      </FormControl>
                      <div className="text-xs text-muted-foreground">
                        ID –∫–∞–Ω–∞–ª–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ YouTube Studio ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–∞–Ω–∞–ª ‚Üí –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              {/* YouTube OAuth Setup */}
              <div className="border-t pt-4 mt-4">
                <div className="space-y-3">
                  <h4 className="text-sm font-medium">OAuth –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ)</h4>
                  <div className="text-xs text-muted-foreground">
                    –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ API Key –∏ Channel ID –≤—ã–ø–æ–ª–Ω–∏—Ç–µ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
                  </div>
                  
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å OAuth —Ç–æ–∫–µ–Ω–æ–≤ */}
                  <div className="flex items-center space-x-4 text-sm">
                    <div className="flex items-center space-x-1">
                      <span className="text-muted-foreground">Access Token:</span>
                      <span className={form.watch('youtube.accessToken') ? 'text-green-600 font-medium' : 'text-gray-400'}>
                        {form.watch('youtube.accessToken') ? '–ü–æ–ª—É—á–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                      </span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <span className="text-muted-foreground">Refresh Token:</span>
                      <span className={form.watch('youtube.refreshToken') ? 'text-green-600 font-medium' : 'text-gray-400'}>
                        {form.watch('youtube.refreshToken') ? '–ü–æ–ª—É—á–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                      </span>
                    </div>
                  </div>
                  
                  <YouTubeOAuthSetup 
                    onAuthComplete={(authData) => {

                      
                      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
                      if (authData.accessToken) {
                        form.setValue('youtube.accessToken', authData.accessToken);
                      }
                      if (authData.refreshToken) {
                        form.setValue('youtube.refreshToken', authData.refreshToken);
                      }
                      if (authData.channelId) {
                        form.setValue('youtube.channelId', authData.channelId);
                      }
                      
                      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                      form.handleSubmit(onSubmit)();
                    }} 
                  />
                </div>
              </div>
            </AccordionContent>
          </AccordionItem>
        </Accordion>

        <div className="flex justify-end space-x-2 pt-4">
          <Button 
            type="submit" 
            disabled={isLoading}
          >
            {isLoading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          </Button>
        </div>
      </form>
    </Form>
  );
}