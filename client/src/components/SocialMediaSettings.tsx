import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import { Loader2, CheckCircle, XCircle, AlertCircle, Youtube } from "lucide-react";
import { directusApi } from "@/lib/directus";
import { api } from "@/lib/api";
import { apiRequest } from "@/lib/queryClient";
import { Badge } from "@/components/ui/badge";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Card, CardContent } from "@/components/ui/card";
import { YouTubeOAuthSetup } from "./YouTubeOAuthSetup";
import { YouTubeSetupWizard } from "./YouTubeSetupWizard";
import InstagramSetupWizardSimple from "./InstagramSetupWizardSimple";
import VkSetupWizard from "./VkSetupWizard";
import FacebookSetupWizard from "./FacebookSetupWizard";
import type { SocialMediaSettings } from "@shared/schema";

const socialMediaSettingsSchema = z.object({
  telegram: z.object({
    token: z.string().nullable().optional(),
    chatId: z.string().nullable().optional(),
  }).optional(),
  vk: z.object({
    token: z.string().nullable().optional(),
    groupId: z.string().nullable().optional(),
    groupName: z.string().nullable().optional(),
  }).optional(),
  instagram: z.object({
    token: z.string().nullable().optional(),
    accessToken: z.string().nullable().optional(),
    businessAccountId: z.string().nullable().optional(),
    appId: z.string().nullable().optional(),
    appSecret: z.string().nullable().optional(),
  }).optional(),
  facebook: z.object({
    token: z.string().nullable().optional(),
    pageId: z.string().nullable().optional(),
    pageName: z.string().nullable().optional(),
  }).optional(),
  youtube: z.object({
    channelId: z.string().nullable().optional(),
    channelTitle: z.string().nullable().optional(),
    accessToken: z.string().nullable().optional(),
    refreshToken: z.string().nullable().optional(),
  }).optional(),
});

interface SocialMediaSettingsProps {
  campaignId: string;
  initialSettings?: SocialMediaSettings;
  onSettingsUpdated?: () => void;
}

interface ValidationStatus {
  isValid?: boolean;
  message?: string;
  isLoading: boolean;
}

export function SocialMediaSettings({
  campaignId,
  initialSettings,
  onSettingsUpdated
}: SocialMediaSettingsProps) {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();
  const [, setLocation] = useLocation();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ Instagram wizard
  const [showInstagramWizard, setShowInstagramWizard] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ VK wizard
  const [showVkWizard, setShowVkWizard] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ Facebook wizard
  const [showFacebookWizard, setShowFacebookWizard] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ YouTube wizard
  const [showYoutubeWizard, setShowYoutubeWizard] = useState(false);
  
  // –û—Ç–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è YouTube wizard
  useEffect(() => {
    console.log('üé¨ [YouTube State] showYoutubeWizard changed:', showYoutubeWizard);
  }, [showYoutubeWizard]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Instagram –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const [instagramSettings, setInstagramSettings] = useState<any>(null);
  const [loadingInstagramSettings, setLoadingInstagramSettings] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è VK –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const [vkSettings, setVkSettings] = useState<any>(null);
  const [loadingVkSettings, setLoadingVkSettings] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Facebook –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const [facebookSettings, setFacebookSettings] = useState<any>(null);
  const [loadingFacebookSettings, setLoadingFacebookSettings] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è YouTube –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const [youtubeSettings, setYoutubeSettings] = useState<any>(null);
  const [loadingYoutubeSettings, setLoadingYoutubeSettings] = useState(false);
  
  // –°—Ç–∞—Ç—É—Å—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ—Ü—Å–µ—Ç–∏
  const [telegramStatus, setTelegramStatus] = useState<ValidationStatus>({ isLoading: false });
  const [vkStatus, setVkStatus] = useState<ValidationStatus>({ isLoading: false });
  const [instagramStatus, setInstagramStatus] = useState<ValidationStatus>({ isLoading: false });
  const [facebookStatus, setFacebookStatus] = useState<ValidationStatus>({ isLoading: false });
  const [youtubeStatus, setYoutubeStatus] = useState<ValidationStatus>({ isLoading: false });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  const [showAccountSwitcher, setShowAccountSwitcher] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Instagram username
  const [instagramDisplayName, setInstagramDisplayName] = useState<string>('');

  // useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Instagram username –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    const loadInstagramUsername = async () => {
      if (instagramSettings?.businessAccountId && instagramSettings?.accessToken) {
        try {
          console.log('üì± Loading Instagram username for account:', instagramSettings.businessAccountId);
          const response = await fetch(`https://graph.facebook.com/v23.0/${instagramSettings.businessAccountId}?access_token=${instagramSettings.accessToken}&fields=id,username,name`);
          const data = await response.json();
          
          if (data.username) {
            const displayName = `@${data.username}`;
            console.log('üì± Instagram username loaded:', displayName);
            setInstagramDisplayName(displayName);
          } else if (data.name) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º name –µ—Å–ª–∏ username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            console.log('üì± Instagram name loaded:', data.name);
            setInstagramDisplayName(data.name);
          } else {
            console.log('üì± No username or name available');
            setInstagramDisplayName('Instagram Business Account');
          }
        } catch (error) {
          console.error('Error fetching Instagram username:', error);
          setInstagramDisplayName('Instagram Business Account');
        }
      }
    };

    loadInstagramUsername();
  }, [instagramSettings?.businessAccountId, instagramSettings?.accessToken]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ fallback)
  const getInstagramAccountName = (accountId: string) => {
    return 'Instagram Business Account';
  };
  const [loadingAccounts, setLoadingAccounts] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  const [availableInstagramAccounts, setAvailableInstagramAccounts] = useState<Array<{
    id: string;
    name: string;
    username?: string;
  }>>([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è VK URL –ø–∞—Ä—Å–∏–Ω–≥–∞
  const [vkUrlInput, setVkUrlInput] = useState('');
  const [vkGroups, setVkGroups] = useState<Array<{
    id: string;
    name: string;
    screen_name: string;
    members_count: number;
  }>>([]);
  const [loadingVkGroups, setLoadingVkGroups] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
  const isConfigured = (platform: 'instagram' | 'youtube' | 'facebook' | 'vk' | 'telegram') => {
    const settings = form.getValues();
    
    switch (platform) {
      case 'instagram':
        return !!(settings.instagram?.accessToken || settings.instagram?.token) && !!settings.instagram?.businessAccountId;
      case 'youtube':
        return !!settings.youtube?.channelId && !!settings.youtube?.accessToken;
      case 'facebook':
        return !!settings.facebook?.token && !!settings.facebook?.pageId;
      case 'vk':
        return !!settings.vk?.token && !!settings.vk?.groupId;
      case 'telegram':
        return !!settings.telegram?.token && !!settings.telegram?.chatId;
      default:
        return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ VK URL –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è API –∫–ª—é—á–∞
  const parseVkUrl = (url: string) => {
    try {
      // –ò—â–µ–º access_token –≤ URL
      const urlParams = new URLSearchParams(url.split('#')[1] || url.split('?')[1] || '');
      const accessToken = urlParams.get('access_token');
      
      if (accessToken) {
        return accessToken;
      }

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ VK URL
      const tokenMatch = url.match(/access_token=([^&]+)/);
      if (tokenMatch) {
        return tokenMatch[1];
      }

      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ VK URL:', error);
      return null;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ VK URL
  const handleVkUrlParse = () => {
    if (!vkUrlInput.trim()) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞!",
        description: "–í–≤–µ–¥–∏—Ç–µ URL —Å —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞ –í–ö"
      });
      return;
    }

    const token = parseVkUrl(vkUrlInput);
    if (token) {
      form.setValue('vk.token', token);
      setVkUrlInput('');
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ URL"
      });
    } else {
      toast({
        variant: "destructive", 
        title: "–û—à–∏–±–∫–∞!",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ URL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏."
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è VK –≥—Ä—É–ø–ø
  const fetchVkGroups = async () => {
    const token = form.getValues('vk.token');
    if (!token) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω VK",
        variant: "destructive"
      });
      return;
    }

    setLoadingVkGroups(true);
    try {
      const response = await fetch(`/api/vk/groups?access_token=${token}`);
      const data = await response.json();
      
      if (data.success && data.groups) {
        setVkGroups(data.groups);
        toast({
          title: "–£—Å–ø–µ—à–Ω–æ",
          description: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.groups.length} –≥—Ä—É–ø–ø`,
        });
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø');
      }
    } catch (error: any) {
      console.error('Error fetching VK groups:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: " + error.message,
        variant: "destructive"
      });
      setVkGroups([]);
    } finally {
      setLoadingVkGroups(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ VK –≥—Ä—É–ø–ø—ã
  const handleVkGroupSelect = (groupId: string, groupName: string) => {
    form.setValue('vk.groupId', groupId);
    form.setValue('vk.groupName', groupName);
    setVkGroups([]); // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    toast({
      title: "–ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞",
      description: `–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: ${groupName}`,
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Facebook –º–∞—Å—Ç–µ—Ä–∞
  const handleFacebookComplete = (data: { token: string; pageId: string; pageName: string }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥ –∫–æ–Ω—Å–æ–ª–∏
    if (data.token.includes('Facebook Wizard:') || data.token.includes('%20') || data.token.includes('FacebookSetupWizard')) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
        variant: "destructive",
      });
      return;
    }

    form.setValue('facebook.token', data.token);
    form.setValue('facebook.pageId', data.pageId);
    form.setValue('facebook.pageName', data.pageName);
    toast({
      title: "Facebook –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
      description: `–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${data.pageName}`,
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è YouTube –º–∞—Å—Ç–µ—Ä–∞
  const handleYoutubeComplete = async (data: { 
    channelId: string; 
    channelTitle: string; 
    accessToken: string; 
    refreshToken: string;
    channelInfo: any;
    campaignId?: string;  // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—å campaignId
  }) => {
    const targetCampaignId = data.campaignId || campaignId;
    
    console.log('üé¨ [YouTube Complete] Setting form values:', {
      channelId: data.channelId,
      channelTitle: data.channelTitle,
      originalCampaignId: campaignId,
      targetCampaignId: targetCampaignId,
      campaignIdFromData: data.campaignId
    });

    // –ï—Å–ª–∏ campaignId –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é
    if (data.campaignId && data.campaignId !== campaignId) {
      console.log('üéØ [YouTube Complete] Saving to different campaign:', data.campaignId);
      
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ API
        const response = await fetch(`/api/campaigns/${data.campaignId}`, {
          method: 'PATCH',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            social_media_settings: {
              youtube: {
                channelId: data.channelId,
                channelTitle: data.channelTitle,
                accessToken: data.accessToken,
                refreshToken: data.refreshToken
              }
            }
          })
        });
        
        if (response.ok) {
          console.log('‚úÖ [YouTube Complete] Settings saved to correct campaign:', data.campaignId);
          toast({
            title: "YouTube –Ω–∞—Å—Ç—Ä–æ–µ–Ω!",
            description: `–ö–∞–Ω–∞–ª "${data.channelTitle}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é`
          });
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        console.error('‚ùå [YouTube Complete] Error saving to target campaign:', error);
        toast({
          title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é",
          variant: "destructive"
        });
      }
    } else {
      // –û–±—ã—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â—É—é –∫–∞–º–ø–∞–Ω–∏—é
      form.setValue('youtube.channelId', data.channelId);
      form.setValue('youtube.channelTitle', data.channelTitle);
      form.setValue('youtube.accessToken', data.accessToken);
      form.setValue('youtube.refreshToken', data.refreshToken);
      
      try {
        await onSubmit(form.getValues());
        console.log('‚úÖ [YouTube Complete] Settings automatically saved to current campaign');
        
        toast({
          title: "YouTube –Ω–∞—Å—Ç—Ä–æ–µ–Ω!",
          description: `–ö–∞–Ω–∞–ª "${data.channelTitle}" –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ`
        });
      } catch (error) {
        console.error('‚ùå [YouTube Complete] Error saving settings:', error);
        toast({
          title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
          description: "YouTube –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
          variant: "destructive"
        });
      }
    }
  };

  const form = useForm<SocialMediaSettings>({
    resolver: zodResolver(socialMediaSettingsSchema),
    defaultValues: {
      telegram: initialSettings?.telegram || { token: '', chatId: '' },
      vk: initialSettings?.vk || { token: '', groupId: '', groupName: '' },
      instagram: initialSettings?.instagram || { token: '', accessToken: '', businessAccountId: '', appId: '', appSecret: '' },
      facebook: initialSettings?.facebook || { token: '', pageId: '', pageName: '' },
      youtube: initialSettings?.youtube || { channelId: '', channelTitle: '', accessToken: '', refreshToken: '' }
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ VK –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const loadVkSettings = async () => {
    setLoadingVkSettings(true);
    try {
      console.log('üîÑ Loading VK settings from database...');
      
      const response = await fetch(`/api/campaigns/${campaignId}/vk-settings`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ VK settings loaded:', data);
        
        if (data.success && data.settings) {
          setVkSettings(data.settings);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          if (data.settings.token) {
            form.setValue('vk.token', data.settings.token);
          }
          if (data.settings.groupId) {
            form.setValue('vk.groupId', data.settings.groupId);
          }
          
          console.log('üîÑ VK form fields updated with database values');
        } else {
          console.log('‚ÑπÔ∏è No VK settings found in database');
          setVkSettings(null);
        }
      } else {
        console.error('‚ùå Failed to load VK settings:', response.statusText);
      }
    } catch (error: any) {
      console.error('‚ùå Error loading VK settings:', error);
    } finally {
      setLoadingVkSettings(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Instagram –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  const handleSwitchInstagramAccount = async () => {
    console.log('üîÑ Instagram: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è');
    console.log('üîÑ Instagram: –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', instagramSettings);
    
    if (!instagramSettings?.accessToken) {
      console.log('‚ùå Instagram: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç accessToken');
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Instagram —Ç–æ–∫–µ–Ω"
      });
      return;
    }

    setLoadingAccounts(true);
    try {
      console.log('üîç Instagram: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...');
      const response = await fetch(`/api/campaigns/${campaignId}/discover-instagram-accounts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          accessToken: instagramSettings.accessToken
        })
      });

      const data = await response.json();
      console.log('üìä Instagram: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
      
      if (data.success && data.accounts) {
        console.log('‚úÖ Instagram: –ù–∞–π–¥–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã:', data.accounts);
        setAvailableInstagramAccounts(data.accounts);
        setShowAccountSwitcher(true);
        toast({
          title: "–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã",
          description: `–ù–∞–π–¥–µ–Ω–æ ${data.accounts.length} Instagram Business –∞–∫–∫–∞—É–Ω—Ç–æ–≤`
        });
      } else {
        console.log('‚ùå Instagram: –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', data);
        throw new Error(data.error || '–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error: any) {
      console.error('‚ùå Instagram: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoadingAccounts(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleSelectNewAccount = async (accountId: string, accountName: string) => {
    try {
      setLoadingAccounts(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const currentSettings = form.getValues();
      const updatedSettings = {
        ...currentSettings,
        instagram: {
          ...currentSettings.instagram,
          businessAccountId: accountId
        }
      };
      
      await onSubmit(updatedSettings);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Instagram
      await loadInstagramSettings();
      
      setShowAccountSwitcher(false);
      toast({
        title: "–ê–∫–∫–∞—É–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω",
        description: `–í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: ${accountName}`
      });
    } catch (error: any) {
      console.error('Error switching Instagram account:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
        variant: "destructive"
      });
    } finally {
      setLoadingAccounts(false);
    }
  };

  const loadInstagramSettings = async () => {
    setLoadingInstagramSettings(true);
    try {
      console.log('üîÑ [DEBUG] –ó–∞–≥—Ä—É–∂–∞–µ–º Instagram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏:', campaignId);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API client —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π 
      const response = await api.get(`/campaigns/${campaignId}/instagram-settings`);
      const data = response.data;
      
      console.log('üîÑ [DEBUG] –û—Ç–≤–µ—Ç –æ—Ç Instagram API:', data);
      
      if (data.success && data.settings) {
        console.log('‚úÖ [DEBUG] Instagram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', data.settings);
        setInstagramSettings(data.settings);
      } else {
        console.log('‚ö†Ô∏è [DEBUG] Instagram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ:', data);
        setInstagramSettings(null);
      }
    } catch (error: any) {
      console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Instagram –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (error.response?.status === 401) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      }
      setInstagramSettings(null);
    } finally {
      setLoadingInstagramSettings(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Facebook –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const loadFacebookSettings = async () => {
    setLoadingFacebookSettings(true);
    try {
      console.log('üîÑ Loading Facebook settings from database...');
      
      const response = await fetch(`/api/campaigns/${campaignId}/facebook-settings`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Facebook settings loaded:', data);
        
        if (data.success && data.settings) {
          setFacebookSettings(data.settings);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          if (data.settings.token) {
            form.setValue('facebook.token', data.settings.token);
          }
          if (data.settings.pageId) {
            form.setValue('facebook.pageId', data.settings.pageId);
          }
          if (data.settings.pageName) {
            form.setValue('facebook.pageName', data.settings.pageName);
          }
          
          console.log('üîÑ Facebook form fields updated with database values');
        } else {
          console.log('‚ÑπÔ∏è No Facebook settings found in database');
          setFacebookSettings(null);
        }
      } else {
        console.error('‚ùå Failed to load Facebook settings:', response.statusText);
      }
    } catch (error: any) {
      console.error('‚ùå Error loading Facebook settings:', error);
    } finally {
      setLoadingFacebookSettings(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ YouTube –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const loadYoutubeSettings = async () => {
    setLoadingYoutubeSettings(true);
    try {
      console.log('üìã [YOUTUBE-SETTINGS] Loading YouTube settings from database...');
      
      const response = await fetch(`/api/campaigns/${campaignId}/youtube-settings`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('üìã [YOUTUBE-SETTINGS] YouTube settings loaded:', data);
        
        if (data.success && data.settings) {
          setYoutubeSettings(data.settings);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          if (data.settings.accessToken) {
            form.setValue('youtube.accessToken', data.settings.accessToken);
          }
          if (data.settings.refreshToken) {
            form.setValue('youtube.refreshToken', data.settings.refreshToken);
          }
          if (data.settings.channelId) {
            form.setValue('youtube.channelId', data.settings.channelId);
          }
          if (data.settings.channelTitle) {
            form.setValue('youtube.channelTitle', data.settings.channelTitle);
          }
          
          console.log('üìã [YOUTUBE-SETTINGS] YouTube form fields updated with database values');
        } else {
          console.log('‚ÑπÔ∏è No YouTube settings found in database');
          setYoutubeSettings(null);
        }
      } else {
        console.error('‚ùå Failed to load YouTube settings:', response.statusText);
      }
    } catch (error: any) {
      console.error('‚ùå Error loading YouTube settings:', error);
    } finally {
      setLoadingYoutubeSettings(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º Instagram, VK, Facebook –∏ YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (campaignId) {
      loadInstagramSettings();
      loadVkSettings();
      loadFacebookSettings();
      loadYoutubeSettings();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è YouTube –º–∞—Å—Ç–µ—Ä–∞
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get('openYouTube') === 'true') {
        console.log('üé¨ [YouTube Settings] Auto-opening YouTube wizard from URL parameter');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        setTimeout(() => {
          loadYoutubeSettings();
        }, 1000);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã, –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        setTimeout(() => {
          setShowYoutubeWizard(true);
        }, 1500);
        
        // –û—á–∏—â–∞–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä
        const newUrl = new URL(window.location.href);
        newUrl.searchParams.delete('openYouTube');
        window.history.replaceState({}, '', newUrl.toString());
      }
    }
  }, [campaignId]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∫–æ–≥–¥–∞ Instagram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  useEffect(() => {
    if (instagramSettings) {
      
      // –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∫ —Ñ–æ—Ä–º–∞—Ç—É —Å—Ö–µ–º—ã —Ñ–æ—Ä–º—ã
      const formattedInstagramData = {
        token: instagramSettings.longLivedToken || instagramSettings.accessToken || instagramSettings.token || '',
        accessToken: instagramSettings.longLivedToken || instagramSettings.accessToken || instagramSettings.token || '',
        businessAccountId: instagramSettings.businessAccountId || instagramSettings.instagramId || '',
        appId: instagramSettings.appId || '',
        appSecret: instagramSettings.appSecret || '',
      };
      
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      form.setValue('instagram.token', formattedInstagramData.token);
      form.setValue('instagram.accessToken', formattedInstagramData.accessToken);
      form.setValue('instagram.businessAccountId', formattedInstagramData.businessAccountId);
      form.setValue('instagram.appId', formattedInstagramData.appId);
      form.setValue('instagram.appSecret', formattedInstagramData.appSecret);
      
      console.log('  - token:', form.getValues('instagram.token'));
      console.log('  - accessToken:', form.getValues('instagram.accessToken')); 
      console.log('  - businessAccountId:', form.getValues('instagram.businessAccountId'));
      console.log('  - appId:', form.getValues('instagram.appId'));
      console.log('  - appSecret:', form.getValues('instagram.appSecret'));
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
      form.trigger('instagram');
    }
  }, [instagramSettings, form]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∫–æ–≥–¥–∞ VK –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  useEffect(() => {
    if (vkSettings) {
      console.log('üîÑ Updating VK form fields with database values:', vkSettings);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
      if (vkSettings.token) {
        form.setValue('vk.token', vkSettings.token);
      }
      if (vkSettings.groupId) {
        form.setValue('vk.groupId', vkSettings.groupId);
      }
      
      console.log('‚úÖ VK form fields updated:', {
        token: form.getValues('vk.token'),
        groupId: form.getValues('vk.groupId'),
        groupName: vkSettings.groupName
      });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
      form.trigger('vk');
    }
  }, [vkSettings, form]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∫–æ–≥–¥–∞ Facebook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  useEffect(() => {
    if (facebookSettings) {
      console.log('üîÑ Updating Facebook form fields with database values:', facebookSettings);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥ –∫–æ–Ω—Å–æ–ª–∏
      const token = facebookSettings.token || '';
      if (token.includes('Facebook Wizard:') || token.includes('%20') || token.includes('FacebookSetupWizard')) {
        console.error('‚ùå Facebook token is corrupted with console log data');
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
      if (facebookSettings.token) {
        form.setValue('facebook.token', facebookSettings.token);
      }
      if (facebookSettings.pageId) {
        form.setValue('facebook.pageId', facebookSettings.pageId);
      }
      if (facebookSettings.pageName) {
        form.setValue('facebook.pageName', facebookSettings.pageName);
      }
      
      console.log('‚úÖ Facebook form fields updated:', {
        token: form.getValues('facebook.token'),
        pageId: form.getValues('facebook.pageId'),
        pageName: form.getValues('facebook.pageName')
      });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
      form.trigger('facebook');
    }
  }, [facebookSettings, form]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∫–æ–≥–¥–∞ YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  useEffect(() => {
    if (youtubeSettings) {
      console.log('üìã [YOUTUBE-SETTINGS] Updating YouTube form fields with database values:', youtubeSettings);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
      if (youtubeSettings.accessToken) {
        form.setValue('youtube.accessToken', youtubeSettings.accessToken);
      }
      if (youtubeSettings.refreshToken) {
        form.setValue('youtube.refreshToken', youtubeSettings.refreshToken);
      }
      if (youtubeSettings.channelId) {
        form.setValue('youtube.channelId', youtubeSettings.channelId);
      }
      if (youtubeSettings.channelTitle) {
        form.setValue('youtube.channelTitle', youtubeSettings.channelTitle);
      }
      
      console.log('üìã [YOUTUBE-SETTINGS] YouTube form fields updated:', {
        accessToken: form.getValues('youtube.accessToken'),
        refreshToken: form.getValues('youtube.refreshToken'),
        channelId: form.getValues('youtube.channelId'),
        channelTitle: form.getValues('youtube.channelTitle')
      });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
      form.trigger(['youtube.accessToken', 'youtube.channelId']);
    }
  }, [youtubeSettings, form]);

  // –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π
  const validateTelegramToken = async () => {
    const token = form.getValues("telegram.token");
    if (!token) {
      toast({
        variant: "destructive",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
      });
      return;
    }
    
    try {
      setTelegramStatus({ isLoading: true });
      const response = await api.post('/validate/telegram', { token });
      
      setTelegramStatus({
        isLoading: false,
        isValid: response.data.success,
        message: response.data.message
      });
      
      toast({
        variant: response.data.success ? "default" : "destructive",
        description: response.data.message
      });

      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (response.data.success) {
        await onSubmit(form.getValues());
      }
    } catch (error) {
      console.error('Error validating Telegram token:', error);
      setTelegramStatus({
        isLoading: false,
        isValid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞'
      });
      
      toast({
        variant: "destructive",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Telegram"
      });
    }
  };
  
  const validateVkToken = async () => {
    const token = form.getValues("vk.token");
    const groupId = form.getValues("vk.groupId");
    
    if (!token) {
      toast({
        variant: "destructive",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
      });
      return;
    }
    
    try {
      setVkStatus({ isLoading: true });
      const response = await api.post('/validate/vk', { token, groupId });
      
      setVkStatus({
        isLoading: false,
        isValid: response.data.success,
        message: response.data.message
      });
      
      toast({
        variant: response.data.success ? "default" : "destructive",
        description: response.data.message
      });

      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (response.data.success) {
        await onSubmit(form.getValues());
      }
    } catch (error) {
      console.error('Error validating VK token:', error);
      setVkStatus({
        isLoading: false,
        isValid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞'
      });
      
      toast({
        variant: "destructive",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"
      });
    }
  };
  
  const validateInstagramToken = async () => {
    const token = form.getValues("instagram.token");
    
    if (!token) {
      toast({
        variant: "destructive",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Instagram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
      });
      return;
    }
    
    try {
      setInstagramStatus({ isLoading: true });
      const response = await api.post('/validate/instagram', { token });
      
      setInstagramStatus({
        isLoading: false,
        isValid: response.data.success,
        message: response.data.message
      });
      
      toast({
        variant: response.data.success ? "default" : "destructive",
        description: response.data.message
      });

      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (response.data.success) {
        await onSubmit(form.getValues());
      }
    } catch (error) {
      console.error('Error validating Instagram token:', error);
      setInstagramStatus({
        isLoading: false,
        isValid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞'
      });
      
      toast({
        variant: "destructive",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Instagram"
      });
    }
  };

  const fetchInstagramBusinessId = async () => {
    const accessToken = form.getValues("instagram.token");
    if (!accessToken) {
      toast({
        variant: "destructive",
        description: "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Access Token"
      });
      return;
    }
    
    try {
      setInstagramStatus({ isLoading: true });
      console.log('üîç Fetching Instagram Business Account ID...');
      
      const response = await api.post(`/campaigns/${campaignId}/fetch-instagram-business-id`, {
        accessToken
      });
      
      if (response.data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Ñ–æ—Ä–º—ã —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º Business Account ID
        form.setValue('instagram.businessAccountId', response.data.businessAccountId);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await loadInstagramSettings();
        
        toast({
          variant: "default",
          description: `Business Account ID –ø–æ–ª—É—á–µ–Ω: ${response.data.businessAccountId}`
        });
        
        console.log('‚úÖ Instagram Business Account ID fetched:', response.data.businessAccountId);
      } else {
        toast({
          variant: "destructive",
          description: response.data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Business Account ID"
        });
      }
      
      setInstagramStatus({ isLoading: false });
    } catch (error: any) {
      console.error('Error fetching Instagram Business ID:', error);
      setInstagramStatus({ isLoading: false });
      
      let errorMessage = error.response?.data?.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Instagram Business Account ID";
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏, –ø–æ–∫–∞–∂–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (error.response?.data?.details?.availablePages) {
        const pages = error.response.data.details.availablePages;
        const pageInfo = pages.map((p: any) => {
          let status = '–Ω–µ—Ç Instagram';
          if (p.hasInstagramBusiness) status = '–µ—Å—Ç—å Business Account';
          else if (p.hasConnectedInstagram) status = '–µ—Å—Ç—å Connected Account';
          return `${p.name} (${status})`;
        }).join(', ');
        errorMessage += `\n\n–í–∞—à–∏ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageInfo}`;
      }
      
      toast({
        variant: "destructive",
        description: errorMessage
      });
    }
  };

  const discoverInstagramAccounts = async () => {
    const accessToken = form.getValues("instagram.token");
    if (!accessToken) {
      toast({
        variant: "destructive",
        description: "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ Access Token"
      });
      return;
    }

    try {
      setInstagramStatus({ isLoading: true });
      console.log('üîç Discovering all Instagram accounts...');
      
      const response = await api.post(`/campaigns/${campaignId}/discover-instagram-accounts`, {
        accessToken
      });
      
      if (response.data.success && response.data.accounts) {
        setAvailableInstagramAccounts(response.data.accounts);
        console.log('‚úÖ Instagram accounts discovered:', response.data.accounts);
        
        if (response.data.accounts.length === 0) {
          toast({
            variant: "destructive",
            description: "–ù–µ –Ω–∞–π–¥–µ–Ω–æ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"
          });
        } else {
          toast({
            variant: "default",
            description: `–ù–∞–π–¥–µ–Ω–æ ${response.data.accounts.length} Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤`
          });
        }
      } else {
        toast({
          variant: "destructive",
          description: response.data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        });
      }
      
      setInstagramStatus({ isLoading: false });
    } catch (error: any) {
      console.error('Error discovering Instagram accounts:', error);
      setInstagramStatus({ isLoading: false });
      
      toast({
        variant: "destructive",
        description: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
      });
    }
  };

  const selectKnownInstagramAccount = async (pageId: string, instagramId: string, pageName: string) => {
    const accessToken = form.getValues("instagram.token");
    if (!accessToken) {
      toast({
        variant: "destructive",
        description: "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ Access Token"
      });
      return;
    }

    try {
      setInstagramStatus({ isLoading: true });
      console.log(`üîç Selecting known Instagram account: ${instagramId} from page ${pageName}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
      form.setValue('instagram.businessAccountId', instagramId);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
      const formData = form.getValues();
      formData.instagram = {
        ...formData.instagram,
        businessAccountId: instagramId
      };
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è consistency
      await onSubmit(formData);
      
      toast({
        variant: "default",
        description: `Instagram –∞–∫–∫–∞—É–Ω—Ç "${pageName}" –≤—ã–±—Ä–∞–Ω (ID: ${instagramId})`
      });
      
      console.log('‚úÖ Known Instagram account selected and saved successfully');
      setInstagramStatus({ isLoading: false });
    } catch (error: any) {
      console.error('Error selecting known Instagram account:', error);
      setInstagramStatus({ isLoading: false });
      
      toast({
        variant: "destructive",
        description: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞"
      });
    }
  };
  
  const validateFacebookToken = async () => {
    const token = form.getValues("facebook.token");
    const pageId = form.getValues("facebook.pageId");
    
    if (!token) {
      toast({
        variant: "destructive",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Facebook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
      });
      return;
    }
    
    try {
      setFacebookStatus({ isLoading: true });
      const response = await api.post('/validate/facebook', { token, pageId });
      
      setFacebookStatus({
        isLoading: false,
        isValid: response.data.success,
        message: response.data.message
      });
      
      toast({
        variant: response.data.success ? "default" : "destructive",
        description: response.data.message
      });

      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (response.data.success) {
        await onSubmit(form.getValues());
      }
    } catch (error) {
      console.error('Error validating Facebook token:', error);
      setFacebookStatus({
        isLoading: false,
        isValid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞'
      });
      
      toast({
        variant: "destructive",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω Facebook"
      });
    }
  };
  
  const validateYoutubeApiKey = async () => {
    const apiKey = form.getValues("youtube.apiKey");
    const channelId = form.getValues("youtube.channelId");
    
    if (!apiKey) {
      toast({
        variant: "destructive",
        description: "–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á YouTube –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
      });
      return;
    }
    
    try {
      setYoutubeStatus({ isLoading: true });
      const response = await api.post('/validate/youtube', { apiKey, channelId });
      
      setYoutubeStatus({
        isLoading: false,
        isValid: response.data.success,
        message: response.data.message
      });
      
      toast({
        variant: response.data.success ? "default" : "destructive",
        description: response.data.message
      });

      // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (response.data.success) {
        await onSubmit(form.getValues());
      }
    } catch (error) {
      console.error('Error validating YouTube API key:', error);
      setYoutubeStatus({
        isLoading: false,
        isValid: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞'
      });
      
      toast({
        variant: "destructive",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á YouTube"
      });
    }
  };
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const ValidationBadge = ({ status }: { status: ValidationStatus }) => {
    if (status.isLoading) {
      return <Badge variant="outline" className="ml-2"><Loader2 className="h-4 w-4 animate-spin" /></Badge>;
    }
    
    if (status.isValid === undefined) {
      return null;
    }
    
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <Badge variant={status.isValid ? "success" : "destructive"} className="ml-2">
              {status.isValid ? 
                <CheckCircle className="h-4 w-4 mr-1" /> : 
                <XCircle className="h-4 w-4 mr-1" />
              }
              {status.isValid ? "–í–∞–ª–∏–¥–µ–Ω" : "–û—à–∏–±–∫–∞"}
            </Badge>
          </TooltipTrigger>
          <TooltipContent>
            <p>{status.message || (status.isValid ? "–ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω" : "–ö–ª—é—á –Ω–µ –≤–∞–ª–∏–¥–µ–Ω")}</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  };

  const onSubmit = async (data: SocialMediaSettings) => {
    
    try {
      setIsLoading(true);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º apiRequest –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const response = await apiRequest(`/api/campaigns/${campaignId}`, {
        method: 'PATCH',
        data: {
          social_media_settings: data
        }
      });


      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ü—Å–µ—Ç–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
      });

      onSettingsUpdated?.();
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞!",
        description: error.response?.data?.message || error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <Accordion type="multiple" className="space-y-2">
          {/* Telegram Settings */}
          <AccordionItem value="telegram">
            <AccordionTrigger className="py-2">
              <div className="flex items-center space-x-2">
                <span>Telegram</span>
                {isConfigured('telegram') && <Badge variant="secondary" className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100">–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ</Badge>}
                <ValidationBadge status={telegramStatus} />
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-2">
              <FormField
                control={form.control}
                name="telegram.token"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Bot Token</FormLabel>
                    <div className="flex space-x-2">
                      <FormControl>
                        <Input 
                          type="password" 
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞" 
                          {...field} 
                          value={field.value || ''} 
                        />
                      </FormControl>
                      <Button 
                        type="button" 
                        variant="outline" 
                        size="sm"
                        onClick={validateTelegramToken}
                        disabled={telegramStatus.isLoading}
                      >
                        {telegramStatus.isLoading ? 
                          <Loader2 className="h-4 w-4 animate-spin" /> : 
                          <AlertCircle className="h-4 w-4" />
                        }
                      </Button>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="telegram.chatId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ID –ß–∞—Ç–∞ –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: -1001234567890 –∏–ª–∏ @channel_name" 
                        {...field} 
                        value={field.value || ''}
                        className={field.value?.startsWith('@') ? "border-green-500" : ""}
                      />
                    </FormControl>
                    <div className="text-xs text-muted-foreground">
                      <span className="font-medium text-orange-600">–í–∞–∂–Ω–æ!</span> –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ª—É—á—à–µ —É–∫–∞–∑—ã–≤–∞—Ç—å @username –∫–∞–Ω–∞–ª–∞.
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </AccordionContent>
          </AccordionItem>

          {/* VK Settings */}
          <AccordionItem value="vk">
            <AccordionTrigger className="py-2">
              <div className="flex items-center space-x-2">
                <span>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</span>
                {isConfigured('vk') && <Badge variant="secondary" className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100">–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ</Badge>}
                <ValidationBadge status={vkStatus} />
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-2">
              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-blue-900 dark:text-blue-100">VK OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                    <p className="text-sm text-blue-700 dark:text-blue-200 mt-1">
                      {vkSettings?.groupName ? `–ì—Ä—É–ø–ø–∞: ${vkSettings.groupName}` : '–í—Å—Ç–∞–≤—å—Ç–µ URL —Å access_token –æ—Ç VK OAuth'}
                    </p>
                  </div>
                  <Button 
                    type="button" 
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      const vkOAuthUrl = 'https://oauth.vk.com/authorize?client_id=6121396&scope=1073737727&redirect_uri=https://oauth.vk.com/blank.html&display=page&response_type=token&revoke=1';
                      window.open(vkOAuthUrl, '_blank', 'width=600,height=600');
                    }}
                  >
                    üîó –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –í–ö
                  </Button>
                </div>
              </div>

              {/* VK Authorization URL */}
              <div className="space-y-4">
                <FormItem>
                  <FormLabel className="text-base font-medium">Authorization URL</FormLabel>
                  <div className="flex space-x-2">
                    <Input
                      placeholder="https://oauth.vk.com/blank.html#access_token=vk1.a.enhtsafWTnsHKIpezjv..."
                      value={vkUrlInput}
                      onChange={(e) => {
                        setVkUrlInput(e.target.value);
                        
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –≤–≤–æ–¥–µ URL
                        const inputValue = e.target.value.trim();
                        if (inputValue.includes('access_token=')) {
                          const token = parseVkUrl(inputValue);
                          if (token) {
                            form.setValue('vk.token', token);
                          }
                        }
                      }}
                      className="flex-1"
                    />
                    <Button 
                      type="button" 
                      variant="outline" 
                      size="sm"
                      onClick={validateVkToken}
                      disabled={vkStatus.isLoading || !form.watch('vk.token')}
                    >
                      {vkStatus.isLoading ? 
                        <Loader2 className="h-4 w-4 animate-spin" /> : 
                        <AlertCircle className="h-4 w-4" />
                      }
                    </Button>
                    <Button 
                      type="button" 
                      variant="default" 
                      size="sm"
                      onClick={fetchVkGroups}
                      disabled={loadingVkGroups || !form.watch('vk.token')}
                    >
                      {loadingVkGroups ? 
                        <Loader2 className="h-4 w-4 animate-spin" /> : 
                        'üìã –ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã'
                      }
                    </Button>
                  </div>
                  <div className="text-xs text-muted-foreground">
                    –í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π URL —Å —Ç–æ–∫–µ–Ω–æ–º –æ—Ç VK OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code className="bg-gray-100 px-1 py-0.5 rounded text-xs">vk1.a.</code> –∏ –±—ã—Ç—å –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–º (100+ —Å–∏–º–≤–æ–ª–æ–≤)
                  </div>
                  {form.watch('vk.token') && (
                    <div className="text-xs text-green-600 bg-green-50 px-2 py-1 rounded">
                      ‚úÖ –¢–æ–∫–µ–Ω –∏–∑–≤–ª–µ—á–µ–Ω: {form.watch('vk.token')?.substring(0, 20)}...
                    </div>
                  )}
                </FormItem>
              </div>
              
              {/* VK Groups Selection - Instagram Style */}
              {vkGroups.length > 0 && (
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h4 className="text-sm font-medium text-gray-900 dark:text-gray-100">
                      üéØ –í—ã–±–µ—Ä–∏—Ç–µ VK –≥—Ä—É–ø–ø—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    </h4>
                    <span className="text-xs text-gray-500">
                      –ù–∞–π–¥–µ–Ω–æ: {vkGroups.length} –≥—Ä—É–ø–ø
                    </span>
                  </div>
                  
                  <div className="grid gap-3 max-h-64 overflow-y-auto">
                    {vkGroups.map((group) => {
                      const isSelected = form.getValues('vk.groupId') === group.id;
                      return (
                        <div 
                          key={group.id}
                          className={`
                            p-4 rounded-lg border cursor-pointer transition-all duration-200
                            ${isSelected 
                              ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20 ring-2 ring-blue-200 dark:ring-blue-800' 
                              : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800'
                            }
                          `}
                          onClick={() => handleVkGroupSelect(group.id, group.name)}
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex-1">
                              <div className="flex items-center space-x-3">
                                <div className="w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                                  <span className="text-blue-600 dark:text-blue-400 font-semibold text-lg">
                                    {group.name.charAt(0).toUpperCase()}
                                  </span>
                                </div>
                                <div className="flex-1">
                                  <div className="font-medium text-gray-900 dark:text-gray-100">
                                    {group.name}
                                  </div>
                                  <div className="text-sm text-gray-500 dark:text-gray-400">
                                    @{group.screen_name}
                                  </div>
                                  <div className="text-xs text-gray-400 dark:text-gray-500">
                                    üë• {group.members_count.toLocaleString()} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                  </div>
                                </div>
                              </div>
                            </div>
                            
                            <div className="flex items-center space-x-2">
                              {isSelected && (
                                <div className="flex items-center space-x-1 text-blue-600 dark:text-blue-400">
                                  <CheckCircle className="h-4 w-4" />
                                  <span className="text-xs font-medium">–í—ã–±—Ä–∞–Ω–æ</span>
                                </div>
                              )}
                              <Button 
                                type="button" 
                                variant={isSelected ? "default" : "outline"}
                                size="sm"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleVkGroupSelect(group.id, group.name);
                                }}
                              >
                                {isSelected ? '–í—ã–±—Ä–∞–Ω–æ' : '–í—ã–±—Ä–∞—Ç—å'}
                              </Button>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
              <FormField
                control={form.control}
                name="vk.groupId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ID –ì—Ä—É–ø–ø—ã</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 228626989 (–±–µ–∑ –∑–Ω–∞–∫–∞ –º–∏–Ω—É—Å)" 
                        {...field} 
                        value={field.value || ''}
                      />
                    </FormControl>
                    <div className="text-xs text-muted-foreground">
                      ID –≥—Ä—É–ø–ø—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: vk.com/club<span className="font-semibold">123456789</span>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </AccordionContent>
          </AccordionItem>

          {/* Instagram Settings */}
          <AccordionItem value="instagram">
            <AccordionTrigger className="py-2">
              <div className="flex items-center space-x-2">
                <span>Instagram</span>
                {isConfigured('instagram') && <Badge variant="secondary" className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100">–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ</Badge>}
                <ValidationBadge status={instagramStatus} />
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-2">
              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-blue-900 dark:text-blue-100">Instagram API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                    <p className="text-sm text-blue-700 dark:text-blue-200 mt-1">
                      {instagramSettings?.businessAccountId 
                        ? `–ê–∫–∫–∞—É–Ω—Ç: ${instagramDisplayName || getInstagramAccountName(instagramSettings.businessAccountId)} (${instagramSettings.businessAccountId})` 
                        : '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Instagram API –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏'
                      }
                    </p>
                  </div>
                  <div className="flex space-x-2">
                    {instagramSettings?.accessToken && (
                      <Button 
                        type="button" 
                        variant="outline"
                        size="sm"
                        onClick={handleSwitchInstagramAccount}
                        disabled={loadingAccounts || loadingInstagramSettings}
                      >
                        {loadingAccounts ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            –ü–æ–∏—Å–∫...
                          </>
                        ) : (
                          <>
                            üîÑ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                          </>
                        )}
                      </Button>
                    )}
                    <Button 
                      type="button" 
                      variant={instagramSettings?.configured || instagramSettings?.token ? "default" : "outline"}
                      size="sm"
                      onClick={() => {
                        console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º Instagram –º–∞—Å—Ç–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–ø–µ—Ä–µ—Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
                        setShowInstagramWizard(true);
                      }}
                      disabled={loadingInstagramSettings}
                    >
                      {loadingInstagramSettings ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          –ó–∞–≥—Ä—É–∑–∫–∞...
                        </>
                      ) : (instagramSettings?.configured || instagramSettings?.token) ? '–ü–µ—Ä–µ—Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å' : '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Instagram'}
                    </Button>
                  </div>
                </div>
              </div>
              
              {/* Instagram Setup Wizard Inline */}
              {showInstagramWizard && (
                <div className="border rounded-lg p-4 bg-gray-50 dark:bg-gray-800">
                  <InstagramSetupWizardSimple
                    campaignId={campaignId}
                    onCancel={() => {
                      console.log('Instagram wizard: –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞');
                      setShowInstagramWizard(false);
                    }}
                    onComplete={() => {
                      console.log('üîÑ Instagram setup completed, refreshing Instagram settings...');
                      setShowInstagramWizard(false);
                      
                      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Instagram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                      loadInstagramSettings();
                      
                      if (onSettingsUpdated) {
                        onSettingsUpdated();
                      }
                      toast({
                        title: "Instagram OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                        description: "Instagram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏",
                      });
                    }}
                  />
                </div>
              )}

              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram */}
              {showAccountSwitcher && availableInstagramAccounts.length > 0 && (
                <div className="space-y-3 p-4 border rounded-lg bg-gray-50">
                  <div className="flex justify-between items-center">
                    <h4 className="font-medium">–í—ã–±–µ—Ä–∏—Ç–µ Instagram Business –∞–∫–∫–∞—É–Ω—Ç:</h4>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => setShowAccountSwitcher(false)}
                    >
                      –û—Ç–º–µ–Ω–∞
                    </Button>
                  </div>
                  <div className="space-y-2">
                    {availableInstagramAccounts.map((account) => (
                      <Card key={account.id} className="cursor-pointer hover:bg-gray-100 transition-colors">
                        <CardContent className="p-3">
                          <div className="flex justify-between items-center">
                            <div>
                              <h5 className="font-semibold">{account.name || getInstagramAccountName(account.id)}</h5>
                              {account.username && (
                                <p className="text-sm text-gray-600">@{account.username}</p>
                              )}
                              <span className="text-xs text-gray-500">ID: {account.id}</span>
                              {instagramSettings?.businessAccountId === account.id && (
                                <div className="flex items-center mt-1">
                                  <CheckCircle className="w-4 h-4 text-green-600 mr-1" />
                                  <span className="text-xs text-green-600 font-medium">–ê–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</span>
                                </div>
                              )}
                            </div>
                            <Button 
                              onClick={() => handleSelectNewAccount(account.id, account.name || getInstagramAccountName(account.id))}
                              disabled={loadingAccounts}
                              size="sm"
                              variant={instagramSettings?.businessAccountId === account.id ? "default" : "outline"}
                            >
                              {instagramSettings?.businessAccountId === account.id ? '–¢–µ–∫—É—â–∏–π' : '–í—ã–±—Ä–∞—Ç—å'}
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Instagram –ø–æ–ª—è —Å–∫—Ä—ã—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            </AccordionContent>
          </AccordionItem>

          {/* Facebook Settings */}
          <AccordionItem value="facebook">
            <AccordionTrigger className="py-2">
              <div className="flex items-center space-x-2">
                <span>Facebook</span>
                {isConfigured('facebook') && <Badge variant="secondary" className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100">–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ</Badge>}
                <ValidationBadge status={facebookStatus} />
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-2">
              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-blue-900 dark:text-blue-100">Facebook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                    <p className="text-sm text-blue-700 dark:text-blue-200 mt-1">
                      {form.watch('facebook.pageName') 
                        ? `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${form.watch('facebook.pageName')} (${form.watch('facebook.pageId')})` 
                        : '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Facebook —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏'
                      }
                    </p>
                  </div>
                  <div className="flex space-x-2">
                    {/* Debug: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å Instagram settings */}
                    <div className="text-xs text-gray-500">
                      IG: {instagramSettings ? '–∑–∞–≥—Ä—É–∂–µ–Ω' : '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'} | 
                      token: {instagramSettings?.token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'} | 
                      longLived: {instagramSettings?.longLivedToken ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}
                    </div>
                    
                    {(instagramSettings?.token || instagramSettings?.longLivedToken || instagramSettings?.accessToken) && (
                      <Button 
                        type="button" 
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è Facebook: longLivedToken > token > accessToken
                          const tokenToUse = instagramSettings.longLivedToken || instagramSettings.token || instagramSettings.accessToken;
                          console.log('üìã –ö–æ–ø–∏—Ä—É–µ–º Instagram —Ç–æ–∫–µ–Ω –≤ Facebook:', {
                            instagramSettings: instagramSettings,
                            longLivedToken: instagramSettings.longLivedToken ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
                            token: instagramSettings.token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç', 
                            accessToken: instagramSettings.accessToken ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
                            using: tokenToUse?.substring(0, 20) + '...'
                          });
                          form.setValue('facebook.token', tokenToUse);
                          toast({
                            title: "–¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω",
                            description: `Instagram ${instagramSettings.longLivedToken ? '–¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏–π ' : ''}—Ç–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Facebook`,
                          });
                        }}
                        className="text-blue-600 border-blue-300 hover:bg-blue-100"
                      >
                        üìã –í–∑—è—Ç—å –∏–∑ Instagram
                      </Button>
                    )}
                    <Button 
                      type="button" 
                      variant={form.watch('facebook.token') ? "default" : "outline"}
                      size="sm"
                      onClick={() => {
                        console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º Facebook –º–∞—Å—Ç–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–ø–µ—Ä–µ—Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
                        setShowFacebookWizard(true);
                      }}
                    >
                      {form.watch('facebook.token') ? '–ü–µ—Ä–µ—Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å' : '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Facebook'}
                    </Button>
                  </div>
                </div>
              </div>
              
              {/* Facebook Setup Wizard Inline */}
              {showFacebookWizard && (
                <div className="border rounded-lg p-4 bg-gray-50 dark:bg-gray-800">
                  <FacebookSetupWizard
                    campaignId={campaignId}
                    onCancel={() => {
                      console.log('Facebook wizard: –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞');
                      setShowFacebookWizard(false);
                    }}
                    onComplete={(data) => {
                      console.log('üîÑ Facebook setup completed, updating form...');
                      handleFacebookComplete(data);
                      setShowFacebookWizard(false);
                    }}
                  />
                </div>
              )}
              
              {/* Facebook –ø–æ–ª—è —Å–∫—Ä—ã—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            </AccordionContent>
          </AccordionItem>

          {/* YouTube Settings */}
          <AccordionItem value="youtube">
            <AccordionTrigger className="py-2">
              <div className="flex items-center space-x-2">
                <span>YouTube</span>
                {isConfigured('youtube') && <Badge variant="secondary" className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100">–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ</Badge>}
              </div>
            </AccordionTrigger>
            <AccordionContent className="space-y-4 pt-2">
              <div className="space-y-4">
                {/* YouTube Channel Info Display */}
                {form.watch('youtube.channelId') && form.watch('youtube.channelTitle') ? (
                  <div className="bg-green-50 p-3 rounded-lg border border-green-200">
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium text-green-800">YouTube –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω</h4>
                        <p className="text-sm text-green-700">
                          –ö–∞–Ω–∞–ª: <span className="font-medium">{form.watch('youtube.channelTitle')}</span>
                        </p>
                        <p className="text-xs text-green-600">
                          ID: {form.watch('youtube.channelId')}
                        </p>
                      </div>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => setShowYoutubeWizard(true)}
                        className="border-green-300 text-green-700 hover:bg-green-100"
                      >
                        –ü–µ—Ä–µ—Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-3">
                    <div className="text-sm text-muted-foreground bg-blue-50 p-3 rounded">
                      <span className="font-medium">–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ YouTube:</span>
                      <br />‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–π API –∫–ª—é—á —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                      <br />‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                      <br />‚Ä¢ Channel ID –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    </div>
                    
                    <Button
                      type="button"
                      onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log('üé¨ [YouTube Button] Button clicked, opening wizard...');
                        setShowYoutubeWizard(true);
                      }}
                      className="w-full"
                      variant="outline"
                    >
                      <Youtube className="h-4 w-4 mr-2" />
                      –ù–∞—Å—Ç—Ä–æ–∏—Ç—å YouTube
                    </Button>
                  </div>
                )}
              </div>
              
              {/* YouTube Setup Wizard Inline */}
              {showYoutubeWizard && (
                <div className="border rounded-lg p-4 bg-gray-50 dark:bg-gray-800">
                  <YouTubeSetupWizard
                    campaignId={campaignId}
                    initialSettings={initialSettings}
                    onComplete={(data) => {
                      console.log('üé¨ YouTube setup completed, updating form...');
                      handleYoutubeComplete(data);
                      setShowYoutubeWizard(false);
                    }}
                  />
                </div>
              )}
            </AccordionContent>
          </AccordionItem>
        </Accordion>

        <div className="flex justify-end space-x-2 pt-4">
          <Button 
            type="submit" 
            disabled={isLoading}

          >
            {isLoading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          </Button>
        </div>
        </form>
      </Form>
      


      {/* VK Setup Wizard Dialog */}
      {showVkWizard && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] overflow-auto">
            <VkSetupWizard
              campaignId={campaignId}
              onComplete={() => {
                console.log('üîÑ VK setup completed, refreshing VK settings...');
                setShowVkWizard(false);
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º VK –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                loadVkSettings();
                
                if (onSettingsUpdated) {
                  onSettingsUpdated();
                }
                toast({
                  title: "VK OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                  description: "VK –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏",
                });
              }}
              onCancel={() => {
                console.log('VK wizard: –ó–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ onCancel');
                setShowVkWizard(false);
              }}
            />
          </div>
        </div>
      )}
    </div>
  );
}