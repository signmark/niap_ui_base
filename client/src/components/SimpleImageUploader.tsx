import { useState, useEffect } from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Upload } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import axios from "axios";

interface SimpleImageUploaderProps {
  value: string;
  onChange: (url: string) => void;
  placeholder?: string;
}

export function SimpleImageUploader({ 
  value, 
  onChange, 
  placeholder = "–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" 
}: SimpleImageUploaderProps) {
  const { toast } = useToast();
  const [isUploading, setIsUploading] = useState(false);
  const [localValue, setLocalValue] = useState(value || '');

  useEffect(() => {
    setLocalValue(value || '');
  }, [value]);

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];
      const formData = new FormData();
      formData.append('image', file);

      setIsUploading(true);

      try {
        const response = await axios.post('/api/imgur/upload-file', formData, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        });

        console.log('üì§ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);

        const imageUrl = response.data.url || response.data.link;
        
        if (imageUrl) {
          setLocalValue(imageUrl);
          onChange(imageUrl);
          toast({
            title: '–£—Å–ø–µ—à–Ω–æ',
            description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'
          });
          // –ù–ï –æ—á–∏—â–∞–µ–º e.target.value —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        } else {
          throw new Error('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        }
      } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          variant: 'destructive'
        });
      } finally {
        setIsUploading(false);
      }
    }
  };

  return (
    <div className="space-y-2">
      <Input
        value={localValue}
        onChange={(e) => {
          setLocalValue(e.target.value);
          onChange(e.target.value);
        }}
        placeholder={placeholder}
      />
      
      <div className="flex items-center gap-2">
        <input
          type="file"
          accept="image/*"
          onChange={handleFileUpload}
          style={{ display: 'none' }}
          id="simple-file-upload"
        />
        <Button
          type="button"
          variant="outline"
          onClick={() => document.getElementById('simple-file-upload')?.click()}
          disabled={isUploading}
          className="w-full"
        >
          <Upload className="w-4 h-4 mr-2" />
          {isUploading ? '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...' : '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª'}
        </Button>
      </div>
    </div>
  );
}