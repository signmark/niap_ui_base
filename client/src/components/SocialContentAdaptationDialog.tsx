import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2, CheckCircle2, Instagram, MessageCircle, Facebook, Check, Video } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Label } from "@/components/ui/label";
import RichTextEditor from "./RichTextEditor";

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
type SocialPlatform = 'instagram' | 'telegram' | 'vk' | 'facebook' | 'youtube';

interface SocialContentAdaptationDialogProps {
  contentId: string;
  originalContent: string;
  onClose: () => void;
}

interface PlatformContent {
  content: string;
  isEnabled: boolean;
  isEdited: boolean;
}

export function SocialContentAdaptationDialog({ 
  contentId, 
  originalContent, 
  onClose 
}: SocialContentAdaptationDialogProps) {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState<SocialPlatform>('instagram');
  const [isGenerating, setIsGenerating] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const [platformsContent, setPlatformsContent] = useState<{[key in SocialPlatform]: PlatformContent}>({
    instagram: { content: adaptContentForPlatform('instagram', originalContent), isEnabled: true, isEdited: false },
    telegram: { content: adaptContentForPlatform('telegram', originalContent), isEnabled: false, isEdited: false },
    vk: { content: adaptContentForPlatform('vk', originalContent), isEnabled: false, isEdited: false },
    facebook: { content: adaptContentForPlatform('facebook', originalContent), isEnabled: false, isEdited: false },
    youtube: { content: adaptContentForPlatform('youtube', originalContent), isEnabled: false, isEdited: false }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const { mutate: saveAdaptedContent, isPending: isSaving } = useMutation({
    mutationFn: async () => {
      const enabledPlatforms = Object.entries(platformsContent)
        .filter(([_, data]) => data.isEnabled)
        .map(([platform, data]) => ({
          platform,
          content: data.content
        }));

      if (enabledPlatforms.length === 0) {
        throw new Error("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");
      }

      const token = localStorage.getItem('auth_token');
      if (!token) {
        throw new Error("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
      }
      
      return await fetch(`/api/content/${contentId}/adapt`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ socialPlatforms –∫–∞–∫ JSONB –≤ –ë–î
          socialPlatforms: Object.entries(platformsContent)
            .filter(([_, data]) => data.isEnabled)
            .reduce<Record<string, any>>((acc, [platform, data]) => {
              acc[platform] = {
                caption: data.content,         // –¢–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                status: 'pending',             // –°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ 
                isEdited: data.isEdited,       // –§–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                hashtags: extractHashtags(data.content), // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                publishedAt: null,
                postId: null,
                postUrl: null,
                error: null
              };
              return acc;
            }, {})
        })
      }).then(response => {
        if (!response.ok) {
          throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞");
        }
        return response.json();
      });
    },
    onSuccess: () => {
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–ö–æ–Ω—Ç–µ–Ω—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º",
      });
      onClose();
    },
    onError: (error: Error) => {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
      });
    }
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const handleTogglePlatform = (platform: SocialPlatform) => {
    setPlatformsContent(prev => ({
      ...prev,
      [platform]: {
        ...prev[platform],
        isEnabled: !prev[platform].isEnabled
      }
    }));
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const handleContentChange = (platform: SocialPlatform, newContent: string) => {
    setPlatformsContent(prev => ({
      ...prev,
      [platform]: {
        ...prev[platform],
        content: newContent,
        isEdited: true
      }
    }));
  };

  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  function extractHashtags(content: string): string[] {
    if (!content) return [];
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ö—ç—à—Ç–µ–≥–æ–≤ (#—Å–ª–æ–≤–æ)
    const hashtagRegex = /#(\w+)/g;
    const matches = content.match(hashtagRegex);
    
    // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ #
    if (matches) {
      return matches.map(tag => tag.substring(1));
    }
    
    return [];
  }

  function adaptContentForPlatform(platform: SocialPlatform, content: string): string {
    // –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    const baseContent = content || "";
    
    switch (platform) {
      case 'instagram':
        // Instagram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 2200 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —ç–º–æ–¥–∑–∏ –∏ —Ö—ç—à—Ç–µ–≥–∞–º–∏
        // –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—Ö–≤–∞—Ç–∞
        return (baseContent.length > 1800 
          ? baseContent.substring(0, 1800) + "..." 
          : baseContent) + "\n\n#–∫–æ–Ω—Ç–µ–Ω—Ç #smm #–º–∞—Ä–∫–µ—Ç–∏–Ω–≥";
          
      case 'telegram':
        // Telegram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML —Ä–∞–∑–º–µ—Ç–∫—É –∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –¥–ª–∏–Ω—É
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        return baseContent + "\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! üëâ";
        
      case 'vk':
        // –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–∫–æ–ª–æ 15000 —Å–∏–º–≤–æ–ª–æ–≤
        // –°—Ç–∏–ª—å –±–æ–ª–µ–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ
        return baseContent + "\n\n–°—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏ –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏! ‚ù§";
        
      case 'facebook':
        // Facebook –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 63206 —Å–∏–º–≤–æ–ª–æ–≤
        // –°—Ç–∏–ª—å –±–æ–ª–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –±–∏–∑–Ω–µ—Å-–∞—É–¥–∏—Ç–æ—Ä–∏—é
        return baseContent + "\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.";
        
      case 'youtube':
        // YouTube –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º–∏ (–¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤)
        // –°—Ç–∏–ª—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        return baseContent + "\n\nüëç –ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫, –µ—Å–ª–∏ –≤–∏–¥–µ–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω—ã–º!\nüì∫ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ!";
        
      default:
        return baseContent;
    }
  }

  // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const regenerateForPlatform = (platform: SocialPlatform) => {
    setPlatformsContent(prev => ({
      ...prev,
      [platform]: {
        ...prev[platform],
        content: adaptContentForPlatform(platform, originalContent),
        isEdited: false
      }
    }));
  };

  // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const getPlatformIcon = (platform: SocialPlatform) => {
    switch (platform) {
      case 'instagram':
        return <Instagram className="h-4 w-4" />;
      case 'telegram':
        return <MessageCircle className="h-4 w-4" />;
      case 'vk':
        return <MessageCircle className="h-4 w-4" />;
      case 'facebook':
        return <Facebook className="h-4 w-4" />;
      case 'youtube':
        return <Video className="h-4 w-4" />;
      default:
        return null;
    }
  };

  return (
    <Dialog open={true} onOpenChange={() => onClose()}>
      <DialogContent className="sm:max-w-[700px]">
        <DialogHeader>
          <DialogTitle>–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π</DialogTitle>
        </DialogHeader>

        <div className="mt-4">
          <div className="grid grid-cols-4 gap-2 mb-4">
            {(['instagram', 'telegram', 'vk', 'facebook'] as SocialPlatform[]).map(platform => (
              <Button
                key={platform}
                variant={platformsContent[platform].isEnabled ? "default" : "outline"}
                size="sm"
                onClick={() => handleTogglePlatform(platform)}
                className="flex items-center gap-2"
              >
                {getPlatformIcon(platform)}
                <span className="capitalize">{platform}</span>
                {platformsContent[platform].isEnabled && <Check className="h-3 w-3" />}
              </Button>
            ))}
          </div>

          <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as SocialPlatform)}>
            <TabsList className="grid grid-cols-4">
              <TabsTrigger value="instagram" disabled={!platformsContent.instagram.isEnabled}>Instagram</TabsTrigger>
              <TabsTrigger value="telegram" disabled={!platformsContent.telegram.isEnabled}>Telegram</TabsTrigger>
              <TabsTrigger value="vk" disabled={!platformsContent.vk.isEnabled}>VK</TabsTrigger>
              <TabsTrigger value="facebook" disabled={!platformsContent.facebook.isEnabled}>Facebook</TabsTrigger>
            </TabsList>

            {(['instagram', 'telegram', 'vk', 'facebook'] as SocialPlatform[]).map(platform => (
              <TabsContent key={platform} value={platform}>
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <Label>–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {platform}</Label>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={() => regenerateForPlatform(platform)}
                    >
                      –°–±—Ä–æ—Å–∏—Ç—å
                    </Button>
                  </div>
                  <div className="max-h-[400px] overflow-y-auto border rounded-md">
                    <RichTextEditor
                      value={platformsContent[platform].content}
                      onChange={(html: string) => handleContentChange(platform, html)}
                      placeholder={`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è ${platform}...`}
                      className={!platformsContent[platform].isEnabled ? "opacity-50 pointer-events-none" : ""}
                      minHeight={200}
                    />
                  </div>
                </div>
              </TabsContent>
            ))}
          </Tabs>
        </div>

        <DialogFooter className="mt-6">
          <Button variant="outline" onClick={onClose}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onClick={() => saveAdaptedContent()} 
            disabled={isSaving || Object.values(platformsContent).every(p => !p.isEnabled)}
          >
            {isSaving ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
              </>
            ) : (
              <>
                <CheckCircle2 className="mr-2 h-4 w-4" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}