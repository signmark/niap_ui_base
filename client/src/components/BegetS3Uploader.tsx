import { useState, useRef } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Upload, ImageIcon, X } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useAuthStore } from '@/lib/store';

interface BegetS3UploaderProps {
  onUpload: (url: string) => void;
  placeholder?: string;
  accept?: string;
  folder?: string;
}

export function BegetS3Uploader({ 
  onUpload, 
  placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", 
  accept = "image/*",
  folder = "stories"
}: BegetS3UploaderProps) {
  const { toast } = useToast();
  const [isUploading, setIsUploading] = useState(false);
  const [preview, setPreview] = useState<string>('');
  const [fileName, setFileName] = useState<string>('');
  const fileInputRef = useRef<HTMLInputElement>(null);
  const token = useAuthStore(state => state.token);

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setFileName(file.name);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
    const reader = new FileReader();
    reader.onload = (e) => setPreview(e.target?.result as string);
    reader.readAsDataURL(file);

    setIsUploading(true);

    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('folder', folder);
      formData.append('fileName', file.name);

      console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Beget S3:', file.name);
      
      if (!token) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }

      const response = await fetch('/api/beget-s3/upload', {
        method: 'POST',
        body: formData,
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      console.log('üì¶ Response status:', response.status);
      console.log('üì¶ Response ok:', response.ok);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.log('‚ùå Response error text:', errorText);
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }

      const result = await response.json();
      console.log('üì¶ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

      if (result.success && result.url) {
        console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Beget S3:', result.url);
        console.log('üéØ –í—ã–∑—ã–≤–∞–µ–º onUpload —Å URL:', result.url);
        onUpload(result.url);
        toast({
          title: '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω',
          description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ'
        });
      } else {
        console.log('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç success:true –∏–ª–∏ url:', result);
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Beget S3:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
        description: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª',
        variant: 'destructive'
      });
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setPreview('');
      setFileName('');
    } finally {
      setIsUploading(false);
      // –û—á–∏—â–∞–µ–º input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  const clearPreview = () => {
    setPreview('');
    setFileName('');
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex gap-2">
        <Input
          type="file"
          ref={fileInputRef}
          onChange={handleFileSelect}
          accept={accept}
          className="hidden"
          id="beget-s3-file-input"
        />
        
        <Button
          type="button"
          variant="outline"
          onClick={() => fileInputRef.current?.click()}
          disabled={isUploading}
          className="flex-1"
        >
          <Upload className="w-4 h-4 mr-2" />
          {isUploading ? '–ó–∞–≥—Ä—É–∂–∞–µ–º...' : placeholder}
        </Button>
      </div>

      {/* –ü—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      {preview && (
        <div className="relative">
          <div className="border rounded-lg p-4 bg-gray-50">
            <div className="flex items-start gap-3">
              <img 
                src={preview} 
                alt="–ü—Ä–µ–≤—å—é" 
                className="w-16 h-16 object-cover rounded"
              />
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-gray-900 truncate">
                  {fileName}
                </p>
                <p className="text-xs text-gray-500">
                  {isUploading ? '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...' : '–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –æ–±–ª–∞–∫–æ'}
                </p>
              </div>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={clearPreview}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </div>
      )}

      {isUploading && (
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div className="bg-blue-600 h-2 rounded-full animate-pulse" style={{ width: '60%' }}></div>
        </div>
      )}
    </div>
  );
}