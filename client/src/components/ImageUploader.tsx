import { useState, useEffect } from 'react';
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Upload, ImageIcon } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import axios from "axios";
import { UploadProgress } from './UploadProgress';

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–∫—Å–∏-URL
 * @param url –ò—Å—Ö–æ–¥–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns –ü—Ä–æ–∫—Å–∏-URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function getProxiedImageUrl(url: string): string {
  if (!url) return '';

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º URL, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã
  if (url.startsWith('/api/proxy-image')) return url;

  // –î–ª—è imgur —Å—Å—ã–ª–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏
  if (url.match(/^https?:\/\//)) {
    return `/api/proxy-image?url=${encodeURIComponent(url)}`;
  }

  return url;
}

interface ImageUploaderProps {
  value: string;
  onChange: (url: string) => void;
  placeholder?: string;
  id: string;
  forcePreview?: boolean; // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é
}

export function ImageUploader({ 
  value, 
  onChange, 
  placeholder = "–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
  id, 
  forcePreview = false 
}: ImageUploaderProps) {
  const { toast } = useToast();
  const [isUploading, setIsUploading] = useState(false);
  const [isLoading, setIsLoading] = useState(false); // –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [showPreview, setShowPreview] = useState(forcePreview);
  const [previewUrl, setPreviewUrl] = useState('');
  const [displayUrl, setDisplayUrl] = useState<string>('');

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ URL –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è
  useEffect(() => {
    if (value && value.trim() !== '') {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      setPreviewUrl(getProxiedImageUrl(value));
      // –ï—Å–ª–∏ forcePreview=true –∏–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
      setShowPreview(forcePreview || showPreview);
      setDisplayUrl(value.length > 50 ? value.substring(0, 47) + '...' : value);
    } else {
      setShowPreview(false);
      setPreviewUrl('');
      setDisplayUrl('');
    }
  }, [value, forcePreview]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];
      const formData = new FormData();
      formData.append('image', file);

      setIsUploading(true);

      try {

        const response = await axios.post('/api/imgur/upload-file', formData, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        });

        // –ù–û–í–´–ô –ö–û–î: –≤—ã–≤–æ–¥–∏–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏







        // –ü—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º URL –∏–∑ –∫–æ—Ä–Ω—è –æ—Ç–≤–µ—Ç–∞ - –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞
        const imageUrl = response.data.url || response.data.link;

        if (imageUrl) {

          onChange(imageUrl);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          setPreviewUrl(getProxiedImageUrl(imageUrl));
          setShowPreview(true);
          toast({
            title: '–£—Å–ø–µ—à–Ω–æ',
            description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'
          });

          // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
          e.target.value = '';
        } else {
          // –ï—Å–ª–∏ –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç URL, –∏—â–µ–º –≤ data
          let nestedUrl = '';
          if (response.data.data) {
            if (response.data.data.url) {
              nestedUrl = response.data.data.url;

            } else if (response.data.data.link) {
              nestedUrl = response.data.data.link;

            }
          }

          if (nestedUrl) {

            onChange(nestedUrl);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            setPreviewUrl(getProxiedImageUrl(nestedUrl));
            setShowPreview(true);
            toast({
              title: '–£—Å–ø–µ—à–Ω–æ',
              description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'
            });

            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            e.target.value = '';
          } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            toast({
              title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–æ...',
              description: 'URL –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12).',
              variant: 'destructive'
            });
          }
        }
      } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          variant: 'destructive'
        });
      } finally {
        setIsUploading(false);
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageLoadStart = () => {
    setIsLoading(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageLoaded = () => {
    setIsLoading(false);
  };

  return (
    <div className="space-y-2 w-full">
      <div className="flex gap-2 w-full">
        <Input
          id={id}
          placeholder={placeholder}
          value={value}
          onChange={(e) => {
            console.log('üîó ImageUploader: URL –≤–≤–µ–¥–µ–Ω:', e.target.value);
            onChange(e.target.value);
          }}
          className="flex-1"
        />
        <div className="relative flex-shrink-0">
          <Input
            type="file"
            accept="image/*"
            id={`${id}-upload`}
            className="absolute inset-0 opacity-0 w-full h-full cursor-pointer"
            onChange={handleFileUpload}
            disabled={isUploading}
            aria-label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
          />
          <Button 
            type="button" 
            variant="outline" 
            size="icon"
            className="h-9 w-9 flex items-center justify-center"
            tabIndex={-1}
            aria-hidden="true"
            disabled={isUploading}
          >
            <span className="sr-only">–ó–∞–≥—Ä—É–∑–∏—Ç—å</span>
            {isUploading ? (
              <div 
                className="h-4 w-4 border-2 border-primary border-t-transparent rounded-full animate-spin"
                aria-hidden="true" 
              />
            ) : (
              <Upload className="h-4 w-4" />
            )}
          </Button>
        </div>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä—ã—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}

      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º URL, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å */}
      {value && value.trim() !== '' && (
        <div className="text-xs text-muted-foreground ml-1 mt-1 break-all">
          <span className="flex-shrink-0">URL:</span>
          <span className="break-all">{value}</span>
        </div>
      )}

      {showPreview && previewUrl && (
        <div className="mt-2 border rounded-md p-2 bg-muted/20">
          <div className="text-xs text-muted-foreground mb-1">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</div>
          <div className="relative w-full h-40 rounded-md overflow-hidden bg-muted flex items-center justify-center">
            {previewUrl ? (
              <>
                <img 
                  src={previewUrl} 
                  alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" 
                  className="max-h-full max-w-full object-contain"
                  onLoadStart={handleImageLoadStart}
                  onLoad={handleImageLoaded}
                  onError={() => {
                    setIsLoading(false);
                    toast({
                      title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é',
                      description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
                      variant: 'destructive'
                    });
                  }}
                />
              </>
            ) : (
              <div className="flex flex-col items-center justify-center text-muted-foreground">
                <ImageIcon className="h-10 w-10 mb-2" />
                <span>–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</span>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}