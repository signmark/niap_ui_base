import { QueryClient, QueryFunction } from "@tanstack/react-query";
import { useAuthStore } from "@/lib/store";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

interface ApiRequestConfig {
  method?: string;
  data?: unknown;
  params?: Record<string, string>;
  headers?: Record<string, string>;
}

export async function apiRequest(
  url: string,
  config: ApiRequestConfig = {}
): Promise<any> {
  const { method = 'GET', data, params } = config;
  const token = useAuthStore.getState().token;
  const userId = useAuthStore.getState().userId;

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log(`üì§ API –ó–∞–ø—Ä–æ—Å: ${method} ${url}`);
  console.log(`üîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:`, { 
    hasToken: !!token, 
    userId,
    tokenPrefix: token ? token.substring(0, 10) + '...' : null
  });

  const queryString = params ? '?' + new URLSearchParams(params).toString() : '';

  const headers: Record<string, string> = {
    ...(data ? { "Content-Type": "application/json" } : {}),
    ...(token ? { "Authorization": `Bearer ${token}` } : {}),
    "x-user-id": userId || ''
  };

  console.log(`üì§ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:`, { 
    hasAuthHeader: !!headers["Authorization"],
    contentType: headers["Content-Type"],
    userIdHeader: headers["x-user-id"]
  });

  const res = await fetch(url + queryString, {
    method,
    headers,
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  
  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 204 No Content, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
  if (res.status === 204) {
    return { success: true };
  }
  
  try {
    const contentType = res.headers.get('content-type');
    
    if (contentType && contentType.includes('application/json')) {
      return await res.json();
    } else {
      console.warn('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:', contentType);
      const text = await res.text();
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.warn('–ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞:', text.substring(0, 100) + (text.length > 100 ? '...' : ''));
      
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML, –≤–µ—Ä–Ω–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
      // –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫ HTML –≤–º–µ—Å—Ç–æ JSON
      if (text.includes('<!DOCTYPE html>') || text.includes('<html')) {
        console.warn('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON');
        return {
          success: false,
          error: "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.",
          content: {
            title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
            html: "<p>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</p>"
          }
        };
      }
      
      // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç JSON
      try {
        if (text.includes('{') && text.includes('}')) {
          // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ
          const jsonMatch = text.match(/\{.*\}/s);
          if (jsonMatch) {
            return JSON.parse(jsonMatch[0]);
          }
        }
        
        // –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
        return {
          success: false,
          error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞",
          content: {
            title: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞",
            html: "<p>–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</p>"
          }
        };
      } catch (e) {
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ, —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞:', e);
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: ${e.message}`,
          content: {
            title: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            html: "<p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</p>"
          }
        };
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    
    // –í–º–µ—Å—Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
    return {
      success: false,
      error: error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞",
      content: {
        title: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        html: "<p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>"
      }
    };
  }
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const token = useAuthStore.getState().token;
    const userId = useAuthStore.getState().userId;

    try {
      const res = await fetch(queryKey[0] as string, {
        credentials: "include",
        headers: {
          ...(token ? { "Authorization": `Bearer ${token}` } : {}),
          "x-user-id": userId || ''
        }
      });

      if (unauthorizedBehavior === "returnNull" && res.status === 401) {
        return null;
      }

      await throwIfResNotOk(res);
      
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 204 No Content, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
      if (res.status === 204) {
        return { success: true };
      }
      
      try {
        const contentType = res.headers.get('content-type');
        
        if (contentType && contentType.includes('application/json')) {
          return await res.json();
        } else {
          console.warn('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (query):', contentType);
          const text = await res.text();
          
          // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML, –≤–µ—Ä–Ω–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
          if (text.includes('<!DOCTYPE html>') || text.includes('<html')) {
            return {
              success: false,
              error: "–ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.",
              data: []
            };
          }
          
          // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ
          try {
            if (text.includes('{') && text.includes('}')) {
              const jsonMatch = text.match(/\{.*\}/s);
              if (jsonMatch) {
                return JSON.parse(jsonMatch[0]);
              }
            }
            
            // –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç
            return {
              success: false,
              error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞",
              data: []
            };
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞:', e);
            return {
              success: false,
              error: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${e.message}`,
              data: []
            };
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        return {
          success: false,
          error: error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞",
          data: []
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return {
        success: false,
        error: error.message || "–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
        data: []
      };
    }
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});