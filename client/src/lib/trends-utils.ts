/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
 */

export type SentimentCategory = "positive" | "negative" | "neutral" | "unknown";

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
 */
export function getSentimentCategory(sentimentAnalysis?: any): SentimentCategory {
  if (!sentimentAnalysis) return "unknown";
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
  let text = "";
  if (typeof sentimentAnalysis === "string") {
    text = sentimentAnalysis.toLowerCase();
  } else if (typeof sentimentAnalysis === "object") {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤ –æ–±—ä–µ–∫—Ç–µ
    text = (sentimentAnalysis.result || sentimentAnalysis.sentiment || sentimentAnalysis.category || JSON.stringify(sentimentAnalysis)).toLowerCase();
  } else {
    text = String(sentimentAnalysis).toLowerCase();
  }
  
  const positiveKeywords = [
    "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω", "–ø–æ–∑–∏—Ç–∏–≤–Ω", "—Ö–æ—Ä–æ—à", "–æ—Ç–ª–∏—á–Ω", "–ø—Ä–µ–∫—Ä–∞—Å–Ω", 
    "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω", "—É—Å–ø–µ—à–Ω", "–≤—ã–≥–æ–¥–Ω", "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω", "–º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â"
  ];
  
  const negativeKeywords = [
    "–Ω–µ–≥–∞—Ç–∏–≤–Ω", "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω", "–ø–ª–æ—Ö", "—É–∂–∞—Å–Ω", "–ø—Ä–æ–±–ª–µ–º–Ω",
    "—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω", "–æ–ø–∞—Å–Ω", "–Ω–µ—É–¥–∞—á–Ω"
  ];
  
  const neutralKeywords = [
    "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω", "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω", "—É–º–µ—Ä–µ–Ω–Ω", "—Å—Ç–∞–±–∏–ª—å–Ω",
    "–æ–±—ã—á–Ω", "—Å—Ä–µ–¥–Ω", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω"
  ];
  
  if (positiveKeywords.some(keyword => text.includes(keyword))) {
    return "positive";
  }
  
  if (negativeKeywords.some(keyword => text.includes(keyword))) {
    return "negative";
  }
  
  if (neutralKeywords.some(keyword => text.includes(keyword))) {
    return "neutral";
  }
  
  return "unknown";
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
export function getSentimentEmoji(category: SentimentCategory): string {
  switch (category) {
    case "positive":
      return "üòä";
    case "negative":
      return "üòû";
    case "neutral":
      return "üòê";
    default:
      return "‚ùì";
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
export function getSentimentLabel(category: SentimentCategory): string {
  switch (category) {
    case "positive":
      return "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π";
    case "negative":
      return "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π";
    case "neutral":
      return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π";
    default:
      return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π";
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∏–¥ (1K, 1M)
 */
export function formatNumber(num?: number): string {
  if (!num) return "0";
  if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
  if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;
  return num.toString();
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç JSON —Å fallback –∑–Ω–∞—á–µ–Ω–∏–µ–º
 */
export function safeJsonParse<T>(jsonString?: string, fallback: T = null as T): T {
  if (!jsonString) return fallback;
  
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    console.warn('Failed to parse JSON:', error);
    return fallback;
  }
}