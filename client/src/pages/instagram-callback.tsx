import { useEffect, useState } from 'react';
import { useSearch } from 'wouter';

export default function InstagramCallback() {
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [message, setMessage] = useState('');
  const search = useSearch();

  useEffect(() => {
    const params = new URLSearchParams(search);
    const code = params.get('code');
    const state = params.get('state');
    const error = params.get('error');

    console.log('üöÄ Instagram OAuth Callback –∑–∞–ø—É—â–µ–Ω');
    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã URL:', { code: code?.substring(0, 20) + '...', state, error });

    if (error) {
      console.log('‚ùå Facebook OAuth –æ—à–∏–±–∫–∞:', error);
      setStatus('error');
      setMessage(`–û—à–∏–±–∫–∞ Facebook: ${error}`);
      return;
    }

    if (!code || !state) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
      setStatus('error');
      setMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ state –ø–∞—Ä–∞–º–µ—Ç—Ä');
      return;
    }

    // –í—ã–∑—ã–≤–∞–µ–º callback API
    processCallback(code, state);
  }, [search]);

  const processCallback = async (code: string, state: string) => {
    try {
      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      
      const response = await fetch(`/api/instagram/auth/callback?code=${code}&state=${state}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json();
      console.log('üìã –û—Ç–≤–µ—Ç callback API:', data);

      if (response.ok && data.success) {
        console.log('‚úÖ Instagram OAuth —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ wizard —á–µ—Ä–µ–∑ postMessage...');
        
        setStatus('success');
        setMessage('Instagram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–∞–º–ø–∞–Ω–∏–∏.');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
        if (window.opener) {
          const oauthData = {
            type: 'INSTAGRAM_OAUTH_SUCCESS',
            data: {
              token: data.longLivedToken, // –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ OAuth
              appId: data.appId, // App ID –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç–≤–µ—Ç–∞
              instagramAccounts: data.instagramAccounts,
              user: data.user,
              success: true
            }
          };
          
          console.log('üì§ Sending OAuth success data to parent window:', {
            type: oauthData.type,
            tokenPreview: data.longLivedToken?.substring(0, 20) + '...',
            appId: data.appId,
            accountsCount: data.instagramAccounts?.length || 0
          });
          
          window.opener.postMessage(oauthData, window.location.origin);
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          window.close();
        }, 3000);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ callback API:', data.error);
        setStatus('error');
        setMessage(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ callback API');
      }
    } catch (error) {
      console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ callback:', error);
      setStatus('error');
      setMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full mx-auto p-6">
        <div className="bg-white rounded-lg shadow-lg p-8 text-center">
          {status === 'loading' && (
            <>
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <h2 className="text-xl font-semibold text-gray-900 mb-2">
                –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Instagram...
              </h2>
              <p className="text-gray-600">
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
              </p>
            </>
          )}

          {status === 'success' && (
            <>
              <div className="text-green-600 mb-4">
                <svg className="h-12 w-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <h2 className="text-xl font-semibold text-gray-900 mb-2">
                –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
              </h2>
              <p className="text-gray-600 mb-4">
                {message}
              </p>
              <p className="text-sm text-gray-500">
                –≠—Ç–æ –æ–∫–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...
              </p>
            </>
          )}

          {status === 'error' && (
            <>
              <div className="text-red-600 mb-4">
                <svg className="h-12 w-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </div>
              <h2 className="text-xl font-semibold text-gray-900 mb-2">
                –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              </h2>
              <p className="text-gray-600 mb-4">
                {message}
              </p>
              <button
                onClick={() => window.close()}
                className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
              >
                –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
}