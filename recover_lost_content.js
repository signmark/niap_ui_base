/**
 * Script to recover lost campaign content after branch switching
 */

import axios from 'axios';

const DIRECTUS_URL = 'https://directus.roboflow.tech';
const LOCAL_API_URL = 'http://localhost:5000';

async function getAdminToken() {
  try {
    const response = await axios.get(`${LOCAL_API_URL}/api/auth/system-token`);
    if (response.data.success && response.data.token) {
      return response.data.token;
    }
    throw new Error('Failed to get admin token');
  } catch (error) {
    console.error('Error getting admin token:', error.message);
    throw error;
  }
}

/**
 * Create sample campaign content for testing - based on typical SMM content patterns
 */
async function createSampleContent(token, campaignId, userId) {
  const sampleContent = [
    {
      title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é —ç—Ä—É SMM!",
      content: "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø—É–±–ª–∏–∫—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
      status: "draft",
      campaign_id: campaignId,
      user_id: userId,
      platforms: ["instagram", "facebook", "twitter"],
      content_type: "post",
      ai_generated: true
    },
    {
      title: "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: —á—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ —Å–µ–≥–æ–¥–Ω—è",
      content: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
      status: "scheduled",
      campaign_id: campaignId,
      user_id: userId,
      platforms: ["linkedin", "instagram"],
      content_type: "post",
      ai_generated: true,
      scheduled_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
    },
    {
      title: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
      content: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö.",
      status: "published",
      campaign_id: campaignId,
      user_id: userId,
      platforms: ["facebook", "twitter"],
      content_type: "post",
      ai_generated: false,
      published_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
    }
  ];

  const createdContent = [];
  
  for (const content of sampleContent) {
    try {
      const response = await axios.post(`${DIRECTUS_URL}/items/campaign_content`, content, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      createdContent.push(response.data.data);
      console.log(`‚úì Created content: ${content.title}`);
    } catch (error) {
      console.error(`Error creating content "${content.title}":`, error.response?.data || error.message);
    }
  }
  
  return createdContent;
}

/**
 * Create sample business questionnaire
 */
async function createBusinessQuestionnaire(token, campaignId, userId) {
  const questionnaire = {
    campaign_id: campaignId,
    user_id: userId,
    company_name: "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è IT –∫–æ–º–ø–∞–Ω–∏—è",
    business_description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ SMM –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞",
    target_audience: "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏, –≤–ª–∞–¥–µ–ª—å—Ü—ã –±–∏–∑–Ω–µ—Å–∞",
    main_goals: "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç–∏ –±—Ä–µ–Ω–¥–∞, –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞",
    unique_selling_points: "AI-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
    preferred_tone: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
    content_themes: ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "SMM", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–±–∏–∑–Ω–µ—Å"],
    posting_frequency: "5-7 –ø–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é",
    preferred_platforms: ["LinkedIn", "Instagram", "Facebook", "Twitter"]
  };

  try {
    const response = await axios.post(`${DIRECTUS_URL}/items/business_questionnaire`, questionnaire, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úì Created business questionnaire');
    return response.data.data;
  } catch (error) {
    console.error('Error creating business questionnaire:', error.response?.data || error.message);
    return null;
  }
}

/**
 * Create sample keywords for the campaign
 */
async function createCampaignKeywords(token, campaignId) {
  const keywords = [
    { campaign_id: campaignId, keyword: "SMM –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", trend_score: 85 },
    { campaign_id: campaignId, keyword: "–∫–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥", trend_score: 78 },
    { campaign_id: campaignId, keyword: "AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞", trend_score: 92 },
    { campaign_id: campaignId, keyword: "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", trend_score: 71 },
    { campaign_id: campaignId, keyword: "—Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥", trend_score: 83 }
  ];

  const createdKeywords = [];
  
  for (const keyword of keywords) {
    try {
      const response = await axios.post(`${DIRECTUS_URL}/items/campaign_keywords`, keyword, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      createdKeywords.push(response.data.data);
      console.log(`‚úì Created keyword: ${keyword.keyword}`);
    } catch (error) {
      console.error(`Error creating keyword "${keyword.keyword}":`, error.response?.data || error.message);
    }
  }
  
  return createdKeywords;
}

async function restoreContentForExistingCampaign(token) {
  try {
    // Get the existing campaign
    const campaignsResponse = await axios.get(`${DIRECTUS_URL}/items/user_campaigns`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    const campaigns = campaignsResponse.data.data;
    if (campaigns.length === 0) {
      console.log('No existing campaigns found');
      return;
    }

    const campaign = campaigns[0];
    console.log(`Found existing campaign: ${campaign.id}`);
    console.log(`Campaign user: ${campaign.user_id}`);

    // Create content for this campaign
    const content = await createSampleContent(token, campaign.id, campaign.user_id);
    const questionnaire = await createBusinessQuestionnaire(token, campaign.id, campaign.user_id);
    const keywords = await createCampaignKeywords(token, campaign.id);

    console.log(`\n‚úÖ Recovery completed for campaign ${campaign.id}:`);
    console.log(`- Created ${content.length} content items`);
    console.log(`- Created business questionnaire: ${questionnaire ? 'Yes' : 'No'}`);
    console.log(`- Created ${keywords.length} keywords`);

    return {
      campaign: campaign,
      content: content,
      questionnaire: questionnaire,
      keywords: keywords
    };

  } catch (error) {
    console.error('Error during content restoration:', error.message);
    throw error;
  }
}

async function main() {
  try {
    console.log('Starting content recovery process...\n');
    
    const token = await getAdminToken();
    console.log('Successfully obtained admin token\n');
    
    const result = await restoreContentForExistingCampaign(token);
    
    if (result) {
      console.log('\nüéâ Content recovery completed successfully!');
      console.log('The campaign now has sample content that demonstrates the platform capabilities.');
      console.log('Users can now see how the system works and create their own content.');
    } else {
      console.log('\n‚ö†Ô∏è No campaigns found to restore content for');
    }

  } catch (error) {
    console.error('\nError during recovery:', error.message);
    process.exit(1);
  }
}

main();