/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ YouTube refresh_token –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ò—â–µ–º –∫–∞–∫–æ–π refresh_token –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–∞–º–ø–∞–Ω–∏—è—Ö
 */

const DIRECTUS_URL = process.env.DIRECTUS_URL || 'https://directus.roboflow.tech/';
const DIRECTUS_TOKEN = process.env.DIRECTUS_TOKEN;

async function checkYouTubeRefreshTokens() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê YOUTUBE REFRESH TOKENS ===\n');

  if (!DIRECTUS_TOKEN) {
    console.error('‚ùå DIRECTUS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Å YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    console.log('üîç –ü–æ–∏—Å–∫ –∫–∞–º–ø–∞–Ω–∏–π —Å YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...');
    const response = await fetch(`${DIRECTUS_URL}items/user_campaigns`, {
      headers: {
        'Authorization': `Bearer ${DIRECTUS_TOKEN}`
      }
    });

    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–ø–∞–Ω–∏—è–º: ${response.status}`);
      return;
    }

    const data = await response.json();
    const campaigns = data.data || [];

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${campaigns.length} –∫–∞–º–ø–∞–Ω–∏–π`);

    let youtubeCount = 0;
    let tokensFound = [];

    campaigns.forEach(campaign => {
      if (campaign.social_media_settings) {
        let settings;
        try {
          settings = typeof campaign.social_media_settings === 'string' 
            ? JSON.parse(campaign.social_media_settings) 
            : campaign.social_media_settings;
        } catch (e) {
          return;
        }

        if (settings.youtube) {
          youtubeCount++;
          console.log(`\nüìã –ö–∞–º–ø–∞–Ω–∏—è: ${campaign.title || campaign.id}`);
          console.log(`   ID: ${campaign.id}`);
          
          const youtube = settings.youtube;
          console.log(`   API Key: ${youtube.apiKey ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
          console.log(`   Channel ID: ${youtube.channelId || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`   Access Token: ${youtube.accessToken ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
          console.log(`   Refresh Token: ${youtube.refreshToken ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
          
          if (youtube.refreshToken) {
            console.log(`   Refresh Token (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤): ${youtube.refreshToken.substring(0, 20)}...`);
            tokensFound.push({
              campaignId: campaign.id,
              campaignTitle: campaign.title,
              refreshToken: youtube.refreshToken
            });
          }
        }
      }
    });

    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –ö–∞–º–ø–∞–Ω–∏–π —Å YouTube: ${youtubeCount}`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ refresh_token: ${tokensFound.length}`);

    if (tokensFound.length === 0) {
      console.log('\n‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û REFRESH_TOKEN!');
      console.log('üí° –†–µ—à–µ–Ω–∏–µ:');
      console.log('   1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª—é–±—É—é –∫–∞–º–ø–∞–Ω–∏—é');
      console.log('   2. –û—Ç–∫—Ä–æ–π—Ç–µ "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"');
      console.log('   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ YouTube OAuth –∑–∞–Ω–æ–≤–æ');
      console.log('   4. –ù–æ–≤—ã–π refresh_token —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    } else {
      console.log('\n‚úÖ –ù–∞–π–¥–µ–Ω—ã refresh_token:');
      tokensFound.forEach((token, index) => {
        console.log(`   ${index + 1}. ${token.campaignTitle} (${token.campaignId})`);
      });

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
      const firstToken = tokensFound[0];
      console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º refresh_token –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏ "${firstToken.campaignTitle}"...`);
      await testRefreshToken(firstToken.refreshToken);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);
  }
}

async function testRefreshToken(refreshToken) {
  const YOUTUBE_CLIENT_ID = '267968960436-f1fcdat2q3hrn029ine955v5d3t71b2k.apps.googleusercontent.com';
  const YOUTUBE_CLIENT_SECRET = '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';

  try {
    const response = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        client_id: YOUTUBE_CLIENT_ID,
        client_secret: YOUTUBE_CLIENT_SECRET,
        refresh_token: refreshToken,
        grant_type: 'refresh_token'
      })
    });

    const result = await response.json();
    
    if (response.ok && result.access_token) {
      console.log('‚úÖ REFRESH_TOKEN –†–ê–ë–û–¢–ê–ï–¢!');
      console.log(`üîë –ù–æ–≤—ã–π access_token –ø–æ–ª—É—á–µ–Ω: ${result.access_token.substring(0, 30)}...`);
      console.log(`‚è∞ Expires in: ${result.expires_in} —Å–µ–∫—É–Ω–¥`);
    } else if (result.error === 'invalid_grant') {
      console.log('‚ùå REFRESH_TOKEN –ò–°–¢–ï–ö –∏–ª–∏ –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–ï–ù');
      console.log('üí° –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π refresh_token —á–µ—Ä–µ–∑ OAuth flow');
    } else {
      console.log('‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', result);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ refresh_token:', error.message);
  }
}

checkYouTubeRefreshTokens();