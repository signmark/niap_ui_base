// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º Directus
import axios from 'axios';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function checkPermissions() {
  try {
    const directusUrl = process.env.DIRECTUS_URL || 'https://directus.nplanner.ru';
    const email = process.env.DIRECTUS_ADMIN_EMAIL;
    const password = process.env.DIRECTUS_ADMIN_PASSWORD;
    
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
    
    // –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    let token;
    try {
      const authResponse = await axios.post(`${directusUrl}/auth/login`, {
        email,
        password
      });
      
      if (authResponse.data?.data?.access_token) {
        token = authResponse.data.data.access_token;
        console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ç–æ–∫–µ–Ω: ***${token.substring(token.length - 10)}`);
        
        // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try {
          const userResponse = await axios.get(`${directusUrl}/users/me`, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: –£—Å–ø–µ—à–Ω–æ');
          console.log(`   ID: ${userResponse.data.data.id}`);
          console.log(`   Email: ${userResponse.data.data.email}`);
          console.log(`   Role: ${userResponse.data.data.role}`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–æ–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
          const roleId = userResponse.data.data.role;
          
          // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è —Ä–æ–ª–∏
          try {
            const roleResponse = await axios.get(`${directusUrl}/roles/${roleId}`, {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            
            console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏:');
            console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${roleResponse.data.data.name}`);
            console.log(`   –°–∏—Å—Ç–µ–º–Ω–∞—è: ${roleResponse.data.data.system ? '–î–∞' : '–ù–µ—Ç'}`);
            console.log(`   –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: ${roleResponse.data.data.admin_access ? '–î–∞' : '–ù–µ—Ç'}`);
          } catch (error) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏:');
            console.log(`   –ö–æ–¥: ${error.response?.status}`);
            console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response?.data?.errors?.[0]?.message}`);
          }
          
        } catch (error) {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
          console.log(`   –ö–æ–¥: ${error.response?.status}`);
          console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response?.data?.errors?.[0]?.message}`);
        }
        
        // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
        const collections = [
          'user_campaigns', 
          'campaign_content', 
          'content_sources',
          'campaign_trend_topics',
          'social_publications'
        ];
        
        console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:');
        
        for (const collection of collections) {
          try {
            const response = await axios.get(`${directusUrl}/items/${collection}?limit=1`, {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            
            console.log(`‚úÖ ${collection}: –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${response.data.data.length}`);
          } catch (error) {
            console.log(`‚ùå ${collection}: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω`);
            console.log(`   –ö–æ–¥: ${error.response?.status}`);
            console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response?.data?.errors?.[0]?.message}`);
          }
        }
        
        // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:');
        
        // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ campaign_content
        try {
          const testContent = {
            title: 'Test Content from Permissions Check',
            content: 'This is a test content for permission checking.',
            campaign_id: null,
            content_type: 'text',
            status: 'draft',
            user_id: userResponse.data.data.id
          };
          
          const createResponse = await axios.post(`${directusUrl}/items/campaign_content`, testContent, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ campaign_content: –£—Å–ø–µ—à–Ω–æ');
          console.log(`   ID: ${createResponse.data.data.id}`);
          
          // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
          try {
            await axios.delete(`${directusUrl}/items/campaign_content/${createResponse.data.data.id}`, {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            
            console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: –£—Å–ø–µ—à–Ω–æ');
          } catch (error) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å:');
            console.log(`   –ö–æ–¥: ${error.response?.status}`);
            console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response?.data?.errors?.[0]?.message}`);
          }
        } catch (error) {
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ campaign_content:');
          console.log(`   –ö–æ–¥: ${error.response?.status}`);
          console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response?.data?.errors?.[0]?.message}`);
        }
        
      } else {
        console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
      console.log(`   –ö–æ–¥: ${error.response?.status}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response?.data?.errors?.[0]?.message}`);
    }
  } catch (error) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkPermissions();