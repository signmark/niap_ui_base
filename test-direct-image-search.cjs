/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

async function testDirectImageSearch() {
  console.log('\nüîç === –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –ü–û–ò–°–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===\n');

  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é
    const imageSearchService = require('./server/services/image-search-service');
    
    const testQuery = '–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º';
    const testKeywords = ['–∑–∞–∫–∞—Ç', '–º–æ—Ä–µ', '–ø—Ä–∏—Ä–æ–¥–∞', '–∫—Ä–∞—Å–æ—Ç–∞', '–ø–µ–π–∑–∞–∂'];
    
    console.log('üìù –ó–∞–ø—Ä–æ—Å:', testQuery);
    console.log('üè∑Ô∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', testKeywords.join(', '));
    console.log('');
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    const result = await imageSearchService.findAndPrepareImage(testQuery, testKeywords);
    
    if (result.success) {
      console.log('‚úÖ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!');
      console.log(`   üì∑ –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.source}`);
      console.log(`   üîó URL: ${result.originalUrl}`);
      console.log(`   üìè –†–∞–∑–º–µ—Ä: ${result.size} –±–∞–π—Ç (~${Math.round(result.size / 1024)}KB)`);
      console.log(`   üñºÔ∏è –ë—É—Ñ–µ—Ä –≥–æ—Ç–æ–≤: ${result.imageBuffer ? '–î–∞' : '–ù–µ—Ç'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
      if (result.imageBuffer && result.imageBuffer.length > 0) {
        console.log(`   ‚úÖ –ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${result.imageBuffer.length} –±–∞–π—Ç`);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const base64 = result.imageBuffer.toString('base64');
        console.log(`   üìä Base64 —Ä–∞–∑–º–µ—Ä: ${base64.length} —Å–∏–º–≤–æ–ª–æ–≤ (~${Math.round(base64.length * 0.75 / 1024)}KB)`);
        
        return {
          success: true,
          result: {
            source: result.source,
            originalUrl: result.originalUrl,
            size: result.size,
            imageBuffer: result.imageBuffer,
            base64: `data:image/jpeg;base64,${base64}`
          }
        };
      } else {
        throw new Error('–ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç');
      }
      
    } else {
      console.log('‚ö†Ô∏è –†–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ');
      console.log(`   üìè –†–∞–∑–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ: ${result.size} –±–∞–π—Ç`);
      
      return {
        success: false,
        fallback: true,
        result: {
          source: 'fallback',
          size: result.size,
          imageBuffer: result.imageBuffer
        }
      };
    }
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
    console.error('üîç Stack:', error.stack);
    
    return {
      success: false,
      error: error.message
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDirectImageSearch()
  .then(result => {
    console.log('\nüèÅ === –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê ===');
    
    if (result.success) {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å: –£–°–ü–ï–•');
      console.log('üìä –î–µ—Ç–∞–ª–∏:');
      console.log('   - –ò—Å—Ç–æ—á–Ω–∏–∫:', result.result.source);
      console.log('   - –†–∞–∑–º–µ—Ä:', result.result.size, '–±–∞–π—Ç');
      console.log('   - URL:', result.result.originalUrl);
      console.log('   - Base64 –≥–æ—Ç–æ–≤:', result.result.base64 ? '–î–∞' : '–ù–µ—Ç');
      
      // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ Instagram
      console.log('\nüöÄ –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ Instagram...');
      return testInstagramPublish(result.result.base64);
      
    } else if (result.fallback) {
      console.log('‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –†–ï–ó–ï–†–í–ù–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï');
      console.log('üìù –†–∞–∑–º–µ—Ä:', result.result.size, '–±–∞–π—Ç');
      
    } else {
      console.log('‚ùå –°—Ç–∞—Ç—É—Å: –û–®–ò–ë–ö–ê');
      console.log('üí¨ –û—à–∏–±–∫–∞:', result.error);
    }
    
    console.log('\n=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ê ===\n');
    process.exit(result.success ? 0 : 1);
  })
  .catch(error => {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    process.exit(1);
  });

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ Instagram —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 */
async function testInstagramPublish(imageBase64) {
  const axios = require('axios');
  
  console.log('üì± –ü—É–±–ª–∏–∫—É–µ–º –≤ Instagram...');
  
  try {
    const response = await axios.post('http://localhost:5000/api/instagram-direct/publish-photo', {
      username: 'dsignmark',
      password: 'QtpZ3dh7',
      caption: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º! üåÖ',
      imageData: imageBase64
    });

    if (response.data.success) {
      console.log('üéâ –ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!');
      console.log(`   üîó URL: ${response.data.postUrl}`);
      console.log(`   üÜî ID: ${response.data.postId}`);
      console.log(`   üë§ User ID: ${response.data.userId}`);
      
      return {
        success: true,
        instagram: response.data
      };
    } else {
      throw new Error(response.data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Instagram API');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Instagram:', error.message);
    if (error.response) {
      console.error('   üìÑ Status:', error.response.status);
      console.error('   üìù Data:', JSON.stringify(error.response.data, null, 2));
    }
    
    return {
      success: false,
      error: error.message
    };
  }
}