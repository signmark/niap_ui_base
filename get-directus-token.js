// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Directus
import axios from 'axios';
import fs from 'fs';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const DIRECTUS_EMAIL = process.env.DIRECTUS_EMAIL;
const DIRECTUS_PASSWORD = process.env.DIRECTUS_PASSWORD;
const DIRECTUS_URL = 'https://directus.nplanner.ru';

async function getDirectusToken() {
  try {
    console.log(`üîê –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Directus...`);
    console.log(`üìß Email: ${DIRECTUS_EMAIL}`);
    console.log(`üîë Password: ${'*'.repeat(DIRECTUS_PASSWORD?.length || 8)}`);
    
    const response = await axios.post(
      `${DIRECTUS_URL}/auth/login`, 
      {
        email: DIRECTUS_EMAIL,
        password: DIRECTUS_PASSWORD
      }
    );
    
    const { access_token, refresh_token } = response.data.data;
    
    console.log(`‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!`);
    console.log(`üìù Access token: ${access_token.substring(0, 15)}...`);
    console.log(`üîÑ Refresh token: ${refresh_token.substring(0, 15)}...`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª
    let envContent = fs.readFileSync('.env', 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DIRECTUS_TOKEN
    if (envContent.includes('DIRECTUS_TOKEN=')) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
      envContent = envContent.replace(
        /DIRECTUS_TOKEN=.*/,
        `DIRECTUS_TOKEN=${access_token}`
      );
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
      envContent += `\nDIRECTUS_TOKEN=${access_token}`;
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª
    fs.writeFileSync('.env', envContent);
    console.log(`üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª`);
    
    return access_token;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:`);
    if (error.response) {
      console.error(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${error.response.status}`);
      console.error(`üìù –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, error.response.data);
    } else {
      console.error(error.message);
    }
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
getDirectusToken()
  .then(token => {
    console.log(`üéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
  })
  .catch(err => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${err}`);
    process.exit(1);
  });