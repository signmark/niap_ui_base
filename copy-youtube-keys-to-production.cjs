/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è YouTube API –∫–ª—é—á–µ–π —Å–æ —Å—Ç–µ–π–¥–∂–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
 */

const axios = require('axios');

async function copyYouTubeKeysToProduction() {
  try {
    console.log('üîÑ –ö–æ–ø–∏—Ä—É–µ–º YouTube API –∫–ª—é—á–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω...');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–µ–π–¥–∂–∞ (–∏—Å—Ç–æ—á–Ω–∏–∫)
    const stagingUrl = process.env.STAGING_DIRECTUS_URL || 'https://staging-directus.nplanner.ru';
    const stagingToken = process.env.STAGING_DIRECTUS_TOKEN;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)
    const productionUrl = process.env.DIRECTUS_URL || 'https://directus.nplanner.ru';
    const productionToken = process.env.DIRECTUS_TOKEN || process.env.DIRECTUS_ADMIN_TOKEN;
    
    if (!stagingToken) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç STAGING_DIRECTUS_TOKEN');
      return;
    }
    
    if (!productionToken) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DIRECTUS_TOKEN –∏–ª–∏ DIRECTUS_ADMIN_TOKEN –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
      return;
    }
    
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º YouTube –∫–ª—é—á–∏ —Å–æ —Å—Ç–µ–π–¥–∂–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º YouTube –∫–ª—é—á–∏ —Å–æ —Å—Ç–µ–π–¥–∂–∞
    const stagingResponse = await axios.get(`${stagingUrl}/items/global_api_keys`, {
      params: {
        fields: ['service_name', 'api_key', 'is_active'],
        filter: {
          service_name: { _in: ['YOUTUBE_CLIENT_ID', 'YOUTUBE_CLIENT_SECRET'] },
          is_active: { _eq: true }
        }
      },
      headers: {
        Authorization: `Bearer ${stagingToken}`
      }
    });
    
    const stagingKeys = stagingResponse.data?.data || [];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${stagingKeys.length} YouTube –∫–ª—é—á–µ–π –Ω–∞ —Å—Ç–µ–π–¥–∂–µ`);
    
    if (stagingKeys.length === 0) {
      console.log('‚ö†Ô∏è YouTube –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç–µ–π–¥–∂–µ');
      return;
    }
    
    console.log('üì§ –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
    for (const keyData of stagingKeys) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–ª—é—á –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        const existingResponse = await axios.get(`${productionUrl}/items/global_api_keys`, {
          params: {
            filter: {
              service_name: { _eq: keyData.service_name }
            }
          },
          headers: {
            Authorization: `Bearer ${productionToken}`
          }
        });
        
        if (existingResponse.data.data.length > 0) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
          const existingId = existingResponse.data.data[0].id;
          await axios.patch(`${productionUrl}/items/global_api_keys/${existingId}`, {
            api_key: keyData.api_key,
            is_active: keyData.is_active,
            updated_at: new Date().toISOString()
          }, {
            headers: {
              Authorization: `Bearer ${productionToken}`
            }
          });
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–ª—é—á: ${keyData.service_name}`);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
          await axios.post(`${productionUrl}/items/global_api_keys`, {
            service_name: keyData.service_name,
            api_key: keyData.api_key,
            is_active: keyData.is_active,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }, {
            headers: {
              Authorization: `Bearer ${productionToken}`
            }
          });
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á: ${keyData.service_name}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${keyData.service_name}:`, error.response?.data || error.message);
      }
    }
    
    console.log('üéâ YouTube API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω!');
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  copyYouTubeKeysToProduction();
}

module.exports = { copyYouTubeKeysToProduction };