#!/usr/bin/env node

/**
 * –û—Ç–ª–∞–¥–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */

import axios from 'axios';

const API_BASE = 'http://localhost:5000/api';
const CAMPAIGN_ID = '46868c44-c6a4-4bed-accf-9ad07bba790e';

async function debugContentVisibility() {
  const headers = {
    'Authorization': `Bearer ${process.env.DIRECTUS_TOKEN || ''}`,
    'Content-Type': 'application/json'
  };

  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Nplanner.ru...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ campaign-content
    console.log('üìä 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ /api/campaign-content:');
    const campaignResponse = await axios.get(
      `${API_BASE}/campaign-content?campaignId=${CAMPAIGN_ID}&limit=20`,
      { headers }
    );

    if (campaignResponse.data?.data) {
      const nplannerContent = campaignResponse.data.data.filter(item => 
        item.content?.includes('Nplanner') || 
        item.title?.includes('–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ') ||
        (item.metadata && item.metadata.source === 'nplanner_final_generator')
      );

      console.log(`   –û–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–º–ø–∞–Ω–∏–∏: ${campaignResponse.data.data.length}`);
      console.log(`   –ö–æ–Ω—Ç–µ–Ω—Ç–∞ Nplanner: ${nplannerContent.length}`);
      
      if (nplannerContent.length > 0) {
        console.log('\n   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç Nplanner:');
        nplannerContent.forEach((item, index) => {
          console.log(`      ${index + 1}. ${item.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}`);
          console.log(`         ID: ${item.id}`);
          console.log(`         –°—Ç–∞—Ç—É—Å: ${item.status || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`         –ò—Å—Ç–æ—á–Ω–∏–∫: ${item.metadata?.source || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`         –°–æ–∑–¥–∞–Ω–æ: ${item.createdAt || item.date_created || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        });
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ publications
    console.log('\nüìä 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ /api/publications:');
    try {
      const pubResponse = await axios.get(
        `${API_BASE}/publications?limit=20&sort=-date_created`,
        { headers }
      );

      if (pubResponse.data?.data) {
        const nplannerPubs = pubResponse.data.data.filter(item => 
          item.content?.includes('Nplanner') ||
          item.source === 'nplanner_final_generator' ||
          item.source === 'nplanner_draft_generator'
        );

        console.log(`   –û–±—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: ${pubResponse.data.data.length}`);
        console.log(`   –ü—É–±–ª–∏–∫–∞—Ü–∏–π Nplanner: ${nplannerPubs.length}`);

        if (nplannerPubs.length > 0) {
          console.log('\n   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Nplanner:');
          nplannerPubs.forEach((item, index) => {
            console.log(`      ${index + 1}. ${item.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'}`);
            console.log(`         ID: ${item.id}`);
            console.log(`         –°—Ç–∞—Ç—É—Å: ${item.status || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`         –ò—Å—Ç–æ—á–Ω–∏–∫: ${item.source || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          });
        }
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ publications: ${error.message}`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìä 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:');
    try {
      const authResponse = await axios.get(`${API_BASE}/auth/status`, { headers });
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${authResponse.data?.isAuthenticated || false}`);
      console.log(`   –†–æ–ª—å: ${authResponse.data?.user?.role || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API
    console.log('\nüìä 4. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API:');
    if (campaignResponse.data) {
      console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:`, Object.keys(campaignResponse.data));
      console.log(`   –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`, campaignResponse.data.meta || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error.response?.data || error.message);
  }
}

debugContentVisibility().catch(console.error);