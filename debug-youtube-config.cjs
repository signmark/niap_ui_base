/**
 * –û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è YouTube –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */

const axios = require('axios');

async function debugYouTubeConfig() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ YouTube –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const directusUrl = process.env.DIRECTUS_URL || process.env.VITE_DIRECTUS_URL;
    const directusToken = process.env.DIRECTUS_TOKEN || process.env.DIRECTUS_ADMIN_TOKEN;
    
    console.log('üìù –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log(`DIRECTUS_URL: ${directusUrl || '–ù–ï –ó–ê–î–ê–ù'}`);
    console.log(`DIRECTUS_TOKEN: ${directusToken ? '–ï–°–¢–¨' : '–ù–ï –ó–ê–î–ê–ù'}`);
    console.log(`NODE_ENV: ${process.env.NODE_ENV || '–ù–ï –ó–ê–î–ê–ù'}`);
    
    if (!directusUrl || !directusToken) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    console.log('\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Directus API...');
    
    try {
      const testResponse = await axios.get(`${directusUrl}/server/info`, {
        headers: {
          Authorization: `Bearer ${directusToken}`
        }
      });
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Directus —É—Å–ø–µ—à–Ω–æ');
      console.log(`–í–µ—Ä—Å–∏—è Directus: ${testResponse.data?.data?.directus?.version || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Directus:', error.response?.status, error.response?.statusText);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º YouTube –∫–ª—é—á–∏
    console.log('\nüîë –ü–æ–ª—É—á–∞–µ–º YouTube –∫–ª—é—á–∏...');
    
    const response = await axios.get(`${directusUrl}/items/global_api_keys`, {
      params: {
        fields: ['service_name', 'api_key', 'is_active'],
        filter: {
          service_name: { _in: ['YOUTUBE_CLIENT_ID', 'YOUTUBE_CLIENT_SECRET', 'YOUTUBE_REDIRECT_URI'] },
          is_active: { _eq: true }
        }
      },
      headers: {
        Authorization: `Bearer ${directusToken}`
      }
    });
    
    const apiKeys = response.data?.data || [];
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${apiKeys.length} YouTube –∫–ª—é—á–µ–π`);
    
    if (apiKeys.length === 0) {
      console.log('‚ùå YouTube –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏...');
      const allKeysResponse = await axios.get(`${directusUrl}/items/global_api_keys`, {
        params: {
          fields: ['service_name', 'is_active']
        },
        headers: {
          Authorization: `Bearer ${directusToken}`
        }
      });
      
      const allKeys = allKeysResponse.data?.data || [];
      console.log(`üìã –í—Å–µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π: ${allKeys.length}`);
      
      const youtubeKeys = allKeys.filter(k => k.service_name?.includes('YOUTUBE'));
      console.log(`üé• YouTube –∫–ª—é—á–µ–π –Ω–∞–π–¥–µ–Ω–æ: ${youtubeKeys.length}`);
      
      youtubeKeys.forEach(key => {
        console.log(`   - ${key.service_name}: ${key.is_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
      });
      
    } else {
      console.log('‚úÖ YouTube –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã:');
      apiKeys.forEach(key => {
        console.log(`   - ${key.service_name}: ${key.api_key ? '–µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ' : '–ø—É—Å—Ç–æ–µ'}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const config = {};
      for (const keyData of apiKeys) {
        switch (keyData.service_name) {
          case 'YOUTUBE_CLIENT_ID':
            config.clientId = keyData.api_key;
            break;
          case 'YOUTUBE_CLIENT_SECRET':
            config.clientSecret = keyData.api_key;
            break;
          case 'YOUTUBE_REDIRECT_URI':
            config.redirectUri = keyData.api_key;
            break;
        }
      }
      
      console.log('\n‚öôÔ∏è –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
      console.log(`Client ID: ${config.clientId ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`Client Secret: ${config.clientSecret ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`Redirect URI: ${config.redirectUri || '–Ω–µ –∑–∞–¥–∞–Ω'}`);
      
      if (!config.clientId || !config.clientSecret) {
        console.log('‚ùå –ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YouTube');
      } else {
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YouTube –ø–æ–ª–Ω–∞—è');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    if (error.response?.status === 401) {
      console.error('üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ DIRECTUS_TOKEN');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  debugYouTubeConfig();
}

module.exports = { debugYouTubeConfig };