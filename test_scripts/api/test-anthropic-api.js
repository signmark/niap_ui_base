/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ Anthropic Claude API
 * 
 * –ó–∞–ø—É—Å–∫: node test-anthropic-api.js ANTHROPIC_API_KEY
 * –ü—Ä–∏–º–µ—Ä: node test-anthropic-api.js "sk-ant-api03..."
 */

const https = require('https');

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const apiKey = process.argv[2];

if (!apiKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-anthropic-api.js API_KEY');
  console.log('–ü—Ä–∏–º–µ—Ä: node test-anthropic-api.js "sk-ant-api03..."');
  process.exit(1);
}

console.log('üîë API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏');
console.log(`üëÄ –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –∫–ª—é—á–∞: ${apiKey.substring(0, 8)}...`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞
function logStep(message) {
  console.log(`\nüìã ${message}`);
}

// –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const prompt = "–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ-—Ä—É—Å—Å–∫–∏";

// –í—ã–∑–æ–≤ API
logStep('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic Claude API...');

// –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å - claude-3-7-sonnet-20250219 (—Å–∞–º–∞—è –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
const model = 'claude-3-7-sonnet-20250219';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Anthropic API
const requestData = JSON.stringify({
  model: model,
  max_tokens: 100,
  messages: [
    {
      role: 'user',
      content: prompt
    }
  ]
});

// –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
const options = {
  hostname: 'api.anthropic.com',
  path: '/v1/messages',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'x-api-key': apiKey,
    'anthropic-version': '2023-06-01',
    'Content-Length': requestData.length
  }
};

logStep('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic Claude API...');

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
const req = https.request(options, (res) => {
  console.log(`\nüåê –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
  
  let responseData = '';
  
  res.on('data', (chunk) => {
    responseData += chunk;
  });
  
  res.on('end', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (res.statusCode === 200) {
      try {
        const parsedData = JSON.parse(responseData);
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        console.log('\n‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω:');
        console.log(`üìå –ú–æ–¥–µ–ª—å: ${parsedData.model}`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const responseText = parsedData.content[0].text;
        console.log('\nüìù –û—Ç–≤–µ—Ç API:');
        console.log('------------------------');
        console.log(responseText);
        console.log('------------------------');
        
        console.log('\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! API –∫–ª—é—á Claude —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
      } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞:', error.message);
        console.log('–ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:', responseData);
      }
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
      console.error('\n‚ùå –û—à–∏–±–∫–∞ API:');
      try {
        const errorData = JSON.parse(responseData);
        console.error(`–ö–æ–¥ –æ—à–∏–±–∫–∏: ${res.statusCode}`);
        console.error(`–¢–∏–ø –æ—à–∏–±–∫–∏: ${errorData.error?.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${errorData.error?.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}`);
        
        // –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫
        if (res.statusCode === 400) {
          console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.');
        } else if (res.statusCode === 401) {
          console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ API –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –≤ –∫–æ–Ω—Å–æ–ª–∏ Anthropic.');
        } else if (res.statusCode === 403) {
          console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. API –∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏.');
        } else if (res.statusCode === 429) {
          console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.');
        } else if (res.statusCode >= 500) {
          console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Anthropic. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.');
        }
      } catch (e) {
        console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:', responseData);
      }
    }
  });
});

req.on('error', (error) => {
  console.error('\n‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
  console.error('\nüì¢ –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
req.write(requestData);
req.end();

logStep('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...');