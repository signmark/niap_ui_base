/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º message_id –≤ URL
 */

import axios from 'axios';

const API_TOKEN = "7529101043:AAG298h0iubyeKPuZ-WRtEFbNEnEyqy_XJU"; // –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
const CHAT_ID = "-1002302366310"; // –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
function log(message) {
  const timestamp = new Date().toLocaleTimeString();
  console.log(`[${timestamp}] ${message}`);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API Telegram
 */
async function sendDirectTelegramMessage() {
  try {
    log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API Telegram...');
    
    const text = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL";
    const url = `https://api.telegram.org/bot${API_TOKEN}/sendMessage`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API Telegram
    const response = await axios.post(url, {
      chat_id: CHAT_ID,
      text: text
    });
    
    if (response.data && response.data.ok) {
      log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      
      const messageId = response.data.result.message_id;
      log(`üìã ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageId}`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const username = "ya_delayu_moschno"; // –ò–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
      const manualUrl = `https://t.me/${username}/${messageId}`;
      log(`üìã –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: ${manualUrl}`);
      
      return { success: true, messageId, url: manualUrl };
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${JSON.stringify(response.data)}`);
      return { success: false, error: response.data };
    }
  } catch (error) {
    log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
    if (error.response) {
      log(`–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(error.response.data)}`);
    }
    return { success: false, error: error.message };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —á–µ—Ä–µ–∑ API –ø—Ä–æ–µ–∫—Ç–∞
 */
async function checkProjectUrlFormatting(messageId) {
  try {
    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL —á–µ—Ä–µ–∑ API –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –í—ã–∑—ã–≤–∞–µ–º API –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL
    const response = await axios.get('http://localhost:5000/api/test/telegram-url', {
      params: {
        chatId: CHAT_ID,
        messageId
      }
    });
    
    if (response.data.success) {
      const url = response.data.data.url;
      log(`üìã URL —á–µ—Ä–µ–∑ API –ø—Ä–æ–µ–∫—Ç–∞: ${url}`);
      
      if (url.includes('/' + messageId)) {
        log('‚úÖ URL —Å–æ–¥–µ—Ä–∂–∏—Ç message_id!');
      } else {
        log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç message_id!');
      }
      
      return { success: true, url };
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ URL: ${response.data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      return { success: false, error: response.data.error };
    }
  } catch (error) {
    log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ URL: ${error.message}`);
    if (error.response) {
      log(`–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(error.response.data)}`);
    }
    return { success: false, error: error.message };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function runTests() {
  log('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL –¥–ª—è Telegram...');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
  const directResult = await sendDirectTelegramMessage();
  
  if (directResult.success && directResult.messageId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —á–µ—Ä–µ–∑ API –ø—Ä–æ–µ–∫—Ç–∞
    await checkProjectUrlFormatting(directResult.messageId);
  }
  
  log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests()
  .catch(error => {
    log(`\n‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  });