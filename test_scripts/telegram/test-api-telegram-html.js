/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
 * –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
 * 
 * –ó–∞–ø—É—Å–∫: node test-api-telegram-html.js
 */

import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  apiUrl: 'http://localhost:5000',
  // –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  credentials: {
    email: 'lbrspb@gmail.com',
    password: 'admin'
  },
  
  // –ú–∞—Ä—à—Ä—É—Ç—ã API
  apiRoutes: {
    login: '/api/auth/login',
    formatHtml: '/api/test/format-client-html',
    telegramHtml: '/api/test/telegram-html',
    telegramEmojiHtml: '/api/test/telegram-emoji-html'
  },
  
  // ID –∫–∞–º–ø–∞–Ω–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram
  campaignId: '46868c44-c6a4-4bed-accf-9ad07bba790e'
};

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ HTML-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
const TEST_CASES = [
  {
    name: '1. –ë–∞–∑–æ–≤—ã–µ HTML-—Ç–µ–≥–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <b>–∂–∏—Ä–Ω—ã–º</b>, <i>–∫—É—Ä—Å–∏–≤–æ–º</i> –∏ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º</u> —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</p>'
  },
  {
    name: '2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ HTML-—Ç–µ–≥–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <strong>–∂–∏—Ä–Ω—ã–º —á–µ—Ä–µ–∑ strong</strong>, <em>–∫—É—Ä—Å–∏–≤–æ–º —á–µ—Ä–µ–∑ em</em> –∏ <del>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–º</del> —Ç–µ–∫—Å—Ç–æ–º</p>'
  },
  {
    name: '3. –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏',
    html: '<p>–í–ª–æ–∂–µ–Ω–Ω—ã–µ <b>–∂–∏—Ä–Ω—ã–µ <i>–∏ –∫—É—Ä—Å–∏–≤–Ω—ã–µ</i></b> —Ç–µ–≥–∏</p>'
  },
  {
    name: '4. –≠–º–æ–¥–∑–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ üòÄ üëç üéâ –∏ <b>—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</b></p>'
  },
  {
    name: '5. –°—Å—ã–ª–∫–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <a href="https://example.com">—Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç</a></p>'
  },
  {
    name: '6. –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <b>–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º —Ç–µ–≥–æ–º –∏ <i>–≤–ª–æ–∂–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</p>'
  },
  {
    name: '7. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ø–∏—Å–∫–∏',
    html: '<h2>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h2><ul><li>–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç</li><li>–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç</li><li>–¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç</li></ul>'
  },
  {
    name: '8. –ë–ª–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã',
    html: '<p>–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü</p><p>–í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü</p><p>–¢—Ä–µ—Ç–∏–π –∞–±–∑–∞—Ü —Å <b>—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</b></p>'
  },
  {
    name: '9. –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç',
    html: '<p>–ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.</p><p>–í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å <b>–∂–∏—Ä–Ω—ã–º</b> –∏ <i>–∫—É—Ä—Å–∏–≤–Ω—ã–º</i> —Ç–µ–∫—Å—Ç–æ–º. –ê —Ç–∞–∫–∂–µ —Å —ç–º–æ–¥–∑–∏ üéâ</p><p>–¢—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å <a href="https://example.com">—Å—Å—ã–ª–∫–æ–π</a> –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram. –ù–∞–º –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–æ—Å—å –¥–∞–∂–µ –≤ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–µ–∫—Å—Ç–∞.</p>'
  },
  {
    name: '10. –°–º–µ—à–∞–Ω–Ω—ã–π HTML',
    html: '<h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h1><p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å <b>–∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º</b> –∏ <i>–∫—É—Ä—Å–∏–≤–æ–º</i>.</p><ul><li><b>–í–∞–∂–Ω—ã–π</b> –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞</li><li>–û–±—ã—á–Ω—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞</li></ul><p>–ï—â–µ –æ–¥–∏–Ω –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å <a href="https://example.com">—Å—Å—ã–ª–∫–æ–π</a> –∏ —ç–º–æ–¥–∑–∏ üëç</p>'
  }
];

/**
 * HTTP –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
const apiClient = axios.create({
  baseURL: CONFIG.apiUrl,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json'
  }
});

/**
 * –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω
 * @returns {Promise<string>} –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function login() {
  try {
    console.log(`üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${CONFIG.credentials.email}`);
    const response = await apiClient.post(CONFIG.apiRoutes.login, {
      email: CONFIG.credentials.email,
      password: CONFIG.credentials.password
    });
    
    if (response.data.success) {
      console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω`);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      apiClient.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;
      return response.data.token;
    } else {
      throw new Error(response.data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —á–µ—Ä–µ–∑ API endpoint format-client-html
 * @param {string} html HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testFormatHtml(html) {
  try {
    console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML —á–µ—Ä–µ–∑ API`);
    const response = await apiClient.post(CONFIG.apiRoutes.formatHtml, { html });
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML: ${error.message}`);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Telegram
 * @param {string} text –¢–µ–∫—Å—Ç —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function testTelegramHtmlFormat(text) {
  try {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ HTML –≤ Telegram —á–µ—Ä–µ–∑ API`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    const testId = uuidv4().substring(0, 8);
    const htmlWithId = `${text}\n\n[Test ID: ${testId}]`;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML –∏ —ç–º–æ–¥–∑–∏ –≤ Telegram
    const response = await apiClient.post(CONFIG.apiRoutes.telegramEmojiHtml, {
      text: htmlWithId,
      campaignId: CONFIG.campaignId
    });
    
    return {
      ...response.data,
      testId,
      original: text
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML –≤ Telegram: ${error.message}`);
    console.error(error.response?.data || error);
    throw error;
  }
}

/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
 * @param {number} ms –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
 * @returns {Promise<void>}
 */
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
 */
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram —á–µ—Ä–µ–∑ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  console.log(`üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤: ${TEST_CASES.length}`);
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  // –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
  try {
    await login();
  } catch (error) {
    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: ${error.message}`);
    return;
  }
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  const results = [];
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
  for (let i = 0; i < TEST_CASES.length; i++) {
    const testCase = TEST_CASES[i];
    console.log(`\n‚è≥ –¢–µ—Å—Ç ${i + 1}/${TEST_CASES.length}: ${testCase.name}`);
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML
      const formatResult = await testFormatHtml(testCase.html);
      console.log(`   ‚úÖ HTML –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è Telegram`);
      
      // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ HTML –≤ Telegram
      const sendResult = await testTelegramHtmlFormat(testCase.html);
      
      // 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (sendResult.success) {
        console.log(`   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`);
        if (sendResult.message_url) {
          console.log(`   üîó URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${sendResult.message_url}`);
        }
        
        results.push({
          testCase: testCase.name,
          html: testCase.html,
          success: true,
          messageId: sendResult.message_id,
          messageUrl: sendResult.message_url,
          formattedText: sendResult.formatted_text,
          originalText: sendResult.original_text,
          timestamp: new Date().toISOString(),
          testId: sendResult.testId
        });
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${sendResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        
        results.push({
          testCase: testCase.name,
          html: testCase.html,
          success: false,
          error: sendResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          timestamp: new Date().toISOString(),
          testId: sendResult.testId
        });
      }
    } catch (error) {
      console.error(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
      
      results.push({
        testCase: testCase.name,
        html: testCase.html,
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
    if (i < TEST_CASES.length - 1) {
      console.log(`   ‚è±Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...`);
      await sleep(2000);
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const successCount = results.filter(r => r.success).length;
  console.log(`\nüìà –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.length}`);
  console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount}`);
  console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${results.length - successCount}`);
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
  console.log('\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É:');
  results.forEach((result, index) => {
    console.log(`   ${index + 1}. ${result.testCase}: ${result.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    if (!result.success) {
      console.log(`      –ü—Ä–∏—á–∏–Ω–∞: ${result.error}`);
    }
    if (result.messageUrl) {
      console.log(`      URL: ${result.messageUrl}`);
    }
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runAllTests().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
});