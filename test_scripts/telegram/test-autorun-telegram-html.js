/**
 * –ê–≤—Ç–æ—Ç–µ—Å—Ç –¥–ª—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: /api/test/telegram-emoji-html
 * 
 * –ó–∞–ø—É—Å–∫: node test-autorun-telegram-html.js
 */

import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  // URL API
  apiUrl: 'http://localhost:5000',
  // ID –∫–∞–º–ø–∞–Ω–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ Telegram
  campaignId: '46868c44-c6a4-4bed-accf-9ad07bba790e',
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–º—Å)
  requestDelay: 2000
};

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ HTML
const TEST_CASES = [
  {
    name: '1. –ë–∞–∑–æ–≤—ã–µ HTML-—Ç–µ–≥–∏',
    html: '<p>–ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å <b>–∂–∏—Ä–Ω—ã–º</b>, <i>–∫—É—Ä—Å–∏–≤–æ–º</i> –∏ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º</u> —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</p>'
  },
  {
    name: '2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ HTML-—Ç–µ–≥–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <strong>–∂–∏—Ä–Ω—ã–º —á–µ—Ä–µ–∑ strong</strong>, <em>–∫—É—Ä—Å–∏–≤–æ–º —á–µ—Ä–µ–∑ em</em> –∏ <del>–∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º</del></p>'
  },
  {
    name: '3. –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <b>–≤–ª–æ–∂–µ–Ω–Ω—ã–º <i>—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</i> —Ä–∞–∑–Ω—ã—Ö</b> <u>—Ç–∏–ø–æ–≤</u></p>'
  },
  {
    name: '4. –≠–º–æ–¥–∑–∏ –≤ HTML',
    html: '<p>–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ üòÄ üëç üéâ –∏ <b>—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</b></p>'
  },
  {
    name: '5. –°–ø–∏—Å–∫–∏',
    html: '<ul><li>–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç</li><li>–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç</li><li>–¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Å <b>—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</b></li></ul>'
  },
  {
    name: '6. –°—Å—ã–ª–∫–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <a href="https://example.com">—Å—Å—ã–ª–∫–æ–π</a> –Ω–∞ —Å–∞–π—Ç</p>'
  },
  {
    name: '7. –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <b>–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º —Ç–µ–≥–æ–º –∏ <i>–≤–ª–æ–∂–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</p>'
  },
  {
    name: '8. –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç',
    html: '<p>–ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Ç–µ–∫—Å—Ç–∞.</p><p>–í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å <b>–∂–∏—Ä–Ω—ã–º</b> –∏ <i>–∫—É—Ä—Å–∏–≤–Ω—ã–º</i> —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.</p><p>–¢—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å <a href="https://example.com">—Å—Å—ã–ª–∫–æ–π</a> –∏ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram.</p>'
  }
];

/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
 * @param {number} ms –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
 * @returns {Promise<void>}
 */
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
 * @param {object} testCase –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTest(testCase) {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    const testId = uuidv4().substring(0, 8);
    const html = `${testCase.html}\n\n[Test ID: ${testId}]`;
    
    console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${testCase.name}`);
    console.log(`   üìù HTML: ${html.substring(0, 50)}${html.length > 50 ? '...' : ''}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML –∏ —ç–º–æ–¥–∑–∏ –≤ Telegram
    const response = await axios.post(`${CONFIG.apiUrl}/api/test/telegram-emoji-html`, {
      text: html,
      campaignId: CONFIG.campaignId
    });
    
    const result = response.data;
    
    if (result.success) {
      console.log(`   ‚úÖ –£–°–ü–ï–•: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`);
      if (result.message_url) {
        console.log(`   üîó URL: ${result.message_url}`);
      }
      
      return {
        testCase: testCase.name,
        html: testCase.html,
        success: true,
        messageId: result.message_id,
        messageUrl: result.message_url,
        formattedText: result.formatted_text,
        originalText: result.original_text,
        timestamp: new Date().toISOString(),
        testId
      };
    } else {
      console.log(`   ‚ùå –û–®–ò–ë–ö–ê: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      
      return {
        testCase: testCase.name,
        html: testCase.html,
        success: false,
        error: result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        timestamp: new Date().toISOString(),
        testId
      };
    }
  } catch (error) {
    console.error(`   ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: ${error.message}`);
    console.error(error.response?.data || error);
    
    return {
      testCase: testCase.name,
      html: testCase.html,
      success: false,
      error: error.message,
      details: error.response?.data,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
 */
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram');
  console.log(`üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤: ${TEST_CASES.length}`);
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  const results = [];
  
  for (let i = 0; i < TEST_CASES.length; i++) {
    const testCase = TEST_CASES[i];
    console.log(`\n‚è≥ –¢–µ—Å—Ç ${i + 1}/${TEST_CASES.length}: ${testCase.name}`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
    const result = await runTest(testCase);
    results.push(result);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
    if (i < TEST_CASES.length - 1) {
      console.log(`   ‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...`);
      await sleep(CONFIG.requestDelay);
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const successCount = results.filter(r => r.success).length;
  console.log(`\nüìà –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
  console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.length}`);
  console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount}`);
  console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${results.length - successCount}`);
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É
  console.log('\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É:');
  results.forEach((result, index) => {
    console.log(`   ${index + 1}. ${result.testCase}: ${result.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    if (!result.success) {
      console.log(`      –ü—Ä–∏—á–∏–Ω–∞: ${result.error}`);
    }
    if (result.messageUrl) {
      console.log(`      URL: ${result.messageUrl}`);
    }
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runAllTests().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
});