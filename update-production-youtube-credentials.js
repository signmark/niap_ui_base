/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ YouTube credentials –≤ –ü–†–û–î–ê–ö–®–ï–ù –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * N8N —Ä–∞–±–æ—Ç–∞–µ—Ç —Å production –ë–î, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–º
 */

const PRODUCTION_DIRECTUS_URL = 'https://directus.nplanner.ru';
const PRODUCTION_DIRECTUS_TOKEN = process.env.DIRECTUS_PRODUCTION_TOKEN || process.env.DIRECTUS_TOKEN;

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ YouTube credentials
const YOUTUBE_CLIENT_ID = '267968960436-f1fcdat2q3hrn029ine955v5d3t71b2k.apps.googleusercontent.com';
const YOUTUBE_CLIENT_SECRET = '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';

async function updateProductionYouTubeCredentials() {
  console.log('=== –û–ë–ù–û–í–õ–ï–ù–ò–ï YOUTUBE CREDENTIALS –í –ü–†–û–î–ê–ö–®–ï–ù–ï ===\n');

  if (!PRODUCTION_DIRECTUS_TOKEN) {
    console.error('‚ùå PRODUCTION_DIRECTUS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: DIRECTUS_PRODUCTION_TOKEN=your_token node update-production-youtube-credentials.js');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ global_api_keys –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ global_api_keys –∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...');
    const response = await fetch(`${PRODUCTION_DIRECTUS_URL}/items/global_api_keys`, {
      headers: {
        'Authorization': `Bearer ${PRODUCTION_DIRECTUS_TOKEN}`
      }
    });

    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: ${response.status}`);
      const errorText = await response.text();
      console.error(errorText);
      return;
    }

    const data = await response.json();
    const records = data.data || [];

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –≤ global_api_keys`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ api_secret –≤ —Å—Ö–µ–º–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã global_api_keys...');
    const fieldsResponse = await fetch(`${PRODUCTION_DIRECTUS_URL}/fields/global_api_keys`, {
      headers: {
        'Authorization': `Bearer ${PRODUCTION_DIRECTUS_TOKEN}`
      }
    });

    const fieldsData = await fieldsResponse.json();
    const fields = fieldsData.data || [];
    const hasApiSecretField = fields.some(f => f.field === 'api_secret');

    console.log(`üìã –ü–æ–ª–µ api_secret ${hasApiSecretField ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}`);

    // –ï—Å–ª–∏ –ø–æ–ª—è api_secret –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!hasApiSecretField) {
      console.log('\nüìù –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ api_secret...');
      const createFieldResponse = await fetch(`${PRODUCTION_DIRECTUS_URL}/fields/global_api_keys`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${PRODUCTION_DIRECTUS_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          field: 'api_secret',
          type: 'text',
          meta: {
            interface: 'input',
            note: 'API Secret or Client Secret for the service',
            required: false,
            width: 'half'
          }
        })
      });

      if (createFieldResponse.ok) {
        console.log('‚úÖ –ü–æ–ª–µ api_secret —Å–æ–∑–¥–∞–Ω–æ');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—è api_secret');
      }
    }

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ YouTube –∑–∞–ø–∏—Å–∏
    const youtubeRecord = records.find(r => r.service_name === 'YouTube');
    const clientIdRecord = records.find(r => r.service_name === 'YOUTUBE_CLIENT_ID');
    const clientSecretRecord = records.find(r => r.service_name === 'YOUTUBE_CLIENT_SECRET');

    console.log(`\nüìã YouTube –∑–∞–ø–∏—Å–∏:`);
    console.log(`   - YouTube: ${youtubeRecord ? '–Ω–∞–π–¥–µ–Ω–∞' : '–ù–ï –Ω–∞–π–¥–µ–Ω–∞'}`);
    console.log(`   - YOUTUBE_CLIENT_ID: ${clientIdRecord ? '–Ω–∞–π–¥–µ–Ω–∞' : '–ù–ï –Ω–∞–π–¥–µ–Ω–∞'}`);
    console.log(`   - YOUTUBE_CLIENT_SECRET: ${clientSecretRecord ? '–Ω–∞–π–¥–µ–Ω–∞' : '–ù–ï –Ω–∞–π–¥–µ–Ω–∞'}`);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º YouTube –∑–∞–ø–∏—Å—å
    const youtubeData = {
      service_name: 'YouTube',
      api_key: YOUTUBE_CLIENT_ID,
      api_secret: YOUTUBE_CLIENT_SECRET,
      is_active: true
    };

    if (youtubeRecord) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      console.log('\nüìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å YouTube...');
      const updateResponse = await fetch(`${PRODUCTION_DIRECTUS_URL}/items/global_api_keys/${youtubeRecord.id}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${PRODUCTION_DIRECTUS_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(youtubeData)
      });

      if (updateResponse.ok) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å YouTube –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ YouTube –∑–∞–ø–∏—Å–∏');
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      console.log('\nüìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å YouTube...');
      const createResponse = await fetch(`${PRODUCTION_DIRECTUS_URL}/items/global_api_keys`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${PRODUCTION_DIRECTUS_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(youtubeData)
      });

      if (createResponse.ok) {
        console.log('‚úÖ –ó–∞–ø–∏—Å—å YouTube —Å–æ–∑–¥–∞–Ω–∞');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ YouTube –∑–∞–ø–∏—Å–∏');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    const checkResponse = await fetch(`${PRODUCTION_DIRECTUS_URL}/items/global_api_keys`, {
      headers: {
        'Authorization': `Bearer ${PRODUCTION_DIRECTUS_TOKEN}`
      }
    });

    const checkData = await checkResponse.json();
    const updatedYouTube = checkData.data?.find(r => r.service_name === 'YouTube');

    if (updatedYouTube) {
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å YouTube:');
      console.log(`   Service: ${updatedYouTube.service_name}`);
      console.log(`   API Key: ${updatedYouTube.api_key}`);
      console.log(`   API Secret: ${updatedYouTube.api_secret ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      console.log('\nüéâ YouTube credentials —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!');
    } else {
      console.error('‚ùå –ó–∞–ø–∏—Å—å YouTube –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ credentials:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updateProductionYouTubeCredentials();