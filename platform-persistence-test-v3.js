/**
 * –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤–µ—Ä—Å–∏—è 3)
 * 
 * –ó–∞–ø—É—Å–∫: node platform-persistence-test-v3.js CONTENT_ID
 * –ü—Ä–∏–º–µ—Ä: node platform-persistence-test-v3.js 12345-67890-abcde
 */

const axios = require('axios');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = 'http://localhost:5000';
const API_TOKEN = process.env.API_TOKEN || '';

// –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const CONTENT_ID = process.argv[2];

if (!CONTENT_ID) {
  console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node platform-persistence-test-v3.js CONTENT_ID');
  process.exit(1);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
const apiClient = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
    'Authorization': API_TOKEN ? `Bearer ${API_TOKEN}` : undefined
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
async function getTokenFromBrowser() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API me (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
    const response = await apiClient.get('/api/auth/me');
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', response.data.userId);
    return response.data.token;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
async function runTest() {
  try {
    console.log('üîç –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –°–û–¶–ò–ê–õ–¨–ù–´–• –ü–õ–ê–¢–§–û–†–ú üîç');
    console.log('‚û°Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', CONTENT_ID);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!API_TOKEN) {
      const token = await getTokenFromBrowser();
      if (token) {
        apiClient.defaults.headers.Authorization = `Bearer ${token}`;
      }
    }
    
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    console.log('\nüîπ –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
    const beforeData = await getContentData(CONTENT_ID);
    
    if (!beforeData) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
      return;
    }
    
    // –®–∞–≥ 2: –ü—É–±–ª–∏–∫—É–µ–º –≤ Telegram
    console.log('\nüîπ –®–∞–≥ 2: –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ Telegram...');
    await publishToTelegram(CONTENT_ID);
    
    // –®–∞–≥ 3: –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('\nüîπ –®–∞–≥ 3: –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüîπ –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
    const afterData = await getContentData(CONTENT_ID);
    
    // –®–∞–≥ 5: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('\nüîπ –®–∞–≥ 5: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –∏ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...');
    compareData(beforeData, afterData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const resultData = {
      contentId: CONTENT_ID,
      before: beforeData,
      after: afterData,
      timestamp: new Date().toISOString()
    };
    
    fs.writeFileSync('platform-persistence-result-v3.json', JSON.stringify(resultData, null, 2));
    console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ platform-persistence-result-v3.json');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function getContentData(id) {
  try {
    const response = await apiClient.get(`/api/campaign-content/${id}`);
    const data = response.data;
    
    console.log('  üìã –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã');
    console.log('    - –ó–∞–≥–æ–ª–æ–≤–æ–∫:', data.title || '(–Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞)');
    console.log('    - –°—Ç–∞—Ç—É—Å:', data.status);
    
    if (data.socialPlatforms) {
      console.log('    - –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:', Object.keys(data.socialPlatforms).join(', '));
      
      // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      Object.keys(data.socialPlatforms).forEach(platform => {
        const status = data.socialPlatforms[platform].status || '–Ω/–¥';
        console.log(`      * ${platform}: ${status}`);
      });
    } else {
      console.log('    - –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
    }
    
    return data;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${id}:`, error.message);
    return null;
  }
}

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Telegram
async function publishToTelegram(id) {
  try {
    const response = await apiClient.post(`/api/publish/telegram/${id}`);
    console.log('  üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    console.log('    - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('    - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
    return null;
  }
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ –∏ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
function compareData(before, after) {
  if (!before || !after) {
    console.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const beforePlatforms = Object.keys(before.socialPlatforms || {});
  const afterPlatforms = Object.keys(after.socialPlatforms || {});
  
  console.log('  üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º:');
  console.log('    - –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –î–û:', beforePlatforms.join(', '));
  console.log('    - –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –ü–û–°–õ–ï:', afterPlatforms.join(', '));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ª–∏ –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const missingPlatforms = beforePlatforms.filter(p => !afterPlatforms.includes(p));
  if (missingPlatforms.length > 0) {
    console.log('  ‚ùå –ü–û–¢–ï–†–Ø–ù–´ –î–ê–ù–ù–´–ï –ü–õ–ê–¢–§–û–†–ú:', missingPlatforms.join(', '));
  } else {
    console.log('  ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º
  console.log('\n  üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º:');
  beforePlatforms.forEach(platform => {
    const beforeStatus = before.socialPlatforms[platform]?.status || '–Ω/–¥';
    const afterStatus = after.socialPlatforms[platform]?.status || '–ü–û–¢–ï–†–Ø–ù–û';
    
    console.log(`    - ${platform}: ${beforeStatus} -> ${afterStatus}`);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest();