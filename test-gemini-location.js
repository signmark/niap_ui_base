/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ Gemini API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
 * 
 * –ó–∞–ø—É—Å–∫: node test-gemini-location.js GEMINI_API_KEY
 * –ü—Ä–∏–º–µ—Ä: node test-gemini-location.js "AIza..."
 */

const https = require('https');

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const apiKey = process.argv[2];

if (!apiKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-gemini-location.js API_KEY');
  console.log('–ü—Ä–∏–º–µ—Ä: node test-gemini-location.js "AIza..."');
  process.exit(1);
}

console.log('üîë API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏');
console.log(`üëÄ –ü–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞ –∫–ª—é—á–∞: ${apiKey.substring(0, 4)}...`);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º IP-–∞–¥—Ä–µ—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
async function getServerLocation() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'ipinfo.io',
      path: '/json',
      method: 'GET'
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode === 200) {
          try {
            const ipInfo = JSON.parse(data);
            resolve(ipInfo);
          } catch (err) {
            reject('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞');
          }
        } else {
          reject(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏: ${res.statusCode}`);
        }
      });
    });
    
    req.on('error', (error) => {
      reject(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP: ${error.message}`);
    });
    
    req.end();
  });
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏–∏
async function testGeminiAccess() {
  console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    const locationInfo = await getServerLocation();
    console.log(`\nüìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:
  IP: ${locationInfo.ip}
  –°—Ç—Ä–∞–Ω–∞: ${locationInfo.country}
  –†–µ–≥–∏–æ–Ω: ${locationInfo.region}
  –ì–æ—Ä–æ–¥: ${locationInfo.city}
  –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${locationInfo.org}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–µ—Ä–≤–µ—Ä –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ä–µ–≥–∏–æ–Ω–µ
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ API Gemini –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
    
    // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω, –≥–¥–µ Gemini API —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ–ø–æ–ª–Ω—ã–π)
    const supportedCountries = ['US', 'CA', 'GB', 'DE', 'FR', 'ES', 'IT', 'NL', 'SE', 'NO', 'DK', 'FI', 'IE', 'AU', 'NZ', 'JP', 'KR', 'SG'];
    
    if (!supportedCountries.includes(locationInfo.country)) {
      console.log(`\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤–∞—à —Å–µ—Ä–≤–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–≥–∏–æ–Ω–µ (${locationInfo.country}), –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è Gemini API.`);
      console.log('Google –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Gemini API –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –∏ —Ä–µ–≥–∏–æ–Ω–∞—Ö.');
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ API
    console.log('\nüìã –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API...');
    
    // –ó–∞–ø—Ä–æ—Å –∫ API - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å gemini-1.5-flash –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    return new Promise((resolve, reject) => {
      const requestBody = {
        contents: [
          {
            parts: [
              {
                text: "–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç –ø–æ-—Ä—É—Å—Å–∫–∏"
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 50
        }
      };
      
      const requestData = JSON.stringify(requestBody);
      
      console.log('\nüìä –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestBody, null, 2));
      
      const options = {
        hostname: 'generativelanguage.googleapis.com',
        path: `/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(requestData)
        }
      };
      
      console.log('\nüîó URL –∑–∞–ø—Ä–æ—Å–∞:', `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey.substring(0, 4)}...`);
      
      const req = https.request(options, (res) => {
        let responseData = '';
        
        res.on('data', (chunk) => {
          responseData += chunk;
        });
        
        res.on('end', () => {
          console.log(`\nüåê –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
          console.log('\nüìä –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API:', responseData);
          
          if (res.statusCode === 200) {
            try {
              const parsedData = JSON.parse(responseData);
              resolve({
                success: true,
                data: parsedData
              });
            } catch (e) {
              reject(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: ${e.message}`);
            }
          } else {
            try {
              let errorData;
              try {
                errorData = JSON.parse(responseData);
              } catch {
                errorData = { raw: responseData };
              }
              
              resolve({
                success: false,
                status: res.statusCode,
                error: errorData
              });
            } catch (e) {
              reject(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: ${e.message}, –¥–∞–Ω–Ω—ã–µ: ${responseData}`);
            }
          }
        });
      });
      
      req.on('error', (error) => {
        reject(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
      });
      
      req.write(requestData);
      req.end();
    });
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞: ${error}`);
    return { success: false, error: String(error) };
  }
}

// –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async function main() {
  try {
    const testResult = await testGeminiAccess();
    
    if (testResult.success) {
      console.log('\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! API –∫–ª—é—á Gemini —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const responseText = testResult.data.candidates[0].content.parts[0].text;
      console.log('\nüìù –û—Ç–≤–µ—Ç API:');
      console.log('------------------------');
      console.log(responseText);
      console.log('------------------------');
      
      console.log('\nüéâ API –∫–ª—é—á Gemini —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –≤–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º!');
    } else {
      console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É —Ä–µ–≥–∏–æ–Ω–∞
      const errorMessage = JSON.stringify(testResult.error);
      if (errorMessage.includes('User location is not supported')) {
        console.log('\nüö´ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –í–∞—à —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Gemini API.');
        console.log('\nüì¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω (–°–®–ê, –ï–°)');
        console.log('2Ô∏è‚É£ –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ä–µ–≥–∏–æ–Ω–µ');
        console.log('3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API (Claude –æ—Ç Anthropic –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏)');
        console.log('\nüëâ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://ai.google.dev/available_regions');
      } else if (testResult.status === 404) {
        console.log('\nüö´ –û—à–∏–±–∫–∞ 404: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        console.log('–í–æ–∑–º–æ–∂–Ω–æ, –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Google API.');
      } else if (testResult.status === 400) {
        console.log('\nüö´ –û—à–∏–±–∫–∞ 400: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.');
        console.log('–ü—Ä–∏—á–∏–Ω–∞:', testResult.error?.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞');
      } else if (testResult.status === 401) {
        console.log('\nüö´ –û—à–∏–±–∫–∞ 401: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á.');
        console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.');
      } else if (testResult.status === 403) {
        console.log('\nüö´ –û—à–∏–±–∫–∞ 403: –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.');
        console.log('–ö–ª—é—á API –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω.');
      } else if (testResult.status === 429) {
        console.log('\nüö´ –û—à–∏–±–∫–∞ 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.');
        console.log('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.');
      } else {
        console.log(`\nüö´ –û—à–∏–±–∫–∞ ${testResult.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}:`);
        console.log('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', JSON.stringify(testResult.error, null, 2));
      }
    }
  } catch (error) {
    console.error(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
main();