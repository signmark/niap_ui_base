/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Global API Keys –≤ Directus
 */

import axios from 'axios';

const DIRECTUS_URL = 'https://directus.roboflow.tech';
const ADMIN_EMAIL = 'lbrspb@gmail.com';
const ADMIN_PASSWORD = 'QtpZ3dh7';

async function updateGlobalApiKeysInterface() {
  try {
    console.log('=== –£–ª—É—á—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Global API Keys ===\n');

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const authResponse = await axios.post(`${DIRECTUS_URL}/auth/login`, {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD
    });

    const token = authResponse.data.data.access_token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ global_api_keys...');

    const fieldsToUpdate = [
      {
        field: 'service_name',
        meta: {
          display: 'raw',
          display_options: {
            placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: gemini, claude, openai'
          },
          note: '–ù–∞–∑–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞',
          width: 'half'
        }
      },
      {
        field: 'api_key',
        meta: {
          display: 'formatted-value',
          display_options: {
            format: true,
            prefix: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢',
            color: '#6366f1'
          },
          note: 'API –∫–ª—é—á (–±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)',
          width: 'full'
        }
      },
      {
        field: 'is_active',
        meta: {
          display: 'boolean',
          display_options: {
            labelOn: '–ê–∫—Ç–∏–≤–µ–Ω',
            labelOff: '–û—Ç–∫–ª—é—á–µ–Ω',
            colorOn: '#059669',
            colorOff: '#dc2626'
          },
          note: '–í–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª—é—á',
          width: 'half'
        }
      },
      {
        field: 'description',
        meta: {
          display: 'formatted-value',
          display_options: {
            format: true,
            bold: false
          },
          note: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–∞',
          width: 'full'
        }
      }
    ];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    for (const fieldUpdate of fieldsToUpdate) {
      try {
        const response = await axios.patch(
          `${DIRECTUS_URL}/fields/global_api_keys/${fieldUpdate.field}`,
          fieldUpdate,
          {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          }
        );
        console.log(`‚úÖ –ü–æ–ª–µ ${fieldUpdate.field} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
      } catch (fieldError) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ ${fieldUpdate.field}:`, fieldError.response?.data?.errors?.[0]?.message || fieldError.message);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    console.log('\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...');
    try {
      await axios.patch(`${DIRECTUS_URL}/collections/global_api_keys`, {
        meta: {
          display_template: '{{service_name}} - {{description}}',
          note: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
          sort_field: 'service_name'
        }
      }, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (collectionError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', collectionError.response?.data?.errors?.[0]?.message);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö API –∫–ª—é—á–µ–π...');
    const keysResponse = await axios.get(`${DIRECTUS_URL}/items/global_api_keys`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${keysResponse.data.data.length} API –∫–ª—é—á–µ–π:`);
    keysResponse.data.data.forEach(key => {
      const status = key.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω';
      console.log(`  - ${key.service_name}: ${status}`);
      if (key.description) {
        console.log(`    ${key.description}`);
      }
    });

    console.log('\n=== –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Global API Keys —É–ª—É—á—à–µ–Ω ===');
    console.log('–¢–µ–ø–µ—Ä—å –≤ Directus –∞–¥–º–∏–Ω–∫–µ –ø–æ–ª—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:');
    console.error('–°—Ç–∞—Ç—É—Å:', error.response?.status);
    console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response?.data, null, 2));
  }
}

updateGlobalApiKeysInterface();