/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è YouTube API –∫–ª—é—á–µ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */

const { DirectusAuth } = require('./server/services/directus-auth-manager');
const axios = require('axios');

async function addYouTubeApiKeys() {
  try {
    console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º YouTube API –∫–ª—é—á–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–∫–µ–Ω
    const directusUrl = process.env.DIRECTUS_URL || 'https://directus.nplanner.ru';
    const adminEmail = process.env.DIRECTUS_ADMIN_EMAIL || 'admin@nplanner.ru';
    const adminPassword = process.env.DIRECTUS_ADMIN_PASSWORD;
    
    if (!adminPassword) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DIRECTUS_ADMIN_PASSWORD');
      return;
    }
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    const authResponse = await axios.post(`${directusUrl}/auth/login`, {
      email: adminEmail,
      password: adminPassword
    });
    
    const token = authResponse.data.data.access_token;
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–∫–µ–Ω');
    
    // YouTube API –∫–ª—é—á–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
    const youtubeKeys = [
      {
        service_name: 'YOUTUBE_CLIENT_ID',
        api_key: 'YOUR_YOUTUBE_CLIENT_ID_HERE', // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô
        is_active: true
      },
      {
        service_name: 'YOUTUBE_CLIENT_SECRET', 
        api_key: 'YOUR_YOUTUBE_CLIENT_SECRET_HERE', // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô
        is_active: true
      }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏
    for (const keyData of youtubeKeys) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–ª—é—á
        const existingResponse = await axios.get(`${directusUrl}/items/global_api_keys`, {
          params: {
            filter: {
              service_name: { _eq: keyData.service_name }
            }
          },
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        
        if (existingResponse.data.data.length > 0) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
          const existingId = existingResponse.data.data[0].id;
          await axios.patch(`${directusUrl}/items/global_api_keys/${existingId}`, {
            api_key: keyData.api_key,
            is_active: keyData.is_active,
            updated_at: new Date().toISOString()
          }, {
            headers: {
              Authorization: `Bearer ${token}`
            }
          });
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∫–ª—é—á: ${keyData.service_name}`);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
          await axios.post(`${directusUrl}/items/global_api_keys`, {
            ...keyData,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }, {
            headers: {
              Authorization: `Bearer ${token}`
            }
          });
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á: ${keyData.service_name}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${keyData.service_name}:`, error.response?.data || error.message);
      }
    }
    
    console.log('üéâ YouTube API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  addYouTubeApiKeys();
}

module.exports = { addYouTubeApiKeys };