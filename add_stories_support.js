/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Stories –≤ campaign_content
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ metadata –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ content_type
 */

import axios from 'axios';

const DIRECTUS_URL = process.env.DIRECTUS_URL || 'https://directus.roboflow.tech';
const ADMIN_EMAIL = process.env.DIRECTUS_ADMIN_EMAIL || 'lbrspb@gmail.com';
const ADMIN_PASSWORD = process.env.DIRECTUS_ADMIN_PASSWORD || 'QtpZ3dh7';

async function authenticate() {
  try {
    const response = await axios.post(`${DIRECTUS_URL}/auth/login`, {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD
    });
    
    if (response.data?.data?.access_token) {
      console.log('‚úì –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Directus');
      return response.data.data.access_token;
    } else {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.data || error.message);
    throw error;
  }
}

async function addMetadataField(token) {
  try {
    console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è metadata...');
    
    const fieldData = {
      field: 'metadata',
      type: 'json',
      meta: {
        field: 'metadata',
        special: ['cast-json'],
        interface: 'input-code',
        options: {
          language: 'json',
          template: '{}'
        },
        display: 'formatted-json-value',
        readonly: false,
        hidden: false,
        sort: 20,
        width: 'full',
        note: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (Stories, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç.–¥.)',
        required: false,
        group: null,
        validation: null
      },
      schema: {
        name: 'metadata',
        table: 'campaign_content',
        data_type: 'json',
        default_value: '{}',
        is_nullable: true,
        is_unique: false,
        is_primary_key: false,
        has_auto_increment: false,
        foreign_key_column: null,
        foreign_key_table: null,
        comment: 'JSON –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
      }
    };

    const response = await axios.post(
      `${DIRECTUS_URL}/fields/campaign_content`,
      fieldData,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('‚úì –ü–æ–ª–µ metadata —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    return response.data;
  } catch (error) {
    if (error.response?.status === 400 && error.response?.data?.errors?.[0]?.message?.includes('already exists')) {
      console.log('‚ÑπÔ∏è –ü–æ–ª–µ metadata —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è metadata:', error.response?.data || error.message);
      throw error;
    }
  }
}

async function executeSQL(token, query, description) {
  try {
    console.log(`üîß ${description}...`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º /server/admin endpoint –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
    const response = await axios.post(
      `${DIRECTUS_URL}/server/admin`,
      {
        query: query,
        mode: 'raw'
      },
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log(`‚úì ${description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
    return response.data;
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (error.response?.data?.message?.includes('already exists') || 
        error.response?.data?.message?.includes('does not exist')) {
      console.log(`‚ÑπÔ∏è ${description} - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ "${description}":`, error.response?.data || error.message);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }
  }
}

async function refreshDirectusSchema(token) {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã Directus...');
    
    await axios.post(
      `${DIRECTUS_URL}/schema/snapshot`,
      {},
      {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      }
    );

    console.log('‚úì –°—Ö–µ–º–∞ Directus –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã:', error.response?.data || error.message);
    // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Stories...');
    
    const token = await authenticate();
    
    // 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ metadata
    await addMetadataField(token);
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ content_type –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 'story'
    await executeSQL(
      token,
      `ALTER TABLE campaign_content DROP CONSTRAINT IF EXISTS campaign_content_content_type_check;`,
      '–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è content_type'
    );
    
    await executeSQL(
      token,
      `ALTER TABLE campaign_content ADD CONSTRAINT campaign_content_content_type_check CHECK (content_type IN ('text', 'text-image', 'video', 'video-text', 'mixed', 'story'));`,
      '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è content_type —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π story'
    );
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É Directus
    await refreshDirectusSchema(token);
    
    console.log('üéâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Stories —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    console.log('');
    console.log('üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:');
    console.log('   ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ metadata (JSON) –≤ campaign_content');
    console.log('   ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ content_type –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ "story"');
    console.log('   ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ö–µ–º–∞ Directus');
    console.log('');
    console.log('üîß –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–ø–∞ "story" —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø–æ–ª–µ metadata');
    
  } catch (error) {
    console.error('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Stories –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  }
}

main();