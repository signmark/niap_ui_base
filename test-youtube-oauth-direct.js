/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç YouTube OAuth –±–µ–∑ N8N
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ –Ω–∞—à–∏ credentials —Å —Ä–µ–∞–ª—å–Ω—ã–º refresh_token
 */

const DIRECTUS_URL = process.env.DIRECTUS_URL?.replace(/\/+$/, '') || 'https://directus.roboflow.tech';
const DIRECTUS_TOKEN = process.env.DIRECTUS_TOKEN;

async function testYouTubeOAuthDirect() {
  console.log('=== –ü–†–Ø–ú–û–ô –¢–ï–°–¢ YOUTUBE OAUTH ===\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º YouTube credentials –∏–∑ Directus
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º YouTube credentials –∏–∑ Directus...');
    const response = await fetch(`${DIRECTUS_URL}/items/global_api_keys`, {
      headers: {
        'Authorization': `Bearer ${DIRECTUS_TOKEN}`
      }
    });

    const data = await response.json();
    const records = data.data || [];

    // –ò—â–µ–º YouTube –∑–∞–ø–∏—Å—å
    let clientId = null;
    let clientSecret = null;

    const youtubeRecord = records.find(r => r.service_name === 'YouTube');
    if (youtubeRecord) {
      clientId = youtubeRecord.api_key;
      clientSecret = youtubeRecord.api_secret;
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å YouTube');
    } else {
      // Fallback –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      const clientIdRecord = records.find(r => r.service_name === 'YOUTUBE_CLIENT_ID');
      const clientSecretRecord = records.find(r => r.service_name === 'YOUTUBE_CLIENT_SECRET');
      
      if (clientIdRecord && clientSecretRecord) {
        clientId = clientIdRecord.api_key;
        clientSecret = clientSecretRecord.api_key;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ YouTube credentials');
      }
    }

    if (!clientId || !clientSecret) {
      console.error('‚ùå YouTube credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`üìã Client ID: ${clientId}`);
    console.log(`üìã Client Secret: ${clientSecret ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º credentials —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º refresh_token
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º credentials —Å Google OAuth API...');
    
    const oauthResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        client_id: clientId,
        client_secret: clientSecret,
        refresh_token: 'test_invalid_token',
        grant_type: 'refresh_token'
      })
    });

    const oauthResult = await oauthResponse.json();
    
    console.log(`üìä OAuth –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å: ${oauthResponse.status}`);
    console.log(`üìÑ OAuth –æ—Ç–≤–µ—Ç:`, oauthResult);

    if (oauthResult.error === 'invalid_client') {
      console.error('‚ùå –û–®–ò–ë–ö–ê: invalid_client - credentials –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!');
    } else if (oauthResult.error === 'invalid_grant') {
      console.log('‚úÖ –£–°–ü–ï–•: Credentials –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –ø—Ä–æ–±–ª–µ–º–∞ —Ç–æ–ª—å–∫–æ –≤ refresh_token');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Google OAuth API');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testYouTubeOAuthDirect();