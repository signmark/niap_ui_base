#!/usr/bin/env node

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Å—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Nplanner.ru
 */

import axios from 'axios';

const API_BASE = 'http://localhost:5000/api';
const CAMPAIGN_ID = '46868c44-c6a4-4bed-accf-9ad07bba790e';

async function showNplannerContent() {
  try {
    const headers = {
      'Authorization': `Bearer ${process.env.DIRECTUS_TOKEN || ''}`,
      'Content-Type': 'application/json'
    };

    console.log('üîç –ò—â—É –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Nplanner.ru...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
    let allContent = [];
    let page = 1;
    let hasMore = true;
    
    while (hasMore && page <= 20) { // –ú–∞–∫—Å–∏–º—É–º 20 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const response = await axios.get(`${API_BASE}/campaign-content`, {
        headers,
        params: {
          campaignId: CAMPAIGN_ID,
          limit: 50,
          page: page
        }
      });

      if (response.data?.data) {
        allContent = allContent.concat(response.data.data);
        hasMore = response.data.meta?.hasNextPage || false;
        page++;
      } else {
        hasMore = false;
      }
    }

    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${allContent.length}`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Nplanner.ru
    const nplannerContent = allContent.filter(item => {
      const title = item.title || '';
      const content = item.content || '';
      const source = item.metadata?.source || '';
      
      return title.toLowerCase().includes('nplanner') ||
             content.toLowerCase().includes('nplanner') ||
             source.includes('nplanner');
    });
    
    console.log(`üè• –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è Nplanner.ru: ${nplannerContent.length}`);
    
    if (nplannerContent.length > 0) {
      console.log('\nüìã –í—Å–µ –ø–æ—Å—Ç—ã –¥–ª—è Nplanner.ru:');
      
      nplannerContent
        .sort((a, b) => new Date(b.createdAt || b.created_at) - new Date(a.createdAt || a.created_at))
        .forEach((item, index) => {
          const createdDate = new Date(item.createdAt || item.created_at).toLocaleString('ru-RU');
          const hasImage = item.imageUrl || item.image_url ? 'üì∏' : 'üìù';
          const source = item.metadata?.source || 'unknown';
          const status = item.status || 'unknown';
          
          console.log(`${index + 1}. ${hasImage} ${item.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
          console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${createdDate}`);
          console.log(`   üè∑Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}`);
          console.log(`   üìù –î–ª–∏–Ω–∞: ${item.content?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
          console.log(`   üîÑ –°—Ç–∞—Ç—É—Å: ${status}`);
          if (item.imageUrl || item.image_url) {
            const imageUrl = item.imageUrl || item.image_url;
            console.log(`   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl.substring(0, 60)}...`);
          }
          console.log(`   üÜî ID: ${item.id}`);
          console.log('');
        });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const withImages = nplannerContent.filter(item => item.imageUrl || item.image_url);
      const bySource = {};
      nplannerContent.forEach(item => {
        const source = item.metadata?.source || 'unknown';
        bySource[source] = (bySource[source] || 0) + 1;
      });
      
      console.log('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–ê NPLANNER.RU:');
      console.log(`üì∏ –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${withImages.length}/${nplannerContent.length}`);
      console.log('\nüìä –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
      Object.entries(bySource).forEach(([source, count]) => {
        console.log(`   ${source}: ${count} –ø–æ—Å—Ç–æ–≤`);
      });
      
      console.log('\n‚úÖ –í–°–ï –ü–û–°–¢–´ NPLANNER.RU –ù–ê–ô–î–ï–ù–´ –ò –ì–û–¢–û–í–´!');
      console.log('üîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
      
    } else {
      console.log('‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Nplanner.ru –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

showNplannerContent();