/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML-—Å–ø–∏—Å–∫–æ–≤ –≤ Telegram
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ ul/li –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram
 * 
 * –ó–∞–ø—É—Å–∫: node telegram-html-lists-test.js
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import axios from 'axios';
import fs from 'fs';
import dotenv from 'dotenv';
import { log } from './server/utils/logger.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '';
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '';

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testHtml = `
<p><strong>–í —Ö–æ–¥–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–∏—Å–∫—É—Å—Å–∏–∏</strong> <em>–º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –ø—Ä–∏—á–∏–Ω—ã</em>, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –∑–∞–≤—Ç—Ä–∞–∫ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–≤–∞–∂–Ω–µ–π—à–∏–º –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏, –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å, –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∞–ø–ø–µ—Ç–∏—Ç–∞. üåû</p>

<p>–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω—ã–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª—å –ø–µ—Ä–µ–∫—É—Å–æ–≤, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–∏ –º–æ–≥—É—Ç –∫–∞–∫ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è üèãÔ∏è‚Äç‚ôÄÔ∏è, —Ç–∞–∫ –∏ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –Ω–∞–Ω–æ—Å–∏—Ç—å –≤—Ä–µ–¥ —Ñ–∏–≥—É—Ä–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é. üçï</p>

<p><strong>–°–ª–µ–¥—É–µ—Ç, –æ–¥–Ω–∞–∫–æ, –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å, —á—Ç–æ –Ω–µ –≤—Å–µ –ø–µ—Ä–µ–∫—É—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø–æ–ª–µ–∑–Ω—ã. ‚ö†Ô∏è</strong> –ö –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º –ø–µ—Ä–µ–∫—É—Å–∞–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è, –≤—ã–ø–µ—á–∫–∞, —á–∏–ø—Å—ã –∏ –ø—Ä–æ—á–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ñ–∞—Å—Ç—Ñ—É–¥–∞. üç©</p>

<p><em>–ü–æ–ª–µ–∑–Ω—ã–º–∏ –ø–µ—Ä–µ–∫—É—Å–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —á—É–≤—Å—Ç–≤–æ –Ω–∞—Å—ã—â–µ–Ω–∏—è, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å –∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤. ü•ó</em></p>

<p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–µ—Ä–µ–∫—É—Å—ã–≤–∞–Ω–∏—é: üìù</strong></p>

<ul>
    <li>–û—Ç–¥–∞–≤–∞–π—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–∫—É—Å–∞–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –±–µ–ª–æ–∫, –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã –∏ –∫–ª–µ—Ç—á–∞—Ç–∫—É ‚Äì –æ–Ω–∏ –¥–æ–ª—å—à–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç —á—É–≤—Å—Ç–≤–æ –Ω–∞—Å—ã—â–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤. üí™</li>
    <li>–ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –ø–∏—â—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äì –ø–µ—Ä–µ–∫—É—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –ª–µ–≥–∫–æ–µ —á—É–≤—Å—Ç–≤–æ –≥–æ–ª–æ–¥–∞, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ –∏–ª–∏ –æ—Ç —Å–∫—É–∫–∏. ü§î</li>
    <li>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ ‚Äì —É–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–µ—Ö–æ–≤ –ø–æ–ª–µ–∑–Ω–æ, –Ω–æ –µ—Å–ª–∏ —Å—ä–µ—Å—Ç—å –ø–æ–ª–ø–∞–∫–µ—Ç–∞, —ç—Ç–æ —É–∂–µ —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏. ü•ú</li>
</ul>

<p>–ï—Å–ª–∏ –≤—ã —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–∞—Ä–∞—Ñ–æ–Ω—É –Ω–∞ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ. üì≤</p>`;

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ HTML-—Ç–µ–≥–∏ –≤ —Ç–µ–≥–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram
 * @param {string} html HTML-—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
 * @returns {string} –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç
 */
function formatForTelegram(html) {
  let formatted = html
    // –ó–∞–º–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram
    .replace(/<strong>(.*?)<\/strong>/g, '<b>$1</b>')
    .replace(/<b>(.*?)<\/b>/g, '<b>$1</b>')
    .replace(/<em>(.*?)<\/em>/g, '<i>$1</i>')
    .replace(/<i>(.*?)<\/i>/g, '<i>$1</i>')
    .replace(/<u>(.*?)<\/u>/g, '<u>$1</u>')
    .replace(/<s>(.*?)<\/s>/g, '<s>$1</s>')
    .replace(/<del>(.*?)<\/del>/g, '<s>$1</s>')
    .replace(/<code>(.*?)<\/code>/g, '<code>$1</code>')
    .replace(/<pre>(.*?)<\/pre>/g, '<pre>$1</pre>')
    .replace(/<a\s+href="(.*?)".*?>(.*?)<\/a>/g, '<a href="$1">$2</a>');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
  formatted = formatted.replace(/<ul>([\s\S]*?)<\/ul>/g, function(match, listContent) {
    const items = listContent.match(/<li>([\s\S]*?)<\/li>/g);
    if (!items) return match;
    
    return items.map(item => {
      const content = item.replace(/<li>([\s\S]*?)<\/li>/, '$1').trim();
      return `‚Ä¢ ${content}\n`;
    }).join('');
  });
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É)
  formatted = formatted.replace(/<p>([\s\S]*?)<\/p>/g, '$1\n\n');
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è HTML-—Ç–µ–≥–æ–≤
  formatted = formatted.replace(/<[^>]*>/g, '');
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
  formatted = formatted.replace(/\n{3,}/g, '\n\n');
  
  return formatted.trim();
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {string} html HTML-—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendHtmlMessage(html) {
  try {
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      throw new Error('–ù–µ –∑–∞–¥–∞–Ω—ã —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º HTML –¥–ª—è Telegram
    const formattedText = formatForTelegram(html);
    
    const params = {
      chat_id: TELEGRAM_CHAT_ID,
      text: formattedText,
      parse_mode: 'HTML',
      disable_web_page_preview: true
    };
    
    log(`–û—Ç–ø—Ä–∞–≤–∫–∞ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...`, 'test');
    const response = await axios.post(url, params);
    
    if (response.data.ok) {
      const messageId = response.data.result.message_id;
      let messageUrl = '';
      
      // –ï—Å–ª–∏ ID —á–∞—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100, —ç—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
      if (String(TELEGRAM_CHAT_ID).startsWith('-100')) {
        const chatId = String(TELEGRAM_CHAT_ID).replace('-100', '');
        messageUrl = `https://t.me/c/${chatId}/${messageId}`;
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL
        const chatInfoUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getChat`;
        const chatInfoParams = { chat_id: TELEGRAM_CHAT_ID };
        const chatInfoResponse = await axios.post(chatInfoUrl, chatInfoParams);
        
        if (chatInfoResponse.data.ok && chatInfoResponse.data.result.username) {
          messageUrl = `https://t.me/${chatInfoResponse.data.result.username}/${messageId}`;
        }
      }
      
      log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram, ID: ${messageId}`, 'test');
      log(`URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageUrl}`, 'test');
      
      return {
        success: true,
        messageId,
        messageUrl,
        result: response.data.result
      };
    } else {
      throw new Error(`Telegram API error: ${response.data.description}`);
    }
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTML –≤ Telegram: ${error.message}`, 'test');
    
    return {
      success: false,
      error: error.message,
      stack: error.stack
    };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ HTML –≤ Telegram
 * @param {string} html HTML-—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
async function testAppAPI(html) {
  try {
    // URL API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç raw-html-telegram)
    const apiUrl = 'http://localhost:5000/api/test/raw-html-telegram';
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const payload = {
      text: html,
      autoFixHtml: true
    };
    
    log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...`, 'test');
    const response = await axios.post(apiUrl, payload);
    
    log(`–û—Ç–≤–µ—Ç –æ—Ç API: ${JSON.stringify(response.data)}`, 'test');
    
    return response.data;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`, 'test');
    
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
 */
async function runTests() {
  try {
    console.log('\n========== –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò HTML-–°–ü–ò–°–ö–û–í –í TELEGRAM ==========\n');
    
    // –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ HTML —á–µ—Ä–µ–∑ Telegram Bot API
    console.log('\n----- –¢–µ—Å—Ç 1: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API -----\n');
    const directResult = await sendHtmlMessage(testHtml);
    
    if (directResult.success) {
      console.log(`‚úÖ –¢–µ—Å—Ç 1 —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${directResult.messageUrl}`);
    } else {
      console.log(`‚ùå –¢–µ—Å—Ç 1 –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${directResult.error}`);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('\n----- –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -----\n');
    const apiResult = await testAppAPI(testHtml);
    
    if (apiResult.success) {
      console.log(`‚úÖ –¢–µ—Å—Ç 2 —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${apiResult.postUrl || apiResult.messageUrl}`);
    } else {
      console.log(`‚ùå –¢–µ—Å—Ç 2 –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${apiResult.error}`);
    }
    
    console.log('\n========== –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ==========\n');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();