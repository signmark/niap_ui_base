/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ connection string –¥–ª—è PostgreSQL
 * –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è N8N
 */

async function checkDatabaseConnection() {
  console.log('=== –ü–†–û–í–ï–†–ö–ê DATABASE CONNECTION ===\n');

  // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  console.log('DATABASE_URL:', process.env.DATABASE_URL ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  console.log('PGHOST:', process.env.PGHOST || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.log('PGPORT:', process.env.PGPORT || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.log('PGUSER:', process.env.PGUSER || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.log('PGPASSWORD:', process.env.PGPASSWORD ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  console.log('PGDATABASE:', process.env.PGDATABASE || '–Ω–µ –∑–∞–¥–∞–Ω');

  if (process.env.DATABASE_URL) {
    // –ü–∞—Ä—Å–∏–º DATABASE_URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    try {
      const url = new URL(process.env.DATABASE_URL);
      console.log('\nüìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã DATABASE_URL:');
      console.log('Host:', url.hostname);
      console.log('Port:', url.port || '5432');
      console.log('Database:', url.pathname.substring(1));
      console.log('Username:', url.username);
      console.log('Password:', url.password ? '***–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç***' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      console.log('SSL:', url.searchParams.get('sslmode') || '–Ω–µ —É–∫–∞–∑–∞–Ω');

      console.log('\nüîß –î–ª—è N8N PostgreSQL node –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
      console.log('Host:', url.hostname);
      console.log('Port:', url.port || '5432');
      console.log('Database:', url.pathname.substring(1));
      console.log('User:', url.username);
      console.log('Password:', url.password);
      console.log('SSL Mode: require');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ DATABASE_URL:', error.message);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Directus API
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Directus API...');
  try {
    const response = await fetch(process.env.DIRECTUS_URL + '/items/global_api_keys?limit=1', {
      headers: {
        'Authorization': `Bearer ${process.env.DIRECTUS_TOKEN}`
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Directus API –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log(`üìä –ó–∞–ø–∏—Å–µ–π –≤ global_api_keys: ${data.data?.length || 0}`);
    } else {
      console.log('‚ùå Directus API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', response.status);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Directus API:', error.message);
  }

  console.log('\nüí° –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ invalid_client:');
  console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ connection string –≤ N8N PostgreSQL node');
  console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–ª–µ api_secret —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∑–∞–ø–∏—Å—å YouTube —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
  console.log('4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ N8N workflow –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
}

checkDatabaseConnection();