/**
 * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
 */

// –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
async function testAdminCheck() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const response = await fetch('http://localhost:5000/api/auth/is-admin', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer test_token_from_browser`,
        'Content-Type': 'application/json'
      }
    });
    
    const result = await response.json();
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', JSON.stringify(result, null, 2));
    
    if (result.success && result.isAdmin) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
      console.log('üîß –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç - –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é isUserAdmin
async function testIsUserAdminFunction() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é isUserAdmin –Ω–∞–ø—Ä—è–º—É—é...');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    const { isUserAdmin } = await import('./server/routes-global-api-keys.js');
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const mockReq = {
      headers: {
        authorization: 'Bearer test_token'
      }
    };
    
    const result = await isUserAdmin(mockReq);
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç isUserAdmin:', result);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ isUserAdmin:', error.message);
  }
}

// –¢—Ä–µ—Ç–∏–π —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Directus
async function testDirectusUserData() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Directus...');
  
  try {
    const directusUrl = 'https://directus.roboflow.tech';
    const adminToken = process.env.DIRECTUS_TOKEN;
    
    if (!adminToken) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DIRECTUS_TOKEN');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
    const response = await fetch(`${directusUrl}/users?filter[email][_eq]=lbrspb@gmail.com`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    const userData = await response.json();
    
    if (userData.data && userData.data.length > 0) {
      const user = userData.data[0];
      console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Directus:');
      console.log(`  üìß Email: ${user.email}`);
      console.log(`  üî∞ is_smm_admin: ${user.is_smm_admin}`);
      console.log(`  üöÄ is_smm_super: ${user.is_smm_super}`);
      console.log(`  üé≠ role: ${user.role}`);
      
      const shouldBeAdmin = user.is_smm_admin === true || 
                           user.is_smm_admin === 1 || 
                           user.is_smm_admin === '1' || 
                           user.is_smm_admin === 'true';
      
      console.log(`‚úÖ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º: ${shouldBeAdmin}`);
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
async function runAllTests() {
  await testAdminCheck();
  await testIsUserAdminFunction();
  await testDirectusUserData();
}

runAllTests();