/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 * –ó–∞–ø—É—Å–∫: node fix-platform-status-update.js ID_–ö–û–ù–¢–ï–ù–¢–ê
 */

import axios from 'axios';
import fs from 'fs';
import 'dotenv/config';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_URL = 'http://localhost:5000';
const DIRECTUS_URL = process.env.DIRECTUS_URL || 'https://directus.nplanner.ru';
const DIRECTUS_EMAIL = process.env.DIRECTUS_ADMIN_EMAIL || 'lbrspb@gmail.com';
const DIRECTUS_PASSWORD = process.env.DIRECTUS_ADMIN_PASSWORD || '123456789';

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ
const CONTENT_ID = process.argv[2] || '02bc0dc0-4a3d-4926-adbc-260f8ac2f3fd';

// –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const directusApi = axios.create({
  baseURL: DIRECTUS_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function waitFor(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Directus
async function authenticate() {
  try {
    console.log(`\nüîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${DIRECTUS_EMAIL}`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ Directus
    const response = await directusApi.post('/auth/login', {
      email: DIRECTUS_EMAIL,
      password: DIRECTUS_PASSWORD
    });
    
    if (!response.data || !response.data.data || !response.data.data.access_token) {
      console.error('‚ùå –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω:', response.data);
      return null;
    }
    
    const token = response.data.data.access_token;
    console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: ${token.length}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    directusApi.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    
    return token;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function getContent(id) {
  try {
    console.log(`\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å ID: ${id}`);
    const response = await api.get(`/api/campaign-content/${id}`);
    
    let contentData = response.data;
    if (response.data && response.data.data) {
      contentData = response.data.data;
    }
    
    return contentData;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${error.message}`);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
    return null;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Directus
async function updatePlatformStatus(id, platform, newStatus, token) {
  try {
    console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ${platform} –Ω–∞ ${newStatus} –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${id}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentResponse = await directusApi.get(`/items/campaign_content/${id}`);
    if (!contentResponse.data || !contentResponse.data.data) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Directus');
      return false;
    }
    
    const contentData = contentResponse.data.data;
    const socialPlatforms = contentData.social_platforms || {};
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    socialPlatforms[platform] = {
      ...(socialPlatforms[platform] || {}),
      status: newStatus,
      publishedAt: new Date().toISOString()
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Directus
    const updateResponse = await directusApi.patch(`/items/campaign_content/${id}`, {
      social_platforms: socialPlatforms
    });
    
    if (!updateResponse.data) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Directus');
      return false;
    }
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ${platform} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newStatus}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${error.message}`);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
    return false;
  }
}

// –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function mockPublishRequest(id, platform) {
  try {
    console.log(`\nüöÄ –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${id} –≤ ${platform}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    const response = await api.post(`/api/publish/${id}`, {
      platforms: [platform]
    });
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:`, response.data);
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é: ${error.message}`);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
    return null;
  }
}

// –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
function analyzePublishResponse(response, platform) {
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:');
  
  if (!response) {
    console.log('‚ùå –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return false;
  }
  
  if (!response.success) {
    console.log(`‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞: ${response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    return false;
  }
  
  if (!response.results || !response.results[platform]) {
    console.log(`‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ${platform} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ`);
    return false;
  }
  
  const platformResult = response.results[platform];
  
  if (!platformResult.success) {
    console.log(`‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ ${platform} –Ω–µ —É—Å–ø–µ—à–Ω–∞: ${platformResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    return false;
  }
  
  console.log(`‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ ${platform} —É—Å–ø–µ—à–Ω–∞`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const result = platformResult.result;
  if (!result) {
    console.log(`‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ URL
  if (result.messageId) {
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.messageId}`);
  } else if (result.url) {
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω URL: ${result.url}`);
  } else if (result.postUrl) {
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω URL –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${result.postUrl}`);
  } else {
    console.log(`‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ messageId, url –∏–ª–∏ postUrl`);
  }
  
  return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('========================================');
  console.log('üß™ –û–¢–õ–ê–î–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –ü–õ–ê–¢–§–û–†–ú üß™');
  console.log('========================================');
  console.log(`üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${CONTENT_ID}`);
  
  try {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const token = await authenticate();
    if (!token) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
      return;
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const initialContent = await getContent(CONTENT_ID);
    if (!initialContent) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
      return;
    }
    
    console.log(`\nüìÑ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:`);
    console.log(`  –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${initialContent.title || '(–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)'}`);
    console.log(`  –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${initialContent.contentType || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    console.log(`\nüîç –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º:`);
    if (initialContent.socialPlatforms) {
      Object.entries(initialContent.socialPlatforms).forEach(([platform, data]) => {
        console.log(`  ${platform}: ${data.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      });
    } else {
      console.log('  –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
    
    // 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å Telegram –Ω–∞ pending
    await updatePlatformStatus(CONTENT_ID, 'telegram', 'pending', token);
    
    // 4. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const resetContent = await getContent(CONTENT_ID);
    console.log(`\nüìä –°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:`);
    if (resetContent.socialPlatforms) {
      Object.entries(resetContent.socialPlatforms).forEach(([platform, data]) => {
        console.log(`  ${platform}: ${data.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      });
    }
    
    // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    const publishResponse = await mockPublishRequest(CONTENT_ID, 'telegram');
    
    // 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    const publishSuccess = analyzePublishResponse(publishResponse, 'telegram');
    
    // 7. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    console.log('\n‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...');
    await waitFor(5000);
    
    // 8. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const finalContent = await getContent(CONTENT_ID);
    console.log(`\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º:`);
    if (finalContent.socialPlatforms) {
      Object.entries(finalContent.socialPlatforms).forEach(([platform, data]) => {
        console.log(`  ${platform}: ${data.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      });
    }
    
    // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ published
    const telegramStatus = finalContent.socialPlatforms?.telegram?.status;
    if (telegramStatus === 'published') {
      console.log(`\n‚úÖ –°—Ç–∞—Ç—É—Å Telegram —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'published'`);
    } else {
      console.log(`\n‚ùå –°—Ç–∞—Ç—É—Å Telegram –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'published', —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${telegramStatus || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      
      if (publishSuccess) {
        console.log(`\nüîß –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...`);
        await updatePlatformStatus(CONTENT_ID, 'telegram', 'published', token);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updatedContent = await getContent(CONTENT_ID);
        const updatedStatus = updatedContent.socialPlatforms?.telegram?.status;
        
        if (updatedStatus === 'published') {
          console.log(`\n‚úÖ –°—Ç–∞—Ç—É—Å Telegram —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ`);
          
          console.log(`\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –í –ö–û–î–ï: —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
          console.log(`  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–µ—Ç–æ–¥–µ publishToPlatform`);
        } else {
          console.log(`\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–∞–∂–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ`);
        }
      }
    }
    
    console.log('\n========================================');
    console.log('‚úÖ –¢–ï–°–¢ –û–¢–õ–ê–î–ö–ò –ó–ê–í–ï–†–®–ï–ù');
    console.log('========================================');
    
  } catch (error) {
    console.error(`\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    if (error.stack) {
      console.error(error.stack);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();