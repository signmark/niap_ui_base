/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Gemini 2.5 —á–µ—Ä–µ–∑ Vertex AI
 */

async function testVertexAIGemini25() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Vertex AI Gemini 2.5 –º–æ–¥–µ–ª–µ–π');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    const { vertexAICredentials } = await import('./server/services/vertex-ai-credentials.js');
    const { createVertexAIService } = await import('./server/services/vertex-ai.js');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!vertexAICredentials.hasCredentials()) {
      console.log('‚ùå –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Vertex AI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log('‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Vertex AI –Ω–∞–π–¥–µ–Ω—ã');
    
    const credentials = vertexAICredentials.loadCredentials();
    const projectId = vertexAICredentials.getProjectId();
    
    console.log('üìã Project ID:', projectId);
    console.log('üìß Service Account:', credentials.client_email);
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Vertex AI
    const vertexAIService = createVertexAIService(projectId, credentials);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Vertex AI...');
    const connectionTest = await vertexAIService.testConnection();
    
    if (connectionTest) {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Vertex AI —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Vertex AI');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini 2.5:');
    const availableModels = vertexAIService.getAvailableModels();
    availableModels.forEach(model => {
      console.log(`  - ${model}`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –º–æ–¥–µ–ª—å—é 2.5 Flash
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å Gemini 2.5 Flash...');
    const flashResult = await vertexAIService.generateText({
      prompt: '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –æ –ø–æ–ª—å–∑–µ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.',
      model: 'gemini-2.5-flash',
      maxTokens: 200,
      temperature: 0.7
    });
    
    console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç Gemini 2.5 Flash:');
    console.log(flashResult);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –º–æ–¥–µ–ª—å—é 2.5 Pro
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å Gemini 2.5 Pro...');
    const proResult = await vertexAIService.generateText({
      prompt: '–°–æ–∑–¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø–æ—Å—Ç –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∏ –Ω–∞—É—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã.',
      model: 'gemini-2.5-pro',
      maxTokens: 400,
      temperature: 0.6
    });
    
    console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç Gemini 2.5 Pro:');
    console.log(proResult);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã Vertex AI Gemini 2.5 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Vertex AI:', error);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (import.meta.url === `file://${process.argv[1]}`) {
  testVertexAIGemini25();
}

export { testVertexAIGemini25 };