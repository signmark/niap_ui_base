/**
 * –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
 */

import fs from 'fs';
import path from 'path';

function analyzeCodeForDuplicateRisks() {
  console.log('üîç –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ö–û–î–ê –ù–ê –†–ò–°–ö–ò –î–£–ë–õ–ò–ö–ê–¢–û–í\n');
  
  const findings = {
    critical: [],
    high: [],
    medium: [],
    low: [],
    info: []
  };

  // 1. –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
  console.log('1. –ê–Ω–∞–ª–∏–∑ publish-scheduler.ts...');
  try {
    const schedulerContent = fs.readFileSync('server/services/publish-scheduler.ts', 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    if (!schedulerContent.includes('isProcessing')) {
      findings.critical.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
    }
    
    if (!schedulerContent.includes('processedContentIds')) {
      findings.high.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ postUrl
    if (!schedulerContent.includes('postUrl') || !schedulerContent.includes('trim()')) {
      findings.high.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è postUrl –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    const errorHandlingCount = (schedulerContent.match(/catch\s*\(/g) || []).length;
    if (errorHandlingCount < 3) {
      findings.medium.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–Ω–∞–π–¥–µ–Ω–æ ${errorHandlingCount} catch –±–ª–æ–∫–æ–≤)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    if (!schedulerContent.includes('adminTokenCache')) {
      findings.medium.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    console.log(`   ‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${schedulerContent.length} —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–¥–∞`);
    
  } catch (error) {
    findings.critical.push(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${error.message}`);
  }

  // 2. –ê–Ω–∞–ª–∏–∑ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
  console.log('2. –ê–Ω–∞–ª–∏–∑ status-validator.ts...');
  try {
    const validatorContent = fs.readFileSync('server/services/status-validator.ts', 'utf8');
    
    if (!validatorContent.includes('postUrl')) {
      findings.high.push('–í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ postUrl');
    }
    
    if (!validatorContent.includes('published')) {
      findings.medium.push('–í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å published');
    }
    
    console.log(`   ‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${validatorContent.length} —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–¥–∞`);
    
  } catch (error) {
    findings.medium.push(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: ${error.message}`);
  }

  // 3. –ê–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  console.log('3. –ê–Ω–∞–ª–∏–∑ social services...');
  try {
    const socialFiles = ['vk.ts', 'telegram.ts', 'facebook.ts', 'instagram.ts'];
    const socialDir = 'server/services/social';
    
    for (const file of socialFiles) {
      const filePath = path.join(socialDir, file);
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ postUrl
        if (!content.includes('postUrl') && !content.includes('post_url')) {
          findings.medium.push(`${file}: –°–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å postUrl`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        if (!content.includes('try') || !content.includes('catch')) {
          findings.medium.push(`${file}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫`);
        }
      }
    }
    
    console.log(`   ‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${socialFiles.length} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤`);
    
  } catch (error) {
    findings.medium.push(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: ${error.message}`);
  }

  // 4. –ê–Ω–∞–ª–∏–∑ API —Ä–æ—É—Ç–æ–≤
  console.log('4. –ê–Ω–∞–ª–∏–∑ publishing-routes.ts...');
  try {
    const routesContent = fs.readFileSync('server/api/publishing-routes.ts', 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ä–æ—É—Ç–æ–≤
    const postRoutes = (routesContent.match(/router\.post/g) || []).length;
    const publishRoutes = (routesContent.match(/publish/g) || []).length;
    
    if (publishRoutes > postRoutes * 2) {
      findings.medium.push('–í–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!routesContent.includes('validate') && !routesContent.includes('schema')) {
      findings.medium.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–æ—É—Ç–∞—Ö');
    }
    
    console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ ${postRoutes} POST —Ä–æ—É—Ç–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);
    
  } catch (error) {
    findings.medium.push(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—É—Ç–æ–≤: ${error.message}`);
  }

  // 5. –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–∞
  console.log('5. –ê–Ω–∞–ª–∏–∑ directus-storage-adapter.ts...');
  try {
    const storageContent = fs.readFileSync('server/services/directus-storage-adapter.ts', 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (!storageContent.includes('transaction')) {
      findings.medium.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    if (!storageContent.includes('atomic')) {
      findings.low.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }
    
    console.log(`   ‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–¥–∞–ø—Ç–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`);
    
  } catch (error) {
    findings.medium.push(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${error.message}`);
  }

  // 6. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  console.log('6. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  try {
    const envFiles = ['.env', '.env.example', '.env.production'];
    let envAnalysis = { hasSchedulerConfig: false, hasTimeouts: false };
    
    for (const envFile of envFiles) {
      if (fs.existsSync(envFile)) {
        const envContent = fs.readFileSync(envFile, 'utf8');
        
        if (envContent.includes('SCHEDULER') || envContent.includes('PUBLISH')) {
          envAnalysis.hasSchedulerConfig = true;
        }
        
        if (envContent.includes('TIMEOUT') || envContent.includes('INTERVAL')) {
          envAnalysis.hasTimeouts = true;
        }
      }
    }
    
    if (!envAnalysis.hasSchedulerConfig) {
      findings.low.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ .env');
    }
    
    console.log(`   ‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
    
  } catch (error) {
    findings.low.push(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê:');
  console.log('=====================================');
  
  const totalFindings = Object.values(findings).flat().length;
  
  if (findings.critical.length > 0) {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:');
    findings.critical.forEach((finding, i) => console.log(`   ${i + 1}. ${finding}`));
  }
  
  if (findings.high.length > 0) {
    console.log('\n‚ö†Ô∏è  –í–´–°–û–ö–ò–ô –†–ò–°–ö:');
    findings.high.forEach((finding, i) => console.log(`   ${i + 1}. ${finding}`));
  }
  
  if (findings.medium.length > 0) {
    console.log('\n‚ö° –°–†–ï–î–ù–ò–ô –†–ò–°–ö:');
    findings.medium.forEach((finding, i) => console.log(`   ${i + 1}. ${finding}`));
  }
  
  if (findings.low.length > 0) {
    console.log('\nüí° –ù–ò–ó–ö–ò–ô –†–ò–°–ö / –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    findings.low.forEach((finding, i) => console.log(`   ${i + 1}. ${finding}`));
  }
  
  if (findings.info.length > 0) {
    console.log('\nüìù –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø:');
    findings.info.forEach((finding, i) => console.log(`   ${i + 1}. ${finding}`));
  }
  
  // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
  let riskLevel = '–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô';
  if (findings.critical.length > 0) riskLevel = '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô';
  else if (findings.high.length > 0) riskLevel = '–í–´–°–û–ö–ò–ô';
  else if (findings.medium.length > 2) riskLevel = '–°–†–ï–î–ù–ò–ô';
  else if (findings.medium.length > 0) riskLevel = '–ù–ò–ó–ö–ò–ô';
  
  console.log(`\nüéØ –û–ë–©–ò–ô –†–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í: ${riskLevel}`);
  console.log(`üìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—á–∞–Ω–∏–π: ${totalFindings}`);
  
  if (totalFindings === 0) {
    console.log('üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–©–ò–©–ï–ù–ê –û–¢ –î–£–ë–õ–ò–ö–ê–¢–û–í!');
  } else if (findings.critical.length === 0 && findings.high.length === 0) {
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–º–µ–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é –∑–∞—â–∏—Ç—É –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
  } else {
    console.log('‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π');
  }
  
  return findings;
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeCodeForDuplicateRisks();