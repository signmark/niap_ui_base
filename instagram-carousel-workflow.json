{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "publish-instagram-carousel",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f2a07c49-523e-4e51-94d0-1697db5d6890",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -2920,
        300
      ],
      "webhookId": "publish-instagram-carousel"
    },
    {
      "parameters": {
        "jsCode": "// Подготовка параметров\nreturn {\n  contentId: $input.item.json.body.contentId,\n  campaignId: $input.item.json.body.campaignId\n};"
      },
      "id": "dbd26bff-5782-40f4-b42d-b403c52f0618",
      "name": "Подготовка параметров",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -2740,
        300
      ]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": "public",
        "table": "campaign_content",
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.contentId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ce8bb11e-3338-42ac-b305-a39692b5d9ef",
      "name": "Получение контента",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2520,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "lO4gl1E2I2lsrRce",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.id }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "2a7d5ab1-c8cb-45b0-98ce-e32d231ca59a",
      "name": "Контент найден?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -2260,
        300
      ]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": "public",
        "table": "user_campaigns",
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.campaign_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "87680bc7-6bba-4db9-b3ce-c399757714f7",
      "name": "Получение настроек кампании",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2000,
        160
      ],
      "credentials": {
        "postgres": {
          "id": "lO4gl1E2I2lsrRce",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из предыдущих нод\nconst content = $node[\"Получение контента\"].json || {};\nconst campaign = $node[\"Получение настроек кампании\"].json || {};\n\n// Получаем настройки Instagram из кампании\nlet instagramAccessToken, instagramAccountId;\n\n// Проверяем наличие структуры social_media_settings\nif (campaign.social_media_settings && \n    campaign.social_media_settings.instagram && \n    campaign.social_media_settings.instagram.token && \n    campaign.social_media_settings.instagram.businessAccountId) {\n  \n  instagramAccessToken = campaign.social_media_settings.instagram.token;\n  instagramAccountId = campaign.social_media_settings.instagram.businessAccountId;\n} else {\n  return { error: \"Настройки Instagram не найдены\" };\n}\n\n// Проверка на наличие основного изображения\nconst imageUrl = content.image_url;\nif (!imageUrl) {\n  return { error: \"Основное изображение не найдено\" };\n}\n\n// Подготовка массива изображений для карусели\nlet images = [imageUrl]; // Добавляем основное изображение\n\n// Проверяем наличие дополнительных изображений\nif (content.additional_images && Array.isArray(content.additional_images) && content.additional_images.length > 0) {\n  // Добавляем дополнительные изображения в массив\n  images = images.concat(content.additional_images);\n}\n\n// Подготовка текста для Instagram\nconst message = content.content || '';\n\nconsole.log(\"Подготовленные данные:\");\nconsole.log(\"Токен Instagram (первые 10 символов):\", instagramAccessToken ? instagramAccessToken.substring(0, 10) + \"...\" : \"Отсутствует\");\nconsole.log(\"ID бизнес-аккаунта Instagram:\", instagramAccountId);\nconsole.log(\"Количество изображений:\", images.length);\nconsole.log(\"Основное изображение:\", imageUrl);\nif (content.additional_images && Array.isArray(content.additional_images)) {\n  console.log(\"Дополнительные изображения:\", content.additional_images);\n}\n\n// Формируем объект с данными для публикации\nreturn {\n  content_id: content.id,\n  campaign_id: content.campaign_id,\n  message: message,\n  image_url: imageUrl,\n  images: images, // Массив всех изображений для карусели\n  instagramToken: instagramAccessToken,\n  instagramAccountId: instagramAccountId,\n  content_type: content.content_type || \"image\",\n  // Определяем тип публикации\n  is_carousel: images.length > 1 // Флаг, указывающий, что это карусель\n};"
      },
      "id": "7fc15eea-dda2-4918-b206-50fda665bca6",
      "name": "Подготовка данных для Instagram",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1800,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из входящего потока\nconst images = $json.images || [];\nconst instagramAccountId = $json.instagramAccountId;\nconst accessToken = $json.instagramToken;\nconst message = $json.message || '';\nconst contentId = $json.content_id;\nconst campaignId = $json.campaign_id;\n\n// Создаем массив для хранения ID контейнеров\nconst containerIds = [];\n\n// Логируем основные параметры для диагностики\nconsole.log(\"------- НАЧАЛО ПУБЛИКАЦИИ КАРУСЕЛИ В INSTAGRAM -------\");\nconsole.log(`Instagram Account ID: ${instagramAccountId}`);\nconsole.log(`Длина токена доступа: ${accessToken ? accessToken.length : 'токен отсутствует'}`);\nconsole.log(`Количество изображений для карусели: ${images.length}`);\n\n// Используем API версии 16.0, поскольку более новые версии могут иметь различия в параметрах\nconst apiVersion = \"v16.0\";\n\n// Функция для временной задержки между запросами\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Создание контейнеров для изображений карусели\nfor (let i = 0; i < images.length; i++) {\n  const imageUrl = images[i];\n  console.log(`\\n[${i + 1}/${images.length}] Обработка изображения: ${imageUrl}`);\n  \n  try {\n    // Формируем данные для создания контейнера\n    const mediaData = {\n      image_url: imageUrl,\n      is_carousel_item: true,\n      access_token: accessToken\n    };\n    \n    console.log(`Отправка запроса на создание контейнера для изображения ${i + 1}...`);\n    \n    // Отправляем запрос на создание контейнера для изображения\n    const response = await $http.post(\n      `https://graph.facebook.com/${apiVersion}/${instagramAccountId}/media`,\n      mediaData\n    );\n    \n    console.log(`Ответ API на создание контейнера ${i + 1}:`, JSON.stringify(response.data));\n    \n    if (response.data && response.data.id) {\n      containerIds.push(response.data.id);\n      console.log(`Контейнер для изображения ${i + 1} успешно создан, ID: ${response.data.id}`);\n    } else {\n      console.error(`Ошибка при создании контейнера для изображения ${i + 1}: ответ без ID`);\n    }\n    \n    // Добавляем задержку между запросами для избежания блокировки API\n    await delay(2000);\n    \n  } catch (error) {\n    console.error(`Ошибка при создании контейнера для изображения ${i + 1}:`, error.message);\n    if (error.response) {\n      console.error(`Детали ошибки:`, JSON.stringify(error.response.data));\n    }\n  }\n}\n\nconsole.log(`\\nСоздано ${containerIds.length} контейнеров из ${images.length} изображений`);\n\n// Проверка наличия созданных контейнеров\nif (containerIds.length === 0) {\n  console.error('ОШИБКА: Не удалось создать ни одного контейнера для изображений');\n  \n  // Возвращаем информацию об ошибке\n  return {\n    content_id: contentId,\n    campaign_id: campaignId,\n    social_platforms: JSON.stringify({\n      instagram: {\n        status: \"failed\",\n        error: \"Не удалось создать контейнеры для изображений\",\n        platform: \"instagram\",\n        updatedAt: new Date().toISOString()\n      }\n    })\n  };\n}\n\n// Задержка перед созданием контейнера карусели\nawait delay(3000);\n\n// Создание контейнера карусели\nlet carouselContainerId;\ntry {\n  console.log('\\nСоздание контейнера карусели...');\n  \n  // Формируем данные для создания контейнера карусели\n  const carouselData = {\n    media_type: 'CAROUSEL',\n    children: containerIds.join(','),\n    caption: message,\n    access_token: accessToken\n  };\n  \n  console.log('Отправка запроса на создание контейнера карусели...');\n  console.log('Данные запроса:', JSON.stringify(carouselData));\n  \n  // Отправляем запрос на создание контейнера карусели\n  const carouselResponse = await $http.post(\n    `https://graph.facebook.com/${apiVersion}/${instagramAccountId}/media`,\n    carouselData\n  );\n  \n  console.log('Ответ API на создание контейнера карусели:', JSON.stringify(carouselResponse.data));\n  \n  if (carouselResponse.data && carouselResponse.data.id) {\n    carouselContainerId = carouselResponse.data.id;\n    console.log('Контейнер карусели создан успешно, ID:', carouselContainerId);\n  } else {\n    throw new Error('Не удалось создать контейнер карусели: ответ без ID');\n  }\n} catch (error) {\n  console.error('Ошибка при создании контейнера карусели:', error.message);\n  if (error.response) {\n    console.error('Детали ошибки:', JSON.stringify(error.response.data));\n  }\n  \n  // Возвращаем информацию об ошибке\n  return {\n    content_id: contentId,\n    campaign_id: campaignId,\n    social_platforms: JSON.stringify({\n      instagram: {\n        status: \"failed\",\n        error: `Ошибка при создании контейнера карусели: ${error.message}`,\n        platform: \"instagram\",\n        updatedAt: new Date().toISOString()\n      }\n    })\n  };\n}\n\n// Задержка перед публикацией карусели\nawait delay(3000);\n\n// Публикация карусели\nlet publishResult;\ntry {\n  console.log('\\nПубликация карусели...');\n  \n  // Формируем данные для публикации карусели\n  const publishData = {\n    creation_id: carouselContainerId,\n    access_token: accessToken\n  };\n  \n  console.log('Отправка запроса на публикацию карусели...');\n  console.log('Данные запроса:', JSON.stringify(publishData));\n  \n  // Отправляем запрос на публикацию карусели\n  const publishResponse = await $http.post(\n    `https://graph.facebook.com/${apiVersion}/${instagramAccountId}/media_publish`,\n    publishData\n  );\n  \n  console.log('Ответ API на публикацию карусели:', JSON.stringify(publishResponse.data));\n  \n  publishResult = publishResponse.data;\n  \n  if (!publishResult || !publishResult.id) {\n    throw new Error('Не удалось опубликовать карусель: ответ без ID');\n  }\n  \n  console.log('Карусель опубликована успешно, ID:', publishResult.id);\n} catch (error) {\n  console.error('Ошибка при публикации карусели:', error.message);\n  if (error.response) {\n    console.error('Детали ошибки:', JSON.stringify(error.response.data));\n  }\n  \n  // Возвращаем информацию об ошибке\n  return {\n    content_id: contentId,\n    campaign_id: campaignId,\n    social_platforms: JSON.stringify({\n      instagram: {\n        status: \"failed\",\n        error: `Ошибка при публикации карусели: ${error.message}`,\n        platform: \"instagram\",\n        updatedAt: new Date().toISOString()\n      }\n    })\n  };\n}\n\n// Задержка перед получением permalink публикации\nawait delay(2000);\n\n// Получение permalink публикации\nlet permalink = '';\ntry {\n  console.log('\\nПолучение permalink публикации...');\n  \n  // Отправляем запрос на получение permalink публикации\n  const permalinkResponse = await $http.get(\n    `https://graph.facebook.com/${apiVersion}/${publishResult.id}?fields=permalink,shortcode&access_token=${accessToken}`\n  );\n  \n  console.log('Ответ API на получение permalink:', JSON.stringify(permalinkResponse.data));\n  \n  if (permalinkResponse.data && permalinkResponse.data.permalink) {\n    permalink = permalinkResponse.data.permalink;\n    console.log('Получен permalink:', permalink);\n  }\n} catch (error) {\n  console.log('Ошибка при получении permalink:', error.message);\n  // Продолжаем выполнение, даже если не удалось получить permalink\n}\n\n// Подготавливаем данные о социальных платформах\nlet socialPlatforms = {};\n\n// Получаем текущие данные о социальных платформах\nif ($node[\"Получение контента\"].json.social_platforms) {\n  try {\n    // Пытаемся распарсить JSON строку, если это строка\n    if (typeof $node[\"Получение контента\"].json.social_platforms === 'string') {\n      socialPlatforms = JSON.parse($node[\"Получение контента\"].json.social_platforms);\n    } else {\n      // Если это уже объект, просто копируем\n      socialPlatforms = { ...$node[\"Получение контента\"].json.social_platforms };\n    }\n  } catch (error) {\n    // В случае ошибки парсинга, начинаем с пустого объекта\n    socialPlatforms = {};\n  }\n}\n\n// Обновляем информацию о платформе Instagram для карусели\nsocialPlatforms.instagram = {\n  postId: publishResult.id,\n  status: \"published\",\n  postUrl: permalink,\n  platform: \"instagram\",\n  publishedAt: new Date().toISOString(),\n  isCarousel: true,\n  itemsCount: containerIds.length\n};\n\nconsole.log('\\nКарусель успешно опубликована. Возвращаем результат.');\nconsole.log(\"------- ЗАВЕРШЕНИЕ ПУБЛИКАЦИИ КАРУСЕЛИ В INSTAGRAM -------\");\n\n// Возвращаем информацию об успешной публикации\nreturn {\n  content_id: contentId,\n  campaign_id: campaignId,\n  social_platforms: JSON.stringify(socialPlatforms),\n  carouselInfo: {\n    containerIds: containerIds,\n    carouselContainerId: carouselContainerId,\n    publishedId: publishResult.id,\n    permalink: permalink\n  }\n};"
      },
      "id": "9bc1fc1d-1d6e-4e68-914f-72c3975a56fb",
      "name": "Публикация карусели",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1600,
        160
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": "public",
        "table": "campaign_content",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.content_id }}",
            "campaign_id": "={{ $json.campaign_id }}",
            "published_at": "={{ $now }}",
            "social_platforms": "={{ $json.social_platforms }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "campaign_id",
              "displayName": "campaign_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "social_platforms",
              "displayName": "social_platforms",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            },
            {
              "id": "published_at",
              "displayName": "published_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "e839aaa6-0579-4b45-802e-e8d579d293a9",
      "name": "Обновление статуса",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1400,
        160
      ],
      "credentials": {
        "postgres": {
          "id": "lO4gl1E2I2lsrRce",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "33a4796e-1b16-4ffe-9160-d99027f37788",
      "name": "Завершение",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -1200,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "return {\n  content_id: $json.contentId,\n  campaign_id: $json.campaignId,\n  social_platforms: JSON.stringify({\n    instagram: {\n      status: \"failed\",\n      error: \"Контент не найден или отсутствует изображение\",\n      platform: \"instagram\",\n      updatedAt: new Date().toISOString()\n    }\n  })\n};"
      },
      "id": "4f82476b-fdc7-4fd1-a4b9-fe249a5b712c",
      "name": "Ошибка контента",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1400,
        300
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Подготовка параметров",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Подготовка параметров": {
      "main": [
        [
          {
            "node": "Получение контента",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Получение контента": {
      "main": [
        [
          {
            "node": "Контент найден?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Контент найден?": {
      "main": [
        [
          {
            "node": "Получение настроек кампании",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ошибка контента",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Получение настроек кампании": {
      "main": [
        [
          {
            "node": "Подготовка данных для Instagram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Подготовка данных для Instagram": {
      "main": [
        [
          {
            "node": "Публикация карусели",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Публикация карусели": {
      "main": [
        [
          {
            "node": "Обновление статуса",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Обновление статуса": {
      "main": [
        [
          {
            "node": "Завершение",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ошибка контента": {
      "main": [
        [
          {
            "node": "Обновление статуса",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}