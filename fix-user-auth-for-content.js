#!/usr/bin/env node

/**
 * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */

import axios from 'axios';

const API_BASE = 'http://localhost:5000/api';
const CAMPAIGN_ID = '46868c44-c6a4-4bed-accf-9ad07bba790e';
const USER_ID = '53921f16-f51d-4591-80b9-8caa4fde4d13'; // –∏–∑ –ª–æ–≥–æ–≤

async function fixContentUserBinding() {
  const headers = {
    'Authorization': `Bearer ${process.env.DIRECTUS_TOKEN || ''}`,
    'Content-Type': 'application/json'
  };

  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–≤—è–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç
    const response = await axios.get(
      `${API_BASE}/campaign-content?campaignId=${CAMPAIGN_ID}&limit=20`,
      { headers }
    );

    if (!response.data?.data) {
      console.log('‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const nplannerContent = response.data.data.filter(item => 
      item.metadata?.source === 'nplanner_final_generator'
    );

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Nplanner: ${nplannerContent.length}`);

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    for (const item of nplannerContent) {
      console.log(`\nüîß –û–±–Ω–æ–≤–ª—è—é –∫–æ–Ω—Ç–µ–Ω—Ç: ${item.title}`);
      
      try {
        const updateData = {
          userId: USER_ID,
          user_id: USER_ID,
          metadata: {
            ...item.metadata,
            userId: USER_ID,
            fixedForUser: true,
            fixedAt: new Date().toISOString()
          }
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
        const updateResponse = await axios.put(
          `${API_BASE}/campaign-content/${item.id}`,
          updateData,
          { headers }
        );

        if (updateResponse.status === 200) {
          console.log(`   ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        } else {
          console.log(`   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${updateResponse.status}`);
        }

      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.response?.data || error.message}`);
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 300));
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const checkResponse = await axios.get(
      `${API_BASE}/campaign-content?campaignId=${CAMPAIGN_ID}&limit=10`,
      { 
        headers: {
          ...headers,
          'X-User-ID': USER_ID // –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        }
      }
    );

    if (checkResponse.data?.data) {
      const visibleContent = checkResponse.data.data.filter(item => 
        item.metadata?.source === 'nplanner_final_generator'
      );

      console.log(`‚úÖ –í–∏–¥–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${visibleContent.length}`);
      
      if (visibleContent.length > 0) {
        console.log('\nüìã –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:');
        visibleContent.forEach((item, index) => {
          console.log(`   ${index + 1}. ${item.title}`);
          console.log(`      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${item.userId || item.user_id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        });
      }
    }

    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.response?.data || error.message);
  }
}

fixContentUserBinding().catch(console.error);