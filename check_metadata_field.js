/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—è metadata –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ campaign_content
 */

import axios from 'axios';

async function authenticate() {
  try {
    const response = await axios.post('https://directus.roboflow.tech/auth/login', {
      email: process.env.DIRECTUS_ADMIN_EMAIL || 'admin@roboflow.tech',
      password: process.env.DIRECTUS_ADMIN_PASSWORD || 'roboflow2024!'
    });
    
    return response.data.data.access_token;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.response?.data || error.message);
    throw error;
  }
}

async function checkMetadataField(token) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—è—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏ campaign_content
    const response = await axios.get(
      'https://directus.roboflow.tech/fields/campaign_content',
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('–ü–æ–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ campaign_content:');
    response.data.data.forEach(field => {
      console.log(`- ${field.field} (${field.type})`);
      if (field.field === 'metadata') {
        console.log('  ‚úÖ –ü–æ–ª–µ metadata –Ω–∞–π–¥–µ–Ω–æ!');
        console.log('  –¢–∏–ø:', field.type);
        console.log('  –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:', field.meta?.interface);
        console.log('  –°–∫—Ä—ã—Ç–æ–µ:', field.meta?.hidden);
      }
    });

    const metadataField = response.data.data.find(field => field.field === 'metadata');
    if (metadataField) {
      console.log('\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ–ª—è metadata:');
      console.log(JSON.stringify(metadataField, null, 2));
    } else {
      console.log('\n‚ùå –ü–æ–ª–µ metadata –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
    }

    return metadataField;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—è metadata:', error.response?.data || error.message);
    throw error;
  }
}

async function testContentWithMetadata(token) {
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–ª–µ–º metadata
    const response = await axios.get(
      'https://directus.roboflow.tech/items/campaign_content?limit=5&fields=id,title,content_type,metadata',
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('\nüìÑ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–ª–µ–º metadata:');
    response.data.data.forEach(item => {
      console.log(`- ID: ${item.id}, –¢–∏–ø: ${item.content_type}, Metadata: ${item.metadata ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
    });

    return response.data.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error.response?.data || error.message);
    throw error;
  }
}

async function main() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è metadata –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ campaign_content...');
    
    const token = await authenticate();
    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n');
    
    await checkMetadataField(token);
    await testContentWithMetadata(token);
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();