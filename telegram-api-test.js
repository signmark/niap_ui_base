/**
 * API —Ç–µ—Å—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —á–µ—Ä–µ–∑ API
 * 
 * –ó–∞–ø—É—Å–∫: node telegram-api-test.js
 */

import axios from 'axios';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const config = {
  apiUrl: 'http://localhost:5000/api',
  auth: {
    email: process.env.DIRECTUS_EMAIL || 'lbrspb@gmail.com',
    password: process.env.DIRECTUS_PASSWORD || 'password'
  },
  testCases: [
    {
      name: '–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram API',
      expectedStatus: 200
    },
    {
      name: 'HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      content: '<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> –∏ <i>–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>',
      expectedStatus: 200
    },
    {
      name: '–°–ø–∏—Å–æ–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
      content: `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞:</b>
      
      ‚Ä¢ –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç
      ‚Ä¢ <b>–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç</b> —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      ‚Ä¢ –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Å <i>–∫—É—Ä—Å–∏–≤–æ–º</i>`,
      expectedStatus: 200
    },
    {
      name: '–°–ª–æ–∂–Ω—ã–π HTML —Å —ç–º–æ–¥–∑–∏',
      content: `üî• <b>–ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!</b> üî•
      
      –°–µ–≥–æ–¥–Ω—è –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ:
      
      ‚Ä¢ üçé –Ø–±–ª–æ–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π 20%
      ‚Ä¢ üçå –ë–∞–Ω–∞–Ω—ã - 2 –∫–≥ –ø–æ —Ü–µ–Ω–µ 1
      ‚Ä¢ üçì –°–≤–µ–∂–∞—è –∫–ª—É–±–Ω–∏–∫–∞
      
      üõí –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏!`,
      expectedStatus: 200
    }
  ]
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

/**
 * –í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞
 */
function printHeader() {
  console.log(`${colors.cyan}========== API –¢–ï–°–¢–´ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –í TELEGRAM ==========${colors.reset}`);
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 * @param {string} name –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
 * @param {boolean} success –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {object} response –û—Ç–≤–µ—Ç –æ—Ç API
 */
function printTestResult(name, success, response) {
  const statusText = success 
    ? `${colors.green}‚úì –ü–†–û–ô–î–ï–ù${colors.reset}` 
    : `${colors.red}‚úó –ü–†–û–í–ê–õ–ï–ù${colors.reset}`;
  
  console.log(`\n${colors.bright}=== –¢–µ—Å—Ç: ${name} ===${colors.reset}`);
  console.log(`–°—Ç–∞—Ç—É—Å: ${statusText}`);
  
  if (response) {
    if (response.data) {
      console.log(`\n${colors.blue}–û—Ç–≤–µ—Ç:${colors.reset}`);
      console.log(JSON.stringify(response.data, null, 2));
    } else if (response.error) {
      console.log(`\n${colors.red}–û—à–∏–±–∫–∞:${colors.reset}`);
      console.log(response.error.message || response.error);
    }
  }
  
  console.log('='.repeat(80));
}

/**
 * –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –≤ Directus API –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω
 * @returns {Promise<string>} –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function login() {
  try {
    console.log(`${colors.yellow}–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Directus API...${colors.reset}`);
    
    const directusUrl = process.env.DIRECTUS_URL || 'https://directus.nplanner.ru';
    const response = await axios.post(`${directusUrl}/auth/login`, {
      email: config.auth.email,
      password: config.auth.password
    });
    
    if (response.data && response.data.data && response.data.data.access_token) {
      console.log(`${colors.green}–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞${colors.reset}`);
      return response.data.data.access_token;
    } else {
      throw new Error('–û—Ç–≤–µ—Ç –æ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.error(`${colors.red}–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:${colors.reset}`, error.message);
    if (error.response) {
      console.log('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.log('–î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Directus API');
  }
}

/**
 * –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ API
 * @param {string} token –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {string} content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
async function publishToTelegram(token, content) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    const response = await axios.post(`${config.apiUrl}/test/telegram/html`, {
      html: content,
      // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chatId, —Ç.–∫. –æ–Ω–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    }, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });
    
    return {
      success: true,
      data: response.data
    };
  } catch (error) {
    return {
      success: false,
      error: error.response?.data || error
    };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ API —Ç–µ—Å—Ç—ã
 */
async function runTests() {
  printHeader();
  
  try {
    const token = await login();
    let passedTests = 0;
    
    console.log(`\n${colors.yellow}–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram...${colors.reset}`);
    
    for (const [index, testCase] of config.testCases.entries()) {
      console.log(`\n${colors.yellow}–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ ${index + 1}/${config.testCases.length}: ${testCase.name}${colors.reset}`);
      
      const result = await publishToTelegram(token, testCase.content);
      const success = result.success && (result.data?.success === true || result.data?.messageId);
      
      printTestResult(testCase.name, success, result);
      
      if (success) {
        passedTests++;
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ API
      if (index < config.testCases.length - 1) {
        console.log(`${colors.yellow}–ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...${colors.reset}`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`${colors.cyan}========== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==========${colors.reset}`);
    console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${config.testCases.length}`);
    console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
    console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${config.testCases.length - passedTests}`);
    
    if (passedTests === config.testCases.length) {
      console.log(`${colors.green}‚úì –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${colors.reset}`);
      return true;
    } else {
      console.log(`${colors.red}‚úó –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API.${colors.reset}`);
      return false;
    }
    
  } catch (error) {
    console.error(`${colors.red}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:${colors.reset}`, error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();