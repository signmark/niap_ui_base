/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML –≤ Telegram
 * 
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –º–µ—Ç–æ–¥–∞ publishToPlatform –≤ TelegramService,
 * –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É HTML –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π.
 * 
 * –ó–∞–ø—É—Å–∫: node telegram-html-format-test.js
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
require('dotenv').config();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const API_URL = process.env.APP_BASE_URL || 'http://localhost:3000';
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
  console.error('–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID');
  console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É');
  process.exit(1);
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
const LOG_FILE = 'telegram-html-format-test.log';
function log(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}`;
  console.log(logMessage);
  fs.appendFileSync(LOG_FILE, logMessage + '\n');
}

// –û—á–∏—â–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
fs.writeFileSync(LOG_FILE, '');

// –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å —Ä–∞–∑–Ω—ã–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const testCases = [
  {
    name: '–ü—Ä–æ—Å—Ç—ã–µ HTML-—Ç–µ–≥–∏',
    html: '<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> –∏ <i>–∫—É—Ä—Å–∏–≤</i> —Å <u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º</u>\n\n<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–ø–∏—Å–∫–∏:</b>\n‚Ä¢ –ü—É–Ω–∫—Ç 1\n‚Ä¢ –ü—É–Ω–∫—Ç 2 <i>—Å –∫—É—Ä—Å–∏–≤–æ–º</i>',
    expectedTags: ['<b>', '</b>', '<i>', '</i>', '<u>', '</u>'],
  },
  {
    name: '–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏',
    html: '<b>–ñ–∏—Ä–Ω—ã–π <i>–∏ –∫—É—Ä—Å–∏–≤–Ω—ã–π</i> —Ç–µ–∫—Å—Ç</b> —Å <u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º <b>–∏ –∂–∏—Ä–Ω—ã–º</b></u>',
    expectedTags: ['<b>', '</b>', '<i>', '</i>', '<u>', '</u>'],
  },
  {
    name: '–°—Å—ã–ª–∫–∏',
    html: '–¢–µ–∫—Å—Ç —Å–æ <a href="https://t.me/test">—Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª</a> –∏ <b>–∂–∏—Ä–Ω—ã–º</b> —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
    expectedTags: ['<a href=', '</a>', '<b>', '</b>'],
  },
  {
    name: '–≠–º–æ–¥–∑–∏ –∏ HTML',
    html: 'üéâ <b>–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ</b> —Å–æ–æ–±—â–µ–Ω–∏–µ —Å <i>—ç–º–æ–¥–∑–∏</i> üéÅ –∏ <u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º</u>!',
    expectedTags: ['<b>', '</b>', '<i>', '</i>', '<u>', '</u>'],
  },
  {
    name: '–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
    html: '<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n' + 
          '–ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å <i>–∫—É—Ä—Å–∏–≤–æ–º</i> –∏ <b>–∂–∏—Ä–Ω—ã–º</b> —Ç–µ–∫—Å—Ç–æ–º.\n\n' +
          '–í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å <u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º</u> –∏ <a href="https://t.me/test">—Å—Å—ã–ª–∫–æ–π</a>.\n\n' +
          '<b>–°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤:</b>\n' +
          '‚Ä¢ –ü—É–Ω–∫—Ç 1 —Å <i>–∫—É—Ä—Å–∏–≤–æ–º</i>\n' +
          '‚Ä¢ –ü—É–Ω–∫—Ç 2 —Å <b>–∂–∏—Ä–Ω—ã–º</b>\n' +
          '‚Ä¢ –ü—É–Ω–∫—Ç 3 —Å <u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º</u>\n\n' +
          '–ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å üéâ —ç–º–æ–¥–∑–∏ –∏ <b>–∂–∏—Ä–Ω—ã–º <i>–∫—É—Ä—Å–∏–≤–Ω—ã–º</i> —Ç–µ–∫—Å—Ç–æ–º</b>.',
    expectedTags: ['<b>', '</b>', '<i>', '</i>', '<u>', '</u>', '<a href=', '</a>'],
  }
];

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML-—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {Object} testCase –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π —Å HTML-—Ç–µ–∫—Å—Ç–æ–º
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function sendHtmlToTelegram(testCase) {
  try {
    const response = await axios.post(`${API_URL}/api/test/raw-html-telegram`, {
      text: testCase.html,
      token: TELEGRAM_BOT_TOKEN,
      chatId: TELEGRAM_CHAT_ID
    });

    return {
      success: true,
      messageId: response.data.message_id,
      messageUrl: response.data.message_url,
      data: response.data
    };
  } catch (error) {
    return {
      success: false,
      error: error.response ? error.response.data : error.message
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML-—Ç–µ–∫—Å—Ç–∞ –≤ Telegram
 * @param {Object} testCase –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
 * @param {Object} result –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
 * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
 */
function validateResult(testCase, result) {
  if (!result.success) {
    log(`–û–®–ò–ë–ö–ê [${testCase.name}]: ${JSON.stringify(result.error)}`);
    return false;
  }

  if (!result.messageId || !result.messageUrl) {
    log(`–û–®–ò–ë–ö–ê [${testCase.name}]: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç messageId –∏–ª–∏ messageUrl –≤ –æ—Ç–≤–µ—Ç–µ`);
    return false;
  }

  log(`–£–°–ü–ï–• [${testCase.name}]: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: ${result.messageId}, URL: ${result.messageUrl}`);
  return true;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è
 * @param {Object} testCase –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
async function runTest(testCase) {
  log(`\n–¢–ï–°–¢: ${testCase.name}`);
  log(`HTML: ${testCase.html.substring(0, 100)}${testCase.html.length > 100 ? '...' : ''}`);
  
  const result = await sendHtmlToTelegram(testCase);
  return validateResult(testCase, result);
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
 */
async function runAllTests() {
  log('=== –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram ===');
  log(`–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
  log(`API URL: ${API_URL}`);
  log(`Telegram Bot Token: ${TELEGRAM_BOT_TOKEN.substring(0, 10)}...`);
  log(`Telegram Chat ID: ${TELEGRAM_CHAT_ID}`);
  log('---------------------------------------------------');

  let passedTests = 0;
  let failedTests = 0;

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    const success = await runTest(testCase);
    
    if (success) {
      passedTests++;
    } else {
      failedTests++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
    if (i < testCases.length - 1) {
      log('–ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  log('\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===');
  log(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testCases.length}`);
  log(`–£—Å–ø–µ—à–Ω–æ: ${passedTests}`);
  log(`–û—à–∏–±–∫–∏: ${failedTests}`);
  log('================================');

  return {
    total: testCases.length,
    passed: passedTests,
    failed: failedTests
  };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
runAllTests()
  .then(results => {
    if (results.failed > 0) {
      log(`–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏: ${results.failed} –∏–∑ ${results.total}`);
      process.exit(1);
    } else {
      log('–í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
      process.exit(0);
    }
  })
  .catch(error => {
    log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${error.message}`);
    process.exit(1);
  });