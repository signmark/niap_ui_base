/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –¥–ª—è Telegram
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
 * 
 * –ó–∞–ø—É—Å–∫: node telegram-format-advanced-test.js
 */

import dotenv from 'dotenv';
import axios from 'axios';
import { colors } from './server/utils/colors.js';

dotenv.config();

// –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

/**
 * –í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞
 * @param {string} title –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
 */
function printHeader(title) {
  console.log(`\n${colors.blue}======== ${title} ========${colors.reset}`);
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
 * @param {string} name –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
 * @param {boolean} success –£—Å–ø–µ—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
 * @param {object} result –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
function printResult(name, success, result) {
  console.log(`\n${colors.blue}=== –¢–µ—Å—Ç: ${name} ===${colors.reset}`);
  console.log(`–°—Ç–∞—Ç—É—Å: ${success ? colors.green + '‚úì –ü–†–û–ô–î–ï–ù' : colors.red + '‚úó –ü–†–û–í–ê–õ–ï–ù'}${colors.reset}`);
  console.log(`\n–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:`);
  if (result.ok) {
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ID: ${result.result.message_id}`);
    console.log(`–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.result.text || '(—Å–ª–æ–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)'}`);
  } else {
    console.log(`${colors.red}–û—à–∏–±–∫–∞:${colors.reset} ${result.description || JSON.stringify(result)}`);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç HTML –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Telegram
 * @param {string} html –ò—Å—Ö–æ–¥–Ω—ã–π HTML
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML –¥–ª—è Telegram
 */
function formatHtmlForTelegram(html) {
  if (!html) return '';
  
  let result = html;
  
  // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  const unsupportedBlockTags = ['ul', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'font'];
  for (const tag of unsupportedBlockTags) {
    // –£–¥–∞–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏, –æ—Å—Ç–∞–≤–ª—è—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    result = result.replace(new RegExp(`<${tag}[^>]*>`, 'gi'), '');
    result = result.replace(new RegExp(`</${tag}>`, 'gi'), '');
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  result = result.replace(/<p[^>]*>(.*?)<\/p>/gi, '$1\n');
  result = result.replace(/<div[^>]*>(.*?)<\/div>/gi, '$1\n');
  result = result.replace(/<blockquote[^>]*>(.*?)<\/blockquote>/gi, '$1\n');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
  result = result.replace(/<li[^>]*>(.*?)<\/li>/gi, '‚Ä¢ $1\n');
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
  const allowedTags = ['b', 'strong', 'i', 'em', 'u', 's', 'strike', 'code', 'pre', 'a'];
  const stack = [];
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–≥–∏
  result = result.replace(/<\/?([a-z][a-z0-9]*)\b[^>]*>/gi, (match, tagName) => {
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤
    if (tagName.toLowerCase() === 'strong') tagName = 'b';
    if (tagName.toLowerCase() === 'em') tagName = 'i';
    if (tagName.toLowerCase() === 'strike') tagName = 's';
    
    // –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if (!allowedTags.includes(tagName.toLowerCase())) {
      return '';
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
    if (match.startsWith('</')) {
      if (stack.length > 0 && stack[stack.length - 1] === tagName.toLowerCase()) {
        stack.pop(); // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–µ–∫–∞
        return match; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
      }
      return ''; // –£–¥–∞–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
    } 
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
    else {
      // –ï—Å–ª–∏ —Ç–µ–≥ a, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ href
      if (tagName.toLowerCase() === 'a') {
        const hrefMatch = match.match(/href=["']([^"']*)["']/i);
        if (hrefMatch) {
          stack.push('a');
          return `<a href="${hrefMatch[1]}">`;
        }
        return ''; // –ï—Å–ª–∏ –Ω–µ—Ç href, —É–¥–∞–ª—è–µ–º —Ç–µ–≥
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ç–µ–≥–∞
      stack.push(tagName.toLowerCase());
      return `<${tagName.toLowerCase()}>`;
    }
  });
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
  while (stack.length > 0) {
    const tag = stack.pop();
    result += `</${tag}>`;
  }
  
  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
  result = result.replace(/\n{3,}/g, '\n\n');
  
  return result.trim();
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {string} html HTML-—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendHtmlMessage(html) {
  try {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º HTML –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const formattedHtml = formatHtmlForTelegram(html);
    console.log(`${colors.yellow}–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç:${colors.reset} ${formattedHtml}`);
    
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    const response = await axios.post(url, {
      chat_id: TELEGRAM_CHAT_ID,
      text: formattedHtml,
      parse_mode: 'HTML'
    });
    return response.data;
  } catch (error) {
    console.error(`${colors.red}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:${colors.reset}`, error.response?.data || error.message);
    return error.response?.data || { ok: false, description: error.message };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Telegram
 */
async function testNestedFormatting() {
  const html = `<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>

<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å <i>–∫—É—Ä—Å–∏–≤–æ–º –≤–Ω—É—Ç—Ä–∏</i> –∏ —Å–Ω–æ–≤–∞ –∂–∏—Ä–Ω—ã–π</b>
<i>–ö—É—Ä—Å–∏–≤ —Å <b>–∂–∏—Ä–Ω—ã–º –≤–Ω—É—Ç—Ä–∏</b> –∏ —Å–Ω–æ–≤–∞ –∫—É—Ä—Å–∏–≤</i>
<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Å <b>–∂–∏—Ä–Ω—ã–º</b> –∏ <i>–∫—É—Ä—Å–∏–≤–æ–º</i> –≤–Ω—É—Ç—Ä–∏</u>
<b><i><u>–í—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–∑—É</u></i></b>`;

  const result = await sendHtmlMessage(html);
  printResult('–í–ª–æ–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', result.ok === true, result);
  return result.ok === true;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ Telegram
 */
async function testComplexLists() {
  const html = `<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤</b>

<ul>
  <li><b>–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç —Å –∂–∏—Ä–Ω—ã–º</b></li>
  <li><i>–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç —Å –∫—É—Ä—Å–∏–≤–æ–º</i></li>
  <li><u>–¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º</u></li>
  <li><b>–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –ø—É–Ω–∫—Ç</b> —Å <i>—Ä–∞–∑–ª–∏—á–Ω—ã–º</i> <u>—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</u></li>
</ul>

<ol>
  <li>–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º</li>
  <li>–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞</li>
</ol>`;

  const result = await sendHtmlMessage(html);
  printResult('–°–ª–æ–∂–Ω—ã–µ —Å–ø–∏—Å–∫–∏', result.ok === true, result);
  return result.ok === true;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –±–ª–æ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ Telegram
 */
async function testBlockElements() {
  const html = `<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤</b>

<p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ 1 —Å <b>–∂–∏—Ä–Ω—ã–º</b> —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.</p>
<p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ 2 —Å <i>–∫—É—Ä—Å–∏–≤–Ω—ã–º</i> —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.</p>

<div>–ë–ª–æ–∫ 1 –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>
<div>–ë–ª–æ–∫ 2 —Å <b>–∂–∏—Ä–Ω—ã–º</b> —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</div>

<blockquote>–¶–∏—Ç–∞—Ç–∞ —Å <i>–∫—É—Ä—Å–∏–≤–æ–º</i> –∏ <u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º</u></blockquote>

<pre>–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏    –ø—Ä–æ–±–µ–ª–æ–≤
</pre>`;

  const result = await sendHtmlMessage(html);
  printResult('–ë–ª–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã', result.ok === true, result);
  return result.ok === true;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ Telegram
 */
async function testLinksAndSymbols() {
  const html = `<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤</b>

üîó <a href="https://example.com">–û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞</a>
üåê <a href="https://telegram.org">–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram</a>

‚ö†Ô∏è –°–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è: üëç üéâ ‚≠ê üí°
‚úì –£—Å–ø–µ—Ö! ‚úó –û—à–∏–±–∫–∞! ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!`;

  const result = await sendHtmlMessage(html);
  printResult('–°—Å—ã–ª–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã', result.ok === true, result);
  return result.ok === true;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤
 */
async function testUnclosedTags() {
  const html = `<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤

<b>–≠—Ç–æ—Ç —Ç–µ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<i>–≠—Ç–æ—Ç –∫—É—Ä—Å–∏–≤ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç

<b>–í–ª–æ–∂–µ–Ω–Ω—ã–µ <i>–Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ</i> —Ç–µ–≥–∏

<a href="https://example.com">–ù–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å—Å—ã–ª–∫–∞

–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è`;

  const result = await sendHtmlMessage(html);
  printResult('–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏', result.ok === true, result);
  return result.ok === true;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤ –≤ Telegram
 */
async function testUnsupportedTags() {
  const html = `<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤</b>

<h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫ H1</h1>
<h2>–ó–∞–≥–æ–ª–æ–≤–æ–∫ H2</h2>
<span style="color: red;">–¢–µ–∫—Å—Ç —Å —Ü–≤–µ—Ç–æ–º</span>
<font color="blue">–¶–≤–µ—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç</font>

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è:</b>
<i>–ö—É—Ä—Å–∏–≤</i> –∏ <u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ</u>`;

  const result = await sendHtmlMessage(html);
  printResult('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏', result.ok === true, result);
  return result.ok === true;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç—Å–∫–µ–π–ø–∏–Ω–≥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ Telegram
 */
async function testEscaping() {
  const html = `<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Å–∫–µ–π–ø–∏–Ω–≥–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤</b>

–°–∏–º–≤–æ–ª—ã &lt; –∏ &gt; –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ < –∏ >
–°–∏–º–≤–æ–ª &amp; –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ &

–ö–æ–¥ HTML: &lt;b&gt;—Ç–µ–∫—Å—Ç&lt;/b&gt;`;

  const result = await sendHtmlMessage(html);
  printResult('–≠—Å–∫–µ–π–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤', result.ok === true, result);
  return result.ok === true;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
 */
async function runAllTests() {
  printHeader('–ü–†–û–î–í–ò–ù–£–¢–´–ï –¢–ï–°–¢–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø HTML –î–õ–Ø TELEGRAM');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ chat ID
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.log(`${colors.red}–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è${colors.reset}`);
    console.log(`TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    return false;
  }
  
  try {
    console.log(`${colors.yellow}–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...${colors.reset}`);
    
    let success = true;
    
    // –¢–µ—Å—Ç 1: –í–ª–æ–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const test1 = await testNestedFormatting();
    success = success && test1;
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    const test2 = await testComplexLists();
    success = success && test2;
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –¢–µ—Å—Ç 3: –ë–ª–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const test3 = await testBlockElements();
    success = success && test3;
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –¢–µ—Å—Ç 4: –°—Å—ã–ª–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const test4 = await testLinksAndSymbols();
    success = success && test4;
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –¢–µ—Å—Ç 5: –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
    const test5 = await testUnclosedTags();
    success = success && test5;
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –¢–µ—Å—Ç 6: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏
    const test6 = await testUnsupportedTags();
    success = success && test6;
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –¢–µ—Å—Ç 7: –≠—Å–∫–µ–π–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤
    const test7 = await testEscaping();
    success = success && test7;
    
    // –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    printHeader('–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    
    if (success) {
      console.log(`${colors.green}‚úì –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã${colors.reset}`);
    } else {
      console.log(`${colors.red}‚úó –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã${colors.reset}`);
    }
    
    return success;
  } catch (error) {
    console.error(`${colors.red}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:${colors.reset}`, error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runAllTests();