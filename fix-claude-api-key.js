/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Claude API –∫–ª—é—á–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á –∏–∑ Directus Global API Keys –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–≥–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */

import axios from 'axios';

async function setupClaudeApiKey() {
  try {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Claude API –∫–ª—é—á–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç –∏ endpoint
    const loginResponse = await axios.post('http://localhost:3000/api/auth/login', {
      email: 'lbrspb@gmail.com',
      password: 'lbrspb2024'
    });
    
    const token = loginResponse.data.token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–∞');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π
    const keysResponse = await axios.get('http://localhost:5000/api/global-api-keys', {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${keysResponse.data.length} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π`);
    
    // –ò—â–µ–º Claude –∫–ª—é—á
    const claudeKey = keysResponse.data.find(key => 
      key.service_name === 'claude' && key.is_active
    );
    
    if (!claudeKey) {
      console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π Claude –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:', keysResponse.data.map(k => k.service_name));
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π Claude –∫–ª—é—á: ${claudeKey.api_key.substring(0, 8)}...`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Claude API –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É—é
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude API –∫–ª—é—á–∞...');
    
    const testResponse = await axios.post('http://localhost:5000/api/claude/test-api-key', {
      apiKey: claudeKey.api_key
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    if (testResponse.data.success && testResponse.data.isValid) {
      console.log('‚úÖ Claude API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      
      // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
      console.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...');
      
      const improveResponse = await axios.post('http://localhost:5000/api/claude/improve-text', {
        text: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è.',
        prompt: '–°–¥–µ–ª–∞–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º',
        model: 'claude-3-sonnet-20240229'
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (improveResponse.data.success) {
        console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        console.log('üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:', improveResponse.data.text.substring(0, 100) + '...');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:', improveResponse.data.error);
      }
      
    } else {
      console.log('‚ùå Claude API –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', testResponse.data.error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Claude API:', error.response?.data || error.message);
    
    if (error.response?.status === 500) {
      console.log('üí° –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–µ—Ä–≤–µ—Ä–∞');
      console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupClaudeApiKey();