#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Instagram –≤–∏–¥–µ–æ
 */

import http from 'http';

const API_BASE = 'http://localhost:5000';

async function testProxyHeaders(videoId) {
  return new Promise((resolve) => {
    const url = `${API_BASE}/api/instagram-video-proxy/${videoId}`;
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏: ${url}`);
    
    const req = http.request(url, { method: 'HEAD' }, (res) => {
      console.log(`üìä HTTP Status: ${res.statusCode}`);
      console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏:`);
      
      const headers = res.headers;
      
      // –ö–ª—é—á–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Instagram
      const contentType = headers['content-type'];
      const acceptRanges = headers['accept-ranges'];
      const contentLength = headers['content-length'];
      const cacheControl = headers['cache-control'];
      
      console.log(`  Content-Type: ${contentType || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      console.log(`  Accept-Ranges: ${acceptRanges || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      console.log(`  Content-Length: ${contentLength || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      console.log(`  Cache-Control: ${cacheControl || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Instagram —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
      let issues = [];
      
      if (!contentType || !contentType.startsWith('video/')) {
        issues.push('‚ùå Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å video/mp4');
      } else {
        console.log('‚úÖ Content-Type –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
      }
      
      if (acceptRanges !== 'bytes') {
        issues.push('‚ùå Accept-Ranges –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "bytes"');
      } else {
        console.log('‚úÖ Accept-Ranges: bytes –Ω–∞–π–¥–µ–Ω (–í–ê–ñ–ù–û –¥–ª—è Instagram)');
      }
      
      if (issues.length > 0) {
        console.log('\nüö´ –ü–†–û–ë–õ–ï–ú–´:');
        issues.forEach(issue => console.log(`  ${issue}`));
      } else {
        console.log('\nüéâ –ü–†–û–ö–°–ò –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–í–ú–ï–°–¢–ò–ú –° INSTAGRAM!');
      }
      
      resolve({ 
        success: res.statusCode === 200 || res.statusCode === 404, 
        headers, 
        issues, 
        isInstagramCompatible: issues.length === 0 && res.statusCode === 200
      });
    });
    
    req.on('error', (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      resolve({ success: false, error: error.message });
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      console.error('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞');
      resolve({ success: false, error: 'Timeout' });
    });
    
    req.end();
  });
}

async function testRangeRequest(videoId) {
  return new Promise((resolve) => {
    const url = `${API_BASE}/api/instagram-video-proxy/${videoId}`;
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Range –∑–∞–ø—Ä–æ—Å: ${url}`);
    
    const options = {
      method: 'GET',
      headers: {
        'Range': 'bytes=0-1023'  // –ü–µ—Ä–≤—ã–µ 1KB
      }
    };
    
    const req = http.request(url, options, (res) => {
      console.log(`üìä HTTP Status: ${res.statusCode}`);
      
      if (res.statusCode === 206) {
        console.log('‚úÖ Partial Content (206) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        console.log(`üìã Content-Range: ${res.headers['content-range'] || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
        console.log('üéâ RANGE –ó–ê–ü–†–û–°–´ –†–ê–ë–û–¢–ê–Æ–¢ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Instagram)');
      } else {
        console.log('‚ùå Partial Content (206) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        console.log(`   –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å: ${res.statusCode}`);
      }
      
      resolve({ 
        success: res.statusCode === 206,
        statusCode: res.statusCode,
        contentRange: res.headers['content-range']
      });
    });
    
    req.on('error', (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ Range –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      resolve({ success: false, error: error.message });
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      resolve({ success: false, error: 'Timeout' });
    });
    
    req.end();
  });
}

async function main() {
  console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï INSTAGRAM VIDEO PROXY');
  console.log('=' .repeat(50));
  
  const testVideoIds = [
    'test.mp4',
    'example.mp4',
    'ig_stories_converted_123.mp4'
  ];
  
  for (const videoId of testVideoIds) {
    console.log(`\nüìπ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ ID: ${videoId}`);
    console.log('-'.repeat(40));
    
    // –¢–µ—Å—Ç 1: HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headResult = await testProxyHeaders(videoId);
    
    // –¢–µ—Å—Ç 2: Range –∑–∞–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ HEAD –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ)
    if (headResult.success && headResult.isInstagramCompatible) {
      await testRangeRequest(videoId);
    }
    
    console.log('');
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('üìù –ò–¢–û–ì: –ï—Å–ª–∏ –≤–∏–¥–∏—à—å "‚úÖ Accept-Ranges: bytes" –∏ "‚úÖ Partial Content (206)"');
  console.log('—Ç–æ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ Instagram –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∏–¥–µ–æ!');
}

main().catch(console.error);