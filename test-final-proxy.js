#!/usr/bin/env node

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
 */

import http from 'http';

async function testProxyFinal() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∑–Ω–∞–µ–º —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const videoId = 'instagram_test_1755686860211.mp4';
  const proxyUrl = `http://localhost:5000/api/instagram-video-proxy/${videoId}`;
  
  console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ö–°–ò');
  console.log('='.repeat(50));
  console.log(`üìπ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${videoId}`);
  console.log(`üîó –ü—Ä–æ–∫—Å–∏ URL: ${proxyUrl}`);
  
  return new Promise((resolve) => {
    const req = http.request(proxyUrl, { method: 'HEAD' }, (res) => {
      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:');
      console.log(`HTTP Status: ${res.statusCode}`);
      console.log(`Content-Type: ${res.headers['content-type'] || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      console.log(`Accept-Ranges: ${res.headers['accept-ranges'] || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      console.log(`Content-Length: ${res.headers['content-length'] || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      
      if (res.statusCode === 200 && res.headers['accept-ranges'] === 'bytes') {
        console.log('\nüéâ –ü–†–û–ö–°–ò –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!');
        console.log('‚úÖ Instagram –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç URL');
        console.log(`üì± –†–∞–±–æ—á–∏–π URL: ${proxyUrl}`);
      } else if (res.statusCode === 404) {
        console.log('\n‚ùì –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞');
        console.log('üí° –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–π –ø–∞–ø–∫–µ');
      } else {
        console.log('\n‚ùå –ü–†–û–ö–°–ò –ù–£–ñ–î–ê–ï–¢–°–Ø –í –ù–ê–°–¢–†–û–ô–ö–ï');
      }
      
      resolve(res.statusCode === 200);
    });
    
    req.on('error', (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      resolve(false);
    });
    
    req.end();
  });
}

async function testDirectS3() {
  console.log('\nüîç –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û S3:');
  console.log('-'.repeat(30));
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É
  const s3Url = 'https://6e679636ae90-ridiculous-seth.s3.ru1.storage.beget.cloud/test/instagram_test_1755686860211.mp4';
  
  return new Promise((resolve) => {
    const req = http.request(s3Url, { method: 'HEAD' }, (res) => {
      console.log(`S3 Status: ${res.statusCode}`);
      console.log(`S3 Content-Type: ${res.headers['content-type']}`);
      console.log(`S3 Accept-Ranges: ${res.headers['accept-ranges'] || '–ù–ï –ù–ê–ô–î–ï–ù'}`);
      
      if (res.headers['accept-ranges'] === 'bytes') {
        console.log('‚úÖ S3 –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢ Accept-Ranges: bytes');
        console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ S3, –∞ –≤ –ª–æ–≥–∏–∫–µ –ø—Ä–æ–∫—Å–∏');
      } else {
        console.log('‚ùå S3 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Accept-Ranges');
      }
      
      resolve(res.statusCode === 200);
    });
    
    req.on('error', () => resolve(false));
    req.end();
  });
}

async function main() {
  await testDirectS3();
  await testProxyFinal();
  
  console.log('\nüéØ –ò–¢–û–ì:');
  console.log('–ï—Å–ª–∏ S3 —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞ –ø—Ä–æ–∫—Å–∏ –Ω–µ—Ç - –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–∫—Å–∏');
  console.log('–ï—Å–ª–∏ –æ–±–∞ —Ä–∞–±–æ—Ç–∞—é—Ç - Instagram –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ URL');
}

main().catch(console.error);