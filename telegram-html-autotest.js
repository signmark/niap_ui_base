/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
 * –°–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ HTML-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ Telegram –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ó–∞–ø—É—Å–∫: node telegram-html-autotest.js
 */

const axios = require('axios');
const fs = require('fs/promises');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
const config = {
  // API URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  apiUrl: 'http://localhost:5000',
  // ID –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram)
  campaignId: '46868c44-c6a4-4bed-accf-9ad07bba790e',
  // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  resultPath: './telegram-html-test-results.json',
  // –ú–∞—Ä—à—Ä—É—Ç—ã API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  endpoints: {
    formatClientHtml: '/api/test/format-client-html',
    telegramEmojiHtml: '/api/test/telegram-emoji-html'
  }
};

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö HTML-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
const testCases = [
  {
    name: '–ë–∞–∑–æ–≤—ã–µ HTML-—Ç–µ–≥–∏',
    html: '<p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å <b>–∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º</b>, <i>–∫—É—Ä—Å–∏–≤–æ–º</i> –∏ <u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º</u>.</p>'
  },
  {
    name: '–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–µ HTML-—Ç–µ–≥–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <strong>–∂–∏—Ä–Ω—ã–º —á–µ—Ä–µ–∑ strong</strong>, <em>–∫—É—Ä—Å–∏–≤–æ–º —á–µ—Ä–µ–∑ em</em>, <ins>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ ins</ins> –∏ <del>–∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ del</del>.</p>'
  },
  {
    name: '–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <b>–∂–∏—Ä–Ω—ã–º <i>–∏ –∫—É—Ä—Å–∏–≤–Ω—ã–º</i></b> —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.</p>'
  },
  {
    name: 'HTML-—Å–ø–∏—Å–∫–∏',
    html: '<ul><li>–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç</li><li>–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç</li><li>–¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç</li></ul>'
  },
  {
    name: '–ó–∞–≥–æ–ª–æ–≤–∫–∏',
    html: '<h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è</h1><h2>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è</h2><h3>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è</h3>'
  },
  {
    name: '–°—Å—ã–ª–∫–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å–æ <a href="https://example.com">—Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç</a>.</p>'
  },
  {
    name: '–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å <b>–∂–∏—Ä–Ω—ã–º <i>–∏ –∫—É—Ä—Å–∏–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è b-—Ç–µ–≥–∞.</p>'
  },
  {
    name: '–≠–º–æ–¥–∑–∏',
    html: '<p>–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ üòÄ üëç üéâ</p>'
  },
  {
    name: '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å HTML –∏ —ç–º–æ–¥–∑–∏',
    html: '<p>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å <b>–∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º</b>, <i>–∫—É—Ä—Å–∏–≤–æ–º</i>, —ç–º–æ–¥–∑–∏ üéâ –∏ <a href="https://example.com">—Å—Å—ã–ª–∫–æ–π</a>.</p>'
  },
  {
    name: '–¢–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫',
    html: '<p>–ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ</p><p>–í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ</p><p>–¢—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ</p>'
  }
];

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
 * @param {string} html HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function formatClientHtml(html) {
  try {
    const response = await axios.post(`${config.apiUrl}${config.endpoints.formatClientHtml}`, { html });
    return response.data;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ HTML: ${error.message}`);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ Telegram —á–µ—Ä–µ–∑ API
 * @param {string} text –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendToTelegram(text) {
  try {
    const response = await axios.post(`${config.apiUrl}${config.endpoints.telegramEmojiHtml}`, {
      text,
      campaignId: config.campaignId
    });
    return response.data;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: ${error.message}`);
    return { success: false, error: error.message };
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram');
  console.log(`üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤: ${testCases.length}`);
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');

  const results = [];
  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`‚è≥ [${i + 1}/${testCases.length}] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${testCase.name}`);
    
    // 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π API
    console.log(`   üîÑ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML...`);
    const formatResult = await formatClientHtml(testCase.html);
    
    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ Telegram —á–µ—Ä–µ–∑ API
    console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...`);
    let sendResult;
    
    if (formatResult.success) {
      sendResult = await sendToTelegram(testCase.html);
    } else {
      sendResult = {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å HTML'
      };
    }
    
    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è
    const testResult = {
      testCase: testCase.name,
      originalHtml: testCase.html,
      formatResult,
      sendResult,
      status: sendResult.success ? 'SUCCESS' : 'FAILED',
      timestamp: new Date().toISOString()
    };
    
    results.push(testResult);
    
    // 4. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    console.log(`   ${sendResult.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}: ${sendResult.success ? '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : sendResult.error}`);
    if (sendResult.success && sendResult.message_url) {
      console.log(`   üîó URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${sendResult.message_url}`);
    }
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª
  await fs.writeFile(config.resultPath, JSON.stringify(results, null, 2));
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${config.resultPath}`);
  
  // –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const successCount = results.filter(r => r.status === 'SUCCESS').length;
  console.log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.length}, –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount}, –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${results.length - successCount}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runAllTests().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
});