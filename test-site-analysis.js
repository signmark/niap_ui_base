#!/usr/bin/env node

import axios from 'axios';

async function testSiteAnalysis() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞...');
  
  try {
    console.log('1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–∞–π—Ç–∞...');
    const response = await axios.get('https://nplanner.ru/', {
      timeout: 5000,
      maxContentLength: 1024 * 1024,
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; SiteAnalyzer/1.0)',
        'Accept': 'text/html'
      }
    });
    
    const htmlContent = response.data;
    console.log(`‚úÖ –°–∞–π—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${htmlContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    const title = htmlContent.match(/<title[^>]*>([^<]+)<\/title>/i)?.[1]?.trim() || '';
    const description = htmlContent.match(/<meta[^>]*name=["']description["'][^>]*content=["']([^"']+)["']/i)?.[1]?.trim() || '';
    
    console.log(`üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}`);
    console.log(`üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${description}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const content = [
      `URL: https://nplanner.ru/`,
      title ? `–ó–ê–ì–û–õ–û–í–û–ö: ${title}` : '',
      description ? `–û–ü–ò–°–ê–ù–ò–ï: ${description}` : '',
      `–ö–û–ù–¢–ï–ù–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n${htmlContent.substring(0, 8000)}`
    ].filter(Boolean).join('\n\n');
    
    console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    console.log('2. –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API...');
    
    const geminiApiKey = process.env.GEMINI_API_KEY;
    if (!geminiApiKey) {
      console.log('‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üîë API –∫–ª—é—á: ${geminiApiKey.substring(0, 10)}...`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º –º–æ–∂–µ–º –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏
    console.log('‚úÖ –°–∞–π—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º Gemini API –Ω–∞–ø—Ä—è–º—É—é...');
    
    // –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API –±–µ–∑ GeminiProxyService
    const testUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`;
    const requestBody = {
      contents: [{
        parts: [{
          text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–π—Ç nplanner.ru –∏ —Å–æ–∑–¥–∞–π 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ: [{"keyword": "—Å–ª–æ–≤–æ", "trend": 80, "competition": 50}]`
        }]
      }]
    };
    
    const geminiResponse = await axios.post(testUrl, requestBody, {
      headers: { 'Content-Type': 'application/json' },
      timeout: 30000
    });
    
    console.log('‚úÖ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Gemini API —É—Å–ø–µ—à–µ–Ω');
    const geminiText = geminiResponse.data?.candidates?.[0]?.content?.parts?.[0]?.text;
    console.log(`üìù –û—Ç–≤–µ—Ç: ${geminiText?.substring(0, 200)}...`);
    
    return;
    const geminiProxy = new GeminiProxyService({ apiKey: geminiApiKey });
    
    console.log('‚úÖ GeminiProxyService —Å–æ–∑–¥–∞–Ω');
    
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–π—Ç –∏ —Å–æ–∑–¥–∞–π 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
${content.substring(0, 1000)}

–†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [{"keyword": "—Å–ª–æ–≤–æ", "trend": 80, "competition": 50}]`;
    
    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini...');
    const result = await geminiProxy.generateText(prompt, 'gemini-2.5-flash');
    
    console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${result.substring(0, 200)}...`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('Stack:', error.stack);
  }
}

testSiteAnalysis();