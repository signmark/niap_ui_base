#!/usr/bin/env node

import axios from 'axios';
import { config } from 'dotenv';

config();

const DIRECTUS_URL = process.env.DIRECTUS_URL || 'https://directus.roboflow.space';
const ADMIN_EMAIL = process.env.DIRECTUS_ADMIN_EMAIL || 'admin@roboflow.space';
const ADMIN_PASSWORD = process.env.DIRECTUS_ADMIN_PASSWORD;

async function cleanDuplicateSources() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
    
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞
    const authResponse = await axios.post(`${DIRECTUS_URL}/auth/login`, {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD
    });
    
    if (!authResponse.data?.data?.access_token) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
    
    const adminToken = authResponse.data.data.access_token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–∞');
    
    const headers = {
      'Authorization': `Bearer ${adminToken}`,
      'Content-Type': 'application/json'
    };
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    const sourcesResponse = await axios.get(`${DIRECTUS_URL}/items/campaign_sources?limit=1000`, { headers });
    const sources = sourcesResponse.data.data || [];
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${sources.length}`);
    
    // 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const urlGroups = {};
    sources.forEach(source => {
      if (!urlGroups[source.url]) {
        urlGroups[source.url] = [];
      }
      urlGroups[source.url].push(source);
    });
    
    // 4. –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    const duplicateGroups = Object.entries(urlGroups).filter(([url, group]) => group.length > 1);
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –≥—Ä—É–ø–ø: ${duplicateGroups.length}`);
    
    if (duplicateGroups.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      return;
    }
    
    // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    duplicateGroups.forEach(([url, group]) => {
      console.log(`\nüìù URL: ${url}`);
      console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${group.length}`);
      group.forEach((source, index) => {
        console.log(`   ${index + 1}. ID: ${source.id}, Name: ${source.name}${index === 0 ? ' (–û–°–¢–ê–ï–¢–°–Ø)' : ' (—É–¥–∞–ª—è–µ—Ç—Å—è)'}`);
      });
    });
    
    // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã - –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏—Ö –Ω–∞ –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    console.log('\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
    
    for (const [url, group] of duplicateGroups) {
      const keepSource = group[0]; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
      const duplicateIds = group.slice(1).map(s => s.id); // ID –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
      for (const duplicateId of duplicateIds) {
        try {
          const trendsResponse = await axios.get(`${DIRECTUS_URL}/items/campaign_trends?filter[source_id][_eq]=${duplicateId}`, { headers });
          const trends = trendsResponse.data.data || [];
          
          console.log(`   –û–±–Ω–æ–≤–ª—è–µ–º ${trends.length} —Ç—Ä–µ–Ω–¥–æ–≤ —Å source_id ${duplicateId} ‚Üí ${keepSource.id}`);
          
          for (const trend of trends) {
            await axios.patch(`${DIRECTUS_URL}/items/campaign_trends/${trend.id}`, {
              source_id: keepSource.id
            }, { headers });
          }
        } catch (error) {
          console.warn(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${duplicateId}:`, error.message);
        }
      }
    }
    
    // 7. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    console.log('\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–∏...');
    
    for (const [url, group] of duplicateGroups) {
      const duplicateIds = group.slice(1).map(s => s.id);
      
      for (const duplicateId of duplicateIds) {
        try {
          await axios.delete(`${DIRECTUS_URL}/items/campaign_sources/${duplicateId}`, { headers });
          console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ ID: ${duplicateId}`);
        } catch (error) {
          console.warn(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${duplicateId}:`, error.message);
        }
      }
    }
    
    console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log(`üìä –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${duplicateGroups.reduce((sum, [url, group]) => sum + group.length - 1, 0)}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error.message);
    process.exit(1);
  }
}

cleanDuplicateSources();