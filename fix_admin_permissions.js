/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è lbrspb@gmail.com
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Administrator –≤ Directus
 */

async function fixAdminPermissions() {
  const DIRECTUS_URL = 'https://directus.roboflow.tech';
  
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è lbrspb@gmail.com...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
    const adminToken = process.env.DIRECTUS_TOKEN;
    if (!adminToken) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DIRECTUS_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã');
      process.exit(1);
    }
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
    const userResponse = await fetch(`${DIRECTUS_URL}/users?filter[email][_eq]=lbrspb@gmail.com`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!userResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userResponse.status}`);
    }
    
    const userData = await userResponse.json();
    console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(userData, null, 2));
    
    if (!userData.data || userData.data.length === 0) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å lbrspb@gmail.com –Ω–µ –Ω–∞–π–¥–µ–Ω');
      process.exit(1);
    }
    
    const user = userData.data[0];
    console.log(`üìß –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email} (ID: ${user.id})`);
    console.log(`üîñ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: ${user.role || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å Administrator
    console.log('üîç –ü–æ–∏—Å–∫ —Ä–æ–ª–∏ Administrator...');
    const rolesResponse = await fetch(`${DIRECTUS_URL}/roles?filter[name][_eq]=Administrator`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!rolesResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: ${rolesResponse.status}`);
    }
    
    const rolesData = await rolesResponse.json();
    console.log('üîê –î–∞–Ω–Ω—ã–µ —Ä–æ–ª–µ–π:', JSON.stringify(rolesData, null, 2));
    
    if (!rolesData.data || rolesData.data.length === 0) {
      console.error('‚ùå –†–æ–ª—å Administrator –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      process.exit(1);
    }
    
    const adminRole = rolesData.data[0];
    console.log(`üõ°Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Ä–æ–ª—å Administrator: ${adminRole.name} (ID: ${adminRole.id})`);
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('‚ö° –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    const updateResponse = await fetch(`${DIRECTUS_URL}/users/${user.id}`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        role: adminRole.id
      })
    });
    
    if (!updateResponse.ok) {
      const errorData = await updateResponse.json();
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${updateResponse.status} - ${JSON.stringify(errorData)}`);
    }
    
    const updatedUser = await updateResponse.json();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', JSON.stringify(updatedUser, null, 2));
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const verifyResponse = await fetch(`${DIRECTUS_URL}/users/${user.id}`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (verifyResponse.ok) {
      const verifyData = await verifyResponse.json();
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${verifyData.data.email} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ä–æ–ª—å: ${verifyData.data.role}`);
      console.log('üéâ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixAdminPermissions();