const axios = require('axios');

const testSiteContentExtraction = async () => {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤...\n');

  const extractFullSiteContent = async (url) => {
    try {
      console.log(`üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å ${url}...`);
      
      const response = await axios.get(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        },
        timeout: 8000,
        maxContentLength: 2 * 1024 * 1024, // 2MB
      });

      const html = response.data;
      console.log(`üìÑ –ü–æ–ª—É—á–µ–Ω HTML —Ä–∞–∑–º–µ—Ä–æ–º: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º title
      const titleMatch = html.match(/<title[^>]*>(.*?)<\/title>/i);
      const title = titleMatch ? titleMatch[1].trim() : '';

      // –ò–∑–≤–ª–µ–∫–∞–µ–º meta description
      const metaDescMatch = html.match(/<meta[^>]*name=["\']description["\'][^>]*content=["\']([^"\']*)["\'][^>]*>/i);
      const metaDescription = metaDescMatch ? metaDescMatch[1].trim() : '';

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ H1-H3
      const headingMatches = html.match(/<h[1-3][^>]*>(.*?)<\/h[1-3]>/gi) || [];
      const headings = [];
      for (let i = 0; i < Math.min(45, headingMatches.length); i++) {
        const heading = headingMatches[i].replace(/<[^>]*>/g, '').trim();
        if (heading) headings.push(heading);
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
      const paragraphMatches = html.match(/<p[^>]*>(.*?)<\/p>/gi) || [];
      const paragraphs = [];
      for (let i = 0; i < Math.min(30, paragraphMatches.length); i++) {
        const paragraph = paragraphMatches[i].replace(/<[^>]*>/g, '').trim();
        if (paragraph && paragraph.length > 20) paragraphs.push(paragraph);
      }

      // –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø - –∏—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ email
      console.log('üîç –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...');
      
      // –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
      const phoneRegex = /(?:\+7|8)[\s\-\(\)]?\d{1,4}[\s\-\(\)]?\d{1,4}[\s\-\(\)]?\d{2,4}[\s\-\(\)]?\d{2,4}/g;
      const phones = html.match(phoneRegex) || [];
      
      // Email –∞–¥—Ä–µ—Å–∞
      const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
      const emails = html.match(emailRegex) || [];
      
      // –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
      const contactSections = [];
      const contactRegex = /<[^>]*(?:class|id)=["\'][^"\']*(?:contact|–∫–æ–Ω—Ç–∞–∫—Ç)[^"\']*["\'][^>]*>(.*?)<\/[^>]*>/gi;
      const contactMatches = html.match(contactRegex) || [];
      
      console.log(`üìû –ù–∞–π–¥–µ–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: ${phones.length}`);
      console.log(`üìß –ù–∞–π–¥–µ–Ω–æ email: ${emails.length}`);
      console.log(`üè¢ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Å–µ–∫—Ü–∏–π: ${contactMatches.length}`);
      
      if (phones.length > 0) console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã:', phones);
      if (emails.length > 0) console.log('üìß Email:', emails);

      let extractedContent = '';
      
      if (title) extractedContent += `–ó–ê–ì–û–õ–û–í–û–ö: ${title}\n\n`;
      if (metaDescription) extractedContent += `–û–ü–ò–°–ê–ù–ò–ï: ${metaDescription}\n\n`;
      
      if (headings.length > 0) {
        extractedContent += `–ó–ê–ì–û–õ–û–í–ö–ò:\n${headings.join('\n')}\n\n`;
      }
      
      if (paragraphs.length > 0) {
        extractedContent += `–û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢:\n${paragraphs.join('\n\n')}\n\n`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∫–æ–Ω—Ç–µ–Ω—Ç
      if (phones.length > 0 || emails.length > 0) {
        extractedContent += `–ù–ê–ô–î–ï–ù–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´:\n`;
        if (phones.length > 0) extractedContent += `–¢–µ–ª–µ—Ñ–æ–Ω—ã: ${phones.join(', ')}\n`;
        if (emails.length > 0) extractedContent += `Email: ${emails.join(', ')}\n`;
        extractedContent += '\n';
      }

      if (contactMatches.length > 0) {
        extractedContent += `–ö–û–ù–¢–ê–ö–¢–ù–´–ï –†–ê–ó–î–ï–õ–´:\n${contactMatches.slice(0, 5).join('\n')}\n\n`;
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 15KB
      if (extractedContent.length > 15000) {
        extractedContent = extractedContent.substring(0, 15000) + '...';
      }

      console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${extractedContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`üîç –°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã: ${(phones.length > 0 || emails.length > 0) ? '–î–ê' : '–ù–ï–¢'}`);

      return extractedContent;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${url}:`, error.message);
      return '';
    }
  };

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∞–π—Ç–æ–≤
  const testSites = [
    'https://yandex.ru',
    'https://nplanner.ru'
  ];

  for (const site of testSites) {
    console.log(`\n${'='.repeat(60)}`);
    console.log(`üåê –¢–ï–°–¢–ò–†–£–ï–ú: ${site}`);
    console.log('='.repeat(60));
    
    const content = await extractFullSiteContent(site);
    
    if (content) {
      console.log('\nüìã –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ô –ö–û–ù–¢–ï–ù–¢ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):');
      console.log(content.substring(0, 1000) + (content.length > 1000 ? '...' : ''));
    } else {
      console.log('‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω');
    }
    
    console.log('\n‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...');
    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
};

testSiteContentExtraction().catch(console.error);