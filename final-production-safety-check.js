/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–ï–†–ï–î –ü–†–û–î–ê–ö–®–ï–ù–û–ú
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
 */

import fs from 'fs';
import path from 'path';

console.log('üî• –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–ï–†–ï–î –ü–†–û–î–ê–ö–®–ï–ù–û–ú üî•\n');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Singleton Pattern
function checkSingletonPattern() {
  console.log('1. ‚úÖ –ü–†–û–í–ï–†–ö–ê SINGLETON PATTERN');
  
  const schedulerFile = fs.readFileSync('server/services/publish-scheduler.ts', 'utf8');
  
  const checks = [
    {
      name: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞',
      pattern: /let globalSchedulerInstance/,
      found: schedulerFile.includes('let globalSchedulerInstance')
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞',
      pattern: /global.*publishSchedulerInstance/,
      found: schedulerFile.includes('publishSchedulerInstance')
    },
    {
      name: '–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞',
      pattern: /isSchedulerStarted/,
      found: schedulerFile.includes('isSchedulerStarted')
    },
    {
      name: '–≠–∫—Å–ø–æ—Ä—Ç singleton instance',
      pattern: /export const publishScheduler = startSchedulerOnce/,
      found: schedulerFile.includes('export const publishScheduler = startSchedulerOnce')
    }
  ];
  
  checks.forEach(check => {
    if (check.found) {
      console.log(`   ‚úÖ ${check.name}: –ù–ê–ô–î–ï–ù–û`);
    } else {
      console.log(`   ‚ùå ${check.name}: –ù–ï –ù–ê–ô–î–ï–ù–û`);
    }
  });
  
  return checks.every(check => check.found);
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
function checkProcessingLock() {
  console.log('\n2. ‚úÖ –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò');
  
  const schedulerFile = fs.readFileSync('server/services/publish-scheduler.ts', 'utf8');
  
  const checks = [
    {
      name: '–§–ª–∞–≥ isProcessing',
      found: schedulerFile.includes('private isProcessing = false')
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π',
      found: schedulerFile.includes('if (this.isProcessing)')
    },
    {
      name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
      found: schedulerFile.includes('this.isProcessing = true')
    },
    {
      name: '–°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ finally',
      found: schedulerFile.includes('this.isProcessing = false')
    }
  ];
  
  checks.forEach(check => {
    if (check.found) {
      console.log(`   ‚úÖ ${check.name}: –ù–ê–ô–î–ï–ù–û`);
    } else {
      console.log(`   ‚ùå ${check.name}: –ù–ï –ù–ê–ô–î–ï–ù–û`);
    }
  });
  
  return checks.every(check => check.found);
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
function checkDuplicateProtection() {
  console.log('\n3. ‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–©–ò–¢–´ –û–¢ –ü–û–í–¢–û–†–ù–û–ô –ü–£–ë–õ–ò–ö–ê–¶–ò–ò');
  
  const schedulerFile = fs.readFileSync('server/services/publish-scheduler.ts', 'utf8');
  
  const checks = [
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ published + postUrl',
      found: schedulerFile.includes('platformData?.status === \'published\' && platformData?.postUrl')
    },
    {
      name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
      found: schedulerFile.includes('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê')
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º',
      found: schedulerFile.includes('—É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞')
    },
    {
      name: '–ü—Ä–æ–ø—É—Å–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º',
      found: schedulerFile.includes('–ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
    }
  ];
  
  checks.forEach(check => {
    if (check.found) {
      console.log(`   ‚úÖ ${check.name}: –ù–ê–ô–î–ï–ù–û`);
    } else {
      console.log(`   ‚ùå ${check.name}: –ù–ï –ù–ê–ô–î–ï–ù–û`);
    }
  });
  
  return checks.every(check => check.found);
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
function checkPlatformDeletionFix() {
  console.log('\n4. ‚úÖ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ü–õ–ê–¢–§–û–†–ú');
  
  const routesFile = fs.readFileSync('server/api/publishing-routes.ts', 'utf8');
  
  const checks = [
    {
      name: '–ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º (–Ω–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)',
      found: routesFile.includes('–ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê –ü–õ–ê–¢–§–û–†–ú, –ê –ù–ï –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï')
    },
    {
      name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º',
      found: routesFile.includes('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ')
    },
    {
      name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
      found: routesFile.includes('–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï')
    },
    {
      name: '–≠–Ω–¥–ø–æ–∏–Ω—Ç direct-schedule —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
      found: routesFile.includes('/api/direct-schedule/:contentId')
    }
  ];
  
  checks.forEach(check => {
    if (check.found) {
      console.log(`   ‚úÖ ${check.name}: –ù–ê–ô–î–ï–ù–û`);
    } else {
      console.log(`   ‚ùå ${check.name}: –ù–ï –ù–ê–ô–î–ï–ù–û`);
    }
  });
  
  return checks.every(check => check.found);
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Publication Lock Manager
function checkLockManager() {
  console.log('\n5. ‚úÖ –ü–†–û–í–ï–†–ö–ê PUBLICATION LOCK MANAGER');
  
  try {
    const lockManagerFile = fs.readFileSync('server/services/publication-lock-manager.ts', 'utf8');
    
    const checks = [
      {
        name: '–ö–ª–∞—Å—Å PublicationLockManager',
        found: lockManagerFile.includes('class PublicationLockManager')
      },
      {
        name: '–ú–µ—Ç–æ–¥ acquireLock',
        found: lockManagerFile.includes('acquireLock')
      },
      {
        name: '–ú–µ—Ç–æ–¥ releaseLock',
        found: lockManagerFile.includes('releaseLock')
      },
      {
        name: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π serverId',
        found: lockManagerFile.includes('serverId')
      }
    ];
    
    checks.forEach(check => {
      if (check.found) {
        console.log(`   ‚úÖ ${check.name}: –ù–ê–ô–î–ï–ù–û`);
      } else {
        console.log(`   ‚ùå ${check.name}: –ù–ï –ù–ê–ô–î–ï–ù–û`);
      }
    });
    
    return checks.every(check => check.found);
  } catch (error) {
    console.log('   ‚ö†Ô∏è Publication Lock Manager —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
}

// 6. –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
function runAllChecks() {
  const results = {
    singleton: checkSingletonPattern(),
    processing: checkProcessingLock(),
    duplicate: checkDuplicateProtection(),
    deletion: checkPlatformDeletionFix(),
    lockManager: checkLockManager()
  };
  
  console.log('\nüî• –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò üî•');
  console.log('='.repeat(50));
  
  Object.entries(results).forEach(([key, passed]) => {
    const status = passed ? '‚úÖ –ü–†–û–ô–î–ï–ù–û' : '‚ùå –ü–†–û–í–ê–õ–ï–ù–û';
    const name = {
      singleton: 'Singleton Pattern',
      processing: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      duplicate: '–ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è',
      deletion: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º',
      lockManager: 'Lock Manager'
    }[key];
    
    console.log(`${status} - ${name}`);
  });
  
  const allPassed = Object.values(results).every(Boolean);
  
  console.log('\n' + '='.repeat(50));
  if (allPassed) {
    console.log('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£! üéâ');
    console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ');
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã');
  } else {
    console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –ù–ï –î–ï–ü–õ–û–ô–¢–ï –ù–ê –ü–†–û–î–ê–ö–®–ï–ù!');
    console.log('üö® –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
  }
  
  return allPassed;
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
runAllChecks();