Форматирование Chat ID

typescript
Copy
// Оригинальный код
let formattedChatId = chatId;
if (!chatId.startsWith('-100') && !isNaN(Number(chatId))) {
  formattedChatId = `-100${chatId}`;
}
Проблема: Если исходный chatId уже содержит -100, код добавит ещё один префикс, сделав ID невалидным

Решение: Добавить проверку на существующий префикс:

typescript
Copy
if (!chatId.startsWith('-100') && chatId.startsWith('-')) {
  formattedChatId = `-100${chatId.replace(/^-/, '')}`;
}
Обработка HTML-тегов

typescript
Copy
// В методе formatTextForTelegram
.replace(/<(?!\/?(b|strong|i|em|u|s|strike|code|pre|a)(?=>|\s.*>))\/?.*?>/gi, '')
Проблема: Регулярное выражение может некорректно обрабатывать теги с атрибутами

Решение: Упростить обработку тегов:

typescript
Copy
.replace(/<(\/?(?!b|strong|i|em|u|s|strike|code|pre|a\b)[^>]+)>/gi, '')
Отправка изображений

typescript
Copy
// В блоке отправки фото
const photoResponse = await axios.post(`${baseUrl}/sendPhoto`, {
  chat_id: formattedChatId,
  photo: processedContent.imageUrl,
  caption: imageCaption,
  parse_mode: 'HTML'
});
Проблема: Telegram требует загрузки файлов через multipart/form-data при использовании локальных путей

Решение: Добавить обработку URL и файлов:

typescript
Copy
const isUrl = /^https?:\/\//.test(processedContent.imageUrl);
const photo = isUrl 
  ? processedContent.imageUrl 
  : fs.createReadStream(processedContent.imageUrl);

const form = new FormData();
form.append('chat_id', formattedChatId);
form.append('photo', photo);
if (imageCaption) {
  form.append('caption', imageCaption);
  form.append('parse_mode', 'HTML');
}

const photoResponse = await axios.post(`${baseUrl}/sendPhoto`, form, {
  headers: form.getHeaders()
});
Ошибка определения типа контента

typescript
Copy
// В логике определения стратегии публикации
const hasImages = processedContent.imageUrl || 
  (processedContent.additionalImages && processedContent.additionalImages.length > 0);
Проблема: Не учитывается тип контента (видео, текст и т.д.)

Решение: Добавить проверку типа контента:

typescript
Copy
const isPhotoContent = content.contentType === 'photo' && hasImages;
const isVideoContent = content.contentType === 'video' && content.videoUrl;
Лимиты Telegram

Максимальное количество фото в альбоме: 10

Максимальная длина подписи: 1024 символа

Максимальная длина текста: 4096 символов

Рекомендации по исправлению:

Добавьте логирование промежуточных результатов:

typescript
Copy
console.log('Formatted chat ID:', formattedChatId);
console.log('Processed text:', processedText.substring(0, 300));
console.log('Image URLs:', processedContent.imageUrl, processedContent.additionalImages);
Проверьте ответы API Telegram:

typescript
Copy
try {
  const response = await axios.post(...);
  console.log('Telegram API Response:', response.data);
} catch (error) {
  console.error('Telegram API Error:', error.response?.data);
}
