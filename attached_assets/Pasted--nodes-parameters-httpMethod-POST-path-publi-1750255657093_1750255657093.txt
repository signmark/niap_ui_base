{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "publish-stories",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -880,
        60
      ],
      "id": "7f77f3c8-2384-4bf6-99b1-a4ddc2993dfb",
      "webhookId": "c62c3b6d-abf8-4c26-90a9-4d2e2ab10351"
    },
    {
      "parameters": {
        "jsCode": "const body = $input.item.json.body || $input.item.json;\nreturn {\n  contentId: body.contentId,\n  platform: body.platform || 'instagram',\n  storyData: body.metadata?.storyData || {},\n  hasInteractive: false\n};"
      },
      "name": "Extract Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -680,
        60
      ],
      "id": "49a0e0a5-e6fc-4805-a2a4-b8c68f9e9c53"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "campaign_content",
          "mode": "list",
          "cachedResultName": "campaign_content"
        },
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.contentId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -460,
        60
      ],
      "id": "27d0a721-18d1-4fc9-9e3c-ac6aab4666c4",
      "name": "Get Content",
      "credentials": {
        "postgres": {
          "id": "lO4gl1E2I2lsrRce",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из базы\nconst content = $input.all()[0].json;\nconst metadata = content.additional_media || {};\nconst storyData = metadata.storyData || {};\nconst slides = storyData.slides || [];\n\n// Проверяем интерактивные элементы\nconst hasInteractive = slides.some(slide => \n  slide.elements && slide.elements.some(element => \n    ['poll', 'quiz', 'slider', 'question'].includes(element.type)\n  )\n);\n\n// Получаем типы интерактивных элементов\nconst interactiveTypes = [];\nslides.forEach(slide => {\n  if (slide.elements) {\n    slide.elements.forEach(element => {\n      if (['poll', 'quiz', 'slider', 'question'].includes(element.type) && \n          !interactiveTypes.includes(element.type)) {\n        interactiveTypes.push(element.type);\n      }\n    });\n  }\n});\n\nreturn {\n  contentId: content.id,\n  title: content.title,\n  content: content.content,\n  contentType: content.content_type,\n  storyData: storyData,\n  slides: slides,\n  hasInteractive: hasInteractive,\n  interactiveTypes: interactiveTypes,\n  platforms: content.social_platforms || {},\n  status: content.status\n};"
      },
      "name": "Process Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -260,
        60
      ],
      "id": "44cd2a60-5bc3-47c4-814e-d3880eeb0501"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.contentType }}",
              "value2": "stories"
            }
          ]
        }
      },
      "name": "Is Stories?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -60,
        60
      ],
      "id": "bbbcb332-994c-4bf7-aaa9-bbf53de781be"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.hasInteractive }}"
            }
          ]
        }
      },
      "name": "Has Interactive?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        140,
        -40
      ],
      "id": "3e22d0e4-0c59-4246-8ba0-bf4c59a7098d"
    },
    {
      "parameters": {
        "jsCode": "// Обработка интерактивных Instagram Stories\nconst data = $input.all()[0].json;\n\n// Здесь должна быть логика публикации через instagrapi для интерактивности\n// Можно вызвать Python скрипт или API endpoint\n\nreturn {\n  success: true,\n  method: 'instagrapi',\n  message: `Instagram Stories с интерактивными элементами [${data.interactiveTypes.join(', ')}] обработано`,\n  contentId: data.contentId,\n  platform: 'instagram',\n  hasInteractive: true,\n  interactiveTypes: data.interactiveTypes\n};"
      },
      "name": "Publish Interactive Stories",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        340,
        -160
      ],
      "id": "c294857c-6ef5-4097-88ef-71de519876d4"
    },
    {
      "parameters": {
        "jsCode": "// Обработка обычных Instagram Stories\nconst data = $input.all()[0].json;\n\n// Здесь должна быть логика публикации через Graph API\n\nreturn {\n  success: true,\n  method: 'graph_api',\n  message: 'Instagram Stories без интерактивных элементов обработано',\n  contentId: data.contentId,\n  platform: 'instagram',\n  hasInteractive: false\n};"
      },
      "name": "Publish Static Stories",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        360,
        40
      ],
      "id": "16f37898-b7d3-43b2-ba1f-761ca824c783"
    },
    {
      "parameters": {
        "jsCode": "// Обработка других платформ (VK, Facebook, Telegram)\nconst data = $input.all()[0].json;\n\nreturn {\n  success: true,\n  method: 'other_platform',\n  message: 'Stories для других платформ обработано',\n  contentId: data.contentId,\n  platform: 'other'\n};"
      },
      "name": "Process Other Platforms",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        280,
        240
      ],
      "id": "523bdc05-5f1a-4c92-8040-7f1f8cc1a697"
    },
    {
      "parameters": {
        "jsCode": "// Ошибка: контент не является Stories\nreturn {\n  success: false,\n  error: 'Контент не является Stories типом',\n  contentType: $input.all()[0].json.contentType\n};"
      },
      "name": "Not Stories Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        180,
        400
      ],
      "id": "d7c930a7-1ba0-4777-adcb-229a9ba46222"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "campaign_content",
          "mode": "list"
        },
        "columns": {
          "values": [
            {
              "column": "status",
              "value": "published"
            },
            {
              "column": "published_at",
              "value": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        600,
        -40
      ],
      "id": "a7b3273e-f945-4278-b83a-5677f48354cb",
      "name": "Update Status",
      "credentials": {
        "postgres": {
          "id": "lO4gl1E2I2lsrRce",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        740,
        60
      ],
      "id": "da91f498-fe34-4e16-b46b-a4535f05f432"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Data": {
      "main": [
        [
          {
            "node": "Get Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Content": {
      "main": [
        [
          {
            "node": "Process Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Content": {
      "main": [
        [
          {
            "node": "Is Stories?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Stories?": {
      "main": [
        [
          {
            "node": "Has Interactive?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Not Stories Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Interactive?": {
      "main": [
        [
          {
            "node": "Publish Interactive Stories",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Publish Static Stories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Publish Interactive Stories": {
      "main": [
        [
          {
            "node": "Update Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Publish Static Stories": {
      "main": [
        [
          {
            "node": "Update Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Other Platforms": {
      "main": [
        [
          {
            "node": "Update Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Not Stories Error": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Status": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Webhook": [
      {
        "headers": {
          "host": "n8n.roboflow.tech",
          "user-agent": "curl/8.11.1",
          "content-length": "53",
          "accept": "*/*",
          "content-type": "application/json",
          "x-forwarded-for": "34.75.42.122",
          "x-forwarded-host": "n8n.roboflow.tech",
          "x-forwarded-port": "443",
          "x-forwarded-proto": "https",
          "x-forwarded-server": "f031e42c4283",
          "x-real-ip": "34.75.42.122",
          "accept-encoding": "gzip"
        },
        "params": {},
        "query": {},
        "body": {
          "contentId": "61bbf030-8287-4ec2-ad07-3a472812b0c3"
        },
        "webhookUrl": "https://n8n.roboflow.tech/webhook/publish-stories",
        "executionMode": "production"
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "48b343d4f21061cd3a73b34f5a2564ef792ed905f0d50c185e3671d2882f3122"
  }
}