{
  "name": "News Feed",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "=https://chatter.salebot.pro/api/{{ $('Webhook').first().json.body.api_key }}/callback",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "client_id",
              "value": "={{ $('Webhook').first().json.body.client_id }}"
            },
            {
              "name": "message",
              "value": "=n8n"
            },
            {
              "name": "response",
              "value": "={{ $json.choices[0].message.content }}"
            },
            {
              "name": "html_response",
              "value": "={{ $('HTTP Request').item.json.choices[0].message.content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "0cc2874b-a378-4dd9-b316-2ca0204d87ef",
      "name": "SendToSalebot",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3640,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "// Инициализируем пустой массив для хранения результатов\nconst results = [];\n\n// Проходим по всем элементам и добавляем их в массив\nfor (let i = 0; i < items.length; i++) {\n  const currentItem = items[i].json;\n  \n  // Проверяем, является ли элемент объектом\n  if (typeof currentItem === 'object' && currentItem !== null) {\n    results.push(currentItem);\n  }\n}\n\n// Возвращаем все элементы в одном массиве\nreturn [{ json: { results } }];\n"
      },
      "id": "0f699793-f3d1-43b4-99c9-f10605b0bd11",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2040,
        1220
      ]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "guid": "={{ $json.guid }}",
            "title": "={{ $json.title }}",
            "link": "={{ $json.link }}",
            "content": "={{ $json.description }}",
            "pubDate": "={{ $json.pubDate }}"
          },
          "matchingColumns": [
            "guid"
          ],
          "schema": [
            {
              "id": "guid",
              "displayName": "guid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "pubDate",
              "displayName": "pubDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "isoDate",
              "displayName": "isoDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "40782447-aadd-4685-964f-ce5feec46aa1",
      "name": "Postgres2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1840,
        1220
      ],
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": " https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer sk-xb1rClGVOkiugSDsGcgqctaopPe64SJSXTRq2yY8FAT3BlbkFJX561N8f6wIyeZAFIFUARwkMqi6TaFU4B5eyr_kp_YA"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"model\": \"gpt-4o-2024-08-06\",\n   \"messages\": [\n      {\n         \"role\": \"system\",\n         \"content\": \"Оцени, насколько статья соответствует одной или нескольким из перечисленных тематик: \\n1. Фахверковые дома, \\n2. Строительство фахверковых домов, \\n3. Современные фахверковые дома, \\n4. Технологии фахверковых построек, \\n5. Энергоэффективность в фахверковых домах.\\n6. Остекление: Панорамное остекление, \\n7. Энергоэффективные стеклопакеты, \\n8. Остекление фасадов, \\n9. Современные технологии остекления.\\nДополнительные темы: \\n10. Эко-архитектура, \\n11. Остекление деревянных домов, \\n12. Утепление и звукоизоляция окон, \\n13. Влияние остекления на микроклимат в доме.\\n\\nДля каждой статьи укажи самую релевантную тематику и оцени % соответствия тематике на основе содержания статьи. Оценку и тематику представь в формате JSON с переменными topic и correspondence.\"\n      },\n      {\n         \"role\": \"user\",\n         \"content\": {{ JSON.stringify($json.toJsonString()) }}\n      }\n   ],\n   \"temperature\": 0.8,\n   \"response_format\": {\n      \"type\": \"json_schema\",\n      \"json_schema\": {\n         \"name\": \"article_response\",\n         \"schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n               \"topic\": {\n                  \"type\": \"string\"\n               },\n               \"correspondence\": {\n                  \"type\": \"number\"\n               }\n            },\n            \"required\": [\n               \"topic\",\n               \"correspondence\"\n            ],\n            \"additionalProperties\": false\n         },\n         \"strict\": true\n      }\n   }\n}\n",
        "options": {}
      },
      "id": "ff46f8cf-c3ac-469a-8290-8bf5a7323a4e",
      "name": "Correspondence",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1120,
        1220
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из предыдущих нод\nconst newsData = $items(\"Parse News\").map(item => item.json) || [];\nconst topicData = $items(\"Topic-Correspondence\").map(item => item.json) || [];\n\n// Проверяем, что оба массива не пустые\nif (!Array.isArray(newsData) || newsData.length === 0) {\n    return [{ error: 'Slice 20 не вернул данные', newsData }];\n}\nif (!Array.isArray(topicData) || topicData.length === 0) {\n    return [{ error: 'Topic-Correspondence не вернул данные', topicData }];\n}\n\n// Объединяем данные по индексам\nconst minLength = Math.min(newsData.length, topicData.length);\n\nconst combinedData = newsData.slice(0, minLength).map((item, index) => {\n    const topic = topicData[index].topic;\n    const correspondence = topicData[index].correspondence;\n\n    // Добавляем тему и соответствие в скобках к заголовку\n    const updatedTitle = `${item.title} (${topic} - Соответствие: ${correspondence}%)`;\n\n    return {\n        ...item,\n        title: updatedTitle, // Обновляем заголовок\n        topic,               // Оставляем тему\n        correspondence       // Оставляем соответствие\n    };\n});\n\n// Возвращаем обновленные данные\nreturn combinedData;\n"
      },
      "id": "4991df5a-b055-4c49-ae58-09621518e054",
      "name": "Merge",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1640,
        1220
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "const allContent = []; // Массив для хранения всех разобранных объектов\n\nfor (const item of items) {\n    const inputData = item.json;\n\n    // Извлекаем контент (content) из каждого элемента и парсим как JSON\n    const content = JSON.parse(inputData.choices[0].message.content);\n\n    // Возвращаем один объект за раз\n    allContent.push({ json: content });\n}\n\n// Возвращаем результат как массив объектов\nreturn allContent;\n"
      },
      "id": "15934775-7a7f-4980-bc79-f9364fca5b54",
      "name": "Topic-Correspondence",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        1220
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer sk-xb1rClGVOkiugSDsGcgqctaopPe64SJSXTRq2yY8FAT3BlbkFJX561N8f6wIyeZAFIFUARwkMqi6TaFU4B5eyr_kp_YA"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"messages\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"Напиши последние 5 новостей: title и сокращенные content и вставь картинку новости, если она есть. Сделай в виде таблички. Оцени, насколько статья соответствует одной или нескольким из перечисленных тематик: \\n1. Фахверковые дома, \\n2. Строительство фахверковых домов, \\n3. Современные фахверковые дома, \\n4. Технологии фахверковых построек, \\n5. Энергоэффективность в фахверковых домах.\\n6. Остекление: Панорамное остекление, \\n7. Энергоэффективные стеклопакеты, \\n8. Остекление фасадов, \\n9. Современные технологии остекления.\\nДополнительные темы: \\n10. Эко-архитектура, \\n11. Остекление деревянных домов, \\n12. Утепление и звукоизоляция окон, \\n13. Влияние остекления на микроклимат в доме.\\n\\nДля каждой статьи укажи в скобках самую релевантную тематику с % сответсвия этой тематике, например <a href=\\\"news\\\">Название статьи</a> (<strong>Современные технологии остекления - 57%</strong>) <i>Краткое содержание статьи</i>. В начале напиши что это список новостей доступных для рерайта. Список новостей сделай нумерованным. Для форматирования используй HTML разметку. ВАЖНО: можно использовать только теги strong для жирного и i для рукописного. НЕЛЬЗЯ использовать теги ul, li, br (ВАЖНО: НИКОГДА НЕ ИСПОЛЬЗОВАТЬ), font, div, h2, h1, span  и т.п. Можно использовать только a, strong и i, никакие другие.\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": {{ JSON.stringify($json.combinedData.toJsonString()) }}\n      }\n    ]\n  }",
        "options": {}
      },
      "id": "c04dceb3-827c-4ed5-be72-6f1781591870",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2860,
        620
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM news\nWHERE \"pubDate\" IS NOT NULL\nORDER BY \"pubDate\" DESC\nLIMIT 5 OFFSET {{ $node[\"Webhook\"].data.body.page * 5 }};\n",
        "options": {}
      },
      "id": "fc4bb49b-e1f8-4d97-88fe-867bc3811a0c",
      "name": "Read DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        580,
        760
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из всех элементов\nconst items = $items();  // Получаем массив всех элементов\n\n// Создаем массив для объединенных данных\nlet combinedData = [];\n\n// Проходим по каждому элементу в массиве\nitems.forEach(item => {\n  // Добавляем каждый объект в общий массив\n  combinedData.push(item.json);\n});\n\n// Возвращаем объединенные данные\nreturn [\n  {\n    json: {\n      combinedData\n    }\n  }\n];\n"
      },
      "id": "05159f67-4182-41c0-9e76-2a2f00f0c93c",
      "name": "Collect data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        560
      ]
    },
    {
      "parameters": {
        "url": "https://n8n.api-ai.net/webhook/efc150bd-874c-4d3f-be29-462bbe9f9c9e",
        "options": {}
      },
      "id": "c9d02fef-8de8-4ffc-8dd1-f32af5a3020e",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        1220
      ]
    },
    {
      "parameters": {
        "jsCode": "const parser = require('xml2js').parseStringPromise;\n\n// Получаем содержимое data\nconst rssFeed = items[0].json.data;\n\n// Парсим XML\nreturn parser(rssFeed)\n  .then(result => {\n    // Путь к массиву новостей\n    const newsItems = result.rss.channel[0].item;\n\n    // Преобразуем каждую новость в нужный формат\n    const newsArray = newsItems.map(news => {\n      return {\n        title: news.title[0],\n        link: news.link[0],\n        guid: news.guid[0],\n        pubDate: news.pubDate[0],\n        description: news.description[0]\n      };\n    });\n\n    // Возвращаем результат\n    return newsArray.map(news => ({ json: news }));\n  })\n  .catch(error => {\n    throw new Error('Ошибка при парсинге XML: ' + error.message);\n  });\n"
      },
      "id": "9c415737-c366-48d6-b2ed-a6294de18ef1",
      "name": "Parse News",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        1220
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2e5c6fb0-448e-4001-89a0-ea918e56cefc",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c5f88f9e-f84e-49d9-bcff-d89f0d9cc511",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        980,
        760
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://chatter.salebot.pro/api/{{ $('Webhook').first().json.body.api_key }}/callback",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "client_id",
              "value": "={{ $('Webhook').first().json.body.client_id }}"
            },
            {
              "name": "message",
              "value": "=n8n"
            },
            {
              "name": "response",
              "value": "=Новостей больше нет"
            }
          ]
        },
        "options": {}
      },
      "id": "9c068370-63d3-4c8f-8de2-bc2a2a356b42",
      "name": "SendToSalebot1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1860,
        960
      ]
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "options": {}
      },
      "id": "4c8ae2f8-148d-448b-ac0a-190875cef26f",
      "name": "ClearDB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        340,
        340
      ],
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "options": {}
      },
      "id": "6ac007e0-3441-4ea0-a58f-6d7bd671a385",
      "name": "Select News",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        600,
        340
      ],
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "url": "http://88.218.171.139:5000/news",
        "options": {}
      },
      "id": "dde9b70f-cd8d-4bbb-a6ca-2b3c8677797f",
      "name": "https://larta.com/ru/news",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1320,
        320
      ]
    },
    {
      "parameters": {
        "jsCode": "const cheerio = require('cheerio');\n\nconst baseUrl = 'https://alutech.ru';\nconst newsUrl = baseUrl + '/novosti-i-akcii/';\n\n// Выполняем HTTP-запрос для получения страницы\nconst response = await this.helpers.request({\n    method: 'GET',\n    uri: newsUrl,\n});\n\n// Парсим HTML-ответ с помощью Cheerio\nconst $ = cheerio.load(response);\n\n// Функция для парсинга содержимого новости\nconst parseNewsContent = async (newsUrl) => {\n    const newsResponse = await this.helpers.request({\n        method: 'GET',\n        uri: newsUrl,\n    });\n    const $news = cheerio.load(newsResponse);\n\n    // Извлекаем текст новости из блока с классом 'content-area'\n    const contentBlock = $news('.content-area');\n    const contentText = contentBlock.text().trim();\n\n    // Извлекаем изображение из атрибута `src` или `srcset`\n    let newsImage = $news('.content-area img').attr('src');\n    \n    if (!newsImage || newsImage === '') {\n        const srcset = $news('.content-area img').attr('srcset');\n        if (srcset) {\n            // Извлекаем ссылки на изображения из srcset\n            const srcsetParts = srcset.split(', ');\n            \n            // Ищем JPG-изображение\n            const jpgImage = srcsetParts.find(part => part.includes('.jpg'));\n            newsImage = jpgImage ? jpgImage.split(' ')[0] : srcsetParts[0].split(' ')[0]; // Берём JPG или первое изображение\n        }\n    }\n\n    // Добавляем базовый URL к изображению, если оно найдено и является относительным\n    newsImage = newsImage && newsImage.startsWith('/upload') ? baseUrl + newsImage : newsImage;\n\n    return { content: contentText || 'Контент не найден', image: newsImage || null };\n};\n\n// Функция для преобразования даты в формат ISO 8601 (dateTime)\nconst formatDate = (dateString) => {\n    const months = {\n        'января': '01', 'февраля': '02', 'марта': '03', 'апреля': '04',\n        'мая': '05', 'июня': '06', 'июля': '07', 'августа': '08',\n        'сентября': '09', 'октября': '10', 'ноября': '11', 'декабря': '12'\n    };\n\n    // Преобразуем дату, заменяя русские месяцы на их числовое представление\n    const [day, month, year] = dateString.split(' ');\n    const formattedDate = `${year}-${months[month]}-${day.padStart(2, '0')}T00:00:00.000Z`;\n\n    return new Date(formattedDate).toISOString();\n};\n\n// Массив для хранения промисов, которые будут обрабатывать новости\nlet newsPromises = [];\n\n// Ищем все блоки с новостями\n$('.news__item').each((index, element) => {\n    const newsTitle = $(element).find('.news__title').text().trim();\n    \n    // Извлекаем ссылку на новость\n    const relativeLink = $(element).find('a').attr('href');\n    const newsLink = relativeLink ? baseUrl + relativeLink : null;\n\n    const newsDate = $(element).find('time').text().trim();\n\n    // Преобразуем дату в формат ISO 8601 (dateTime)\n    const formattedDate = formatDate(newsDate);\n\n    // Извлекаем картинку из атрибута `src` внутри основного блока\n    let newsImage = $(element).find('img').attr('src');\n    \n    // Если `src` отсутствует или имеет некорректное значение, пробуем извлечь из `srcset`\n    if (!newsImage || newsImage === \"\") {\n        const srcset = $(element).find('img').attr('srcset');\n        if (srcset) {\n            const srcsetParts = srcset.split(', ');\n\n            // Ищем JPG-изображение\n            const jpgImage = srcsetParts.find(part => part.includes('.jpg'));\n            newsImage = jpgImage ? jpgImage.split(' ')[0] : srcsetParts[0].split(' ')[0]; // Берём JPG или первое изображение\n        }\n    }\n\n    // Добавляем базовый URL к изображению, если оно найдено и является относительным\n    newsImage = newsImage && newsImage.startsWith('/upload') ? baseUrl + newsImage : newsImage;\n\n    // Обрабатываем каждую новость в асинхронной функции и добавляем промисы в массив\n    const newsPromise = parseNewsContent(newsLink).then((newsData) => {\n        return {\n            title: newsTitle,\n            link: newsLink,\n            date: formattedDate, // Преобразованная дата\n            image: newsImage || newsData.image,\n            content: newsData.content\n        };\n    });\n\n    newsPromises.push(newsPromise);\n});\n\n// Ожидаем завершения всех промисов\nconst newsList = await Promise.all(newsPromises);\n\n// Логируем результаты, чтобы убедиться, что они корректны\nconsole.log('Список новостей:', newsList);\n\n// Возвращаем список новостей с изображениями и контентом\nreturn newsList;\n"
      },
      "id": "2cf2988a-2b20-436e-8a6c-863f97fa09a0",
      "name": "https://alutech.ru/novosti-i-akcii/",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        120
      ]
    },
    {
      "parameters": {
        "content": "## Получение новостей и оценка соответствия тематике",
        "height": 418.54550893802764,
        "width": 2267.0342597949684,
        "color": 3
      },
      "id": "c3c14b80-68ea-4306-a7d8-648ba440384a",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        980,
        40
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "id": "7b3dd809-0ce3-4702-927a-f19ffb71f2eb",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        1020,
        220
      ]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "guid": "={{ $json.link }}",
            "title": "={{ $json.title }}",
            "link": "={{ $json.link }}",
            "content": "={{ $json.content }}",
            "pubDate": "={{ $json.date }}",
            "isoDate": "={{ $json.date }}",
            "image": "={{ $json.image }}"
          },
          "matchingColumns": [
            "guid"
          ],
          "schema": [
            {
              "id": "guid",
              "displayName": "guid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "pubDate",
              "displayName": "pubDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "isoDate",
              "displayName": "isoDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "image",
              "displayName": "image",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            }
          ]
        },
        "options": {}
      },
      "id": "89766127-f570-4309-afe3-ffa05e37c649",
      "name": "SaveToDB1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1560,
        320
      ],
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## DB manipulations",
        "height": 293.9546276184665,
        "width": 587.1500208703916,
        "color": 5
      },
      "id": "0d7457db-008d-4ae9-af53-3958b988f568",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        260,
        240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Список тегов, которые нужно сохранить\nconst allowedTags = ['a', 'i', 'strong'];\n\n// Список блоковых тегов, которые нужно заменить на перенос строки\nconst blockTags = ['table', 'tr', 'td', 'div'];\n\n// Функция для замены блоковых тегов на перенос строки\nfunction replaceBlockTagsWithNewline(html, blocks) {\n  blocks.forEach(tag => {\n    const regex = new RegExp(`<\\/?${tag}[^>]*>`, 'gi');\n    html = html.replace(regex, '\\n');\n  });\n  return html;\n}\n\n// Функция для удаления всех тегов, кроме разрешенных\nfunction removeUnwantedTags(html, allowed) {\n  return html.replace(/<\\/?(?!\\/?(?:a|i|strong)\\b)[^>]+>/gi, '');\n}\n\n// Функция для удаления лишних пробелов и переносов строк\nfunction cleanUpWhitespace(text) {\n  // Шаг 1: Заменяем переносы строк после нумерации на пробел\n  // Например, \"1.\\n \" заменяем на \"1. \"\n  text = text.replace(/(\\d+\\.\\s*)\\n\\s*/g, '$1 ');\n\n  // Шаг 2: Заменяем множественные переносы строк на один\n  text = text.replace(/(\\r\\n|\\n|\\r){2,}/g, '\\n');\n\n  // Шаг 3: Удаляем пробелы в начале и конце строк\n  text = text.split('\\n').map(line => line.trim()).join('\\n');\n\n  // Шаг 4: Удаляем лишние пробелы внутри текста\n  text = text.replace(/\\s{2,}/g, ' ');\n\n  return text;\n}\n\nreturn items.map(item => {\n  if (item.json.choices && Array.isArray(item.json.choices)) {\n    item.json.choices = item.json.choices.map(choice => {\n      if (choice.message && choice.message.content) {\n        let content = choice.message.content;\n\n        // Шаг 1: Заменяем блоковые теги на перенос строки\n        content = replaceBlockTagsWithNewline(content, blockTags);\n\n        // Шаг 2: Удаляем нежелательные теги, сохраняя разрешенные\n        content = removeUnwantedTags(content, allowedTags);\n\n        // Шаг 3: Удаляем лишние пробелы и переносы строк, а также переносы после нумерации\n        content = cleanUpWhitespace(content);\n\n        // Обновляем поле content\n        choice.message.content = content;\n      }\n      return choice;\n    });\n  }\n  return item;\n});\n"
      },
      "id": "78252747-9afb-4b51-a549-53acacbb700f",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3080,
        620
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/images/variations",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer sk-xb1rClGVOkiugSDsGcgqctaopPe64SJSXTRq2yY8FAT3BlbkFJX561N8f6wIyeZAFIFUARwkMqi6TaFU4B5eyr_kp_YA"
            },
            {
              "name": "Content-Type",
              "value": "multipart/form-data"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "n",
              "value": "1"
            },
            {
              "parameterType": "formBinaryData",
              "name": "image",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "970de906-1a37-441d-8577-4502643135e7",
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        540,
        20
      ]
    },
    {
      "parameters": {
        "url": "https://static.tildacdn.com/tild3332-6363-4136-b339-626139653764/noroot.png",
        "options": {}
      },
      "id": "4e99f2ee-11d8-4e81-a052-215293e8d00a",
      "name": "HTTP Request3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        260,
        20
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.data[0].url }}",
        "options": {}
      },
      "id": "9c541bb7-558c-45e7-bb3b-41dc0b509473",
      "name": "HTTP Request4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        780,
        20
      ]
    },
    {
      "parameters": {
        "jsCode": "const jwt = require('jsonwebtoken');\n\nconst ak = \"\"; // Access Key\nconst sk = \"\"; // Secret Key\n\nconst payload = {\n  iss: ak,\n  exp: Math.floor(Date.now() / 1000) + 1800, // 30 minutes\n  nbf: Math.floor(Date.now() / 1000) - 5 // Start time\n};\n\nconst token = jwt.sign(payload, sk, { algorithm: 'HS256' });\n\nreturn [{ token }];\n"
      },
      "id": "c3a54517-257c-4792-bd6f-0db51e4530ba",
      "name": "Code3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e208725f-964a-499d-a702-06ecbac42597",
              "leftValue": "={{ $json.topic }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "49fa884d-ba58-4db9-ad86-23535a086b29",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1280,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем JSON-ответ от предыдущей ноды\nconst response = items[0].json;\n\n// Извлекаем content\nconst content = response.choices[0].message.content;\n\n// Находим часть с массивом JSON в content\nconst jsonString = content.match(/```json\\n([\\s\\S]*?)\\n```/);\n\nif (jsonString && jsonString[1]) {\n    // Парсим строку JSON в массив\n    const jsonArray = JSON.parse(jsonString[1]);\n    // Возвращаем массив напрямую\n    return jsonArray.map(item => ({ json: item }));\n}\n\n// Если массив не найден, возвращаем пустой массив\nreturn [];\n"
      },
      "id": "4b817b8c-1ea2-4af6-ad94-9dbc6421e1d0",
      "name": "Extract topic and correspondence1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2720,
        140
      ]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "guid": "={{ $json.id }}",
            "topic": "={{ $json.topic }}",
            "percentage": "={{ $json.percentage }}"
          },
          "matchingColumns": [
            "guid"
          ],
          "schema": [
            {
              "id": "guid",
              "displayName": "guid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "pubDate",
              "displayName": "pubDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "isoDate",
              "displayName": "isoDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "image",
              "displayName": "image",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "image_gen",
              "displayName": "image_gen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "topic",
              "displayName": "topic",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "percentage",
              "displayName": "percentage",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            }
          ]
        },
        "options": {}
      },
      "id": "ae438bc0-0e6c-4bae-b6b1-d1bc6bca1204",
      "name": "Postgres1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2940,
        140
      ],
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "guid": "={{ $json.link }}",
            "title": "={{ $json.title }}",
            "link": "={{ $json.link }}",
            "content": "={{ $json.content }}",
            "pubDate": "={{ $json.date }}",
            "isoDate": "={{ $json.date }}",
            "image": "={{ $json.image }}"
          },
          "matchingColumns": [
            "guid"
          ],
          "schema": [
            {
              "id": "guid",
              "displayName": "guid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "pubDate",
              "displayName": "pubDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "isoDate",
              "displayName": "isoDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "image",
              "displayName": "image",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            }
          ]
        },
        "options": {}
      },
      "id": "675c2dfd-a909-44fa-bcef-302813babc92",
      "name": "SaveToDB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1560,
        120
      ],
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "options": {}
      },
      "id": "cf940fe2-c3b3-43c7-a6db-ed8e72912743",
      "name": "Postgres3",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2080,
        140
      ],
      "executeOnce": false,
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o-mini-2024-07-18\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Ты — ассистент, который генерирует нумерованный! список новостей для рерайта. Напиши последние 5 новостей в формате: 1(номер). <a>Заголовок (title)</a> (<strong>название темы и % соответствия ей</strong>), <i>сокращённое содержание (content)</i> и изображение новости (image), если оно есть. Представь их в виде нумерованного списка с HTML-разметкой. Начни с фразы: 'Это список новостей доступных для рерайта.'\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": {{ JSON.stringify($json.combinedData.toJsonString()) }}\n    }\n  ]\n}\n",
        "options": {}
      },
      "id": "5b4d8d29-c9d0-4379-b460-8cce0ccd198d",
      "name": "GPT Answer1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2020,
        720
      ]
    },
    {
      "parameters": {
        "jsCode": "// Список разрешённых тегов для Telegram\nconst allowedTagsTelegram = ['a', 'strong', 'i'];\n\n// Функция для экранирования специальных символов в тексте\nfunction escapeHtml(text) {\n  return text.replace(/[&<>]/g, function (match) {\n    switch (match) {\n      case '&':\n        return '&amp;';\n      case '<':\n        return '&lt;';\n      case '>':\n        return '&gt;';\n      default:\n        return match;\n    }\n  });\n}\n\n// Функция для обработки контента для Telegram\nfunction processContentForTelegram(html, allowedTags) {\n  // Разбиваем HTML на теги и текстовые узлы\n  const regex = /(<\\/?[^>]+>)|([^<]+)/g;\n  let result = [];\n  let match;\n\n  while ((match = regex.exec(html)) !== null) {\n    if (match[1]) {\n      // Это тег\n      let tag = match[1];\n      // Извлекаем имя тега\n      let tagNameMatch = tag.match(/^<\\/?\\s*([^\\s>\\/]+)/);\n      if (tagNameMatch) {\n        let tagName = tagNameMatch[1].toLowerCase();\n        if (allowedTags.includes(tagName)) {\n          // Разрешённый тег, сохраняем его\n          result.push(tag);\n        } else {\n          // Запрещённый тег\n          if (tagName === 'img') {\n            // Для тегов <img> в Telegram добавляем ссылку на изображение\n            let srcMatch = tag.match(/src=\"([^\"]+)\"/);\n            if (srcMatch) {\n              let imgUrl = srcMatch[1];\n              // Добавляем текстовую ссылку на изображение\n              result.push(`\\nСсылка на изображение: ${imgUrl}\\n`);\n            }\n          }\n          // Иначе игнорируем тег и его содержимое\n        }\n      } else {\n        // Некорректный тег, экранируем его\n        result.push(escapeHtml(tag));\n      }\n    } else if (match[2]) {\n      // Это текст\n      let text = match[2];\n      // Экранируем специальные символы\n      result.push(escapeHtml(text));\n    }\n  }\n\n  // Объединяем результат в строку\n  let content = result.join('');\n\n  // Разбиваем контент на отдельные новости для нумерации\n  // Предполагаем, что каждая новость разделена двумя или более переводами строки\n  let items = content.split(/\\n{2,}/).filter(item => item.trim() !== '');\n\n  // Добавляем нумерацию\n  let numberedContent = items.map((item, index) => `${index + 1}. ${item.trim()}`).join('\\n\\n');\n\n  // Добавляем заголовок перед списком\n  numberedContent = 'Это список новостей доступных для рерайта.\\n\\n' + numberedContent;\n\n  return numberedContent;\n}\n\n// Основной код\nreturn items.map(item => {\n  if (item.json.choices && Array.isArray(item.json.choices)) {\n    item.json.choices = item.json.choices.map(choice => {\n      if (choice.message && choice.message.content) {\n        let originalContent = choice.message.content;\n\n        // Обработка контента для Telegram\n        let telegramContent = processContentForTelegram(originalContent, allowedTagsTelegram);\n\n        // Контент для веб-приложения оставляем без изменений\n        let webAppContent = originalContent;\n\n        // Сохраняем результаты\n        choice.message.telegramContent = telegramContent;\n        choice.message.webAppContent = webAppContent;\n      }\n      return choice;\n    });\n  }\n  return item;\n});\n"
      },
      "id": "2deff60a-e800-43aa-8447-7fff83a4233e",
      "name": "Code5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        720
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://chatter.salebot.pro/api/{{ $('Webhook').first().json.body.api_key }}/callback",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "client_id",
              "value": "={{ $('Webhook').first().json.body.client_id }}"
            },
            {
              "name": "message",
              "value": "=n8n"
            },
            {
              "name": "response",
              "value": "={{ $json.telegram }}"
            },
            {
              "name": "html_response",
              "value": "={{ $json.web }}"
            }
          ]
        },
        "options": {}
      },
      "id": "1c0482e5-bd24-4b13-9101-0e49d59f78ea",
      "name": "SendToSalebot3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2040,
        560
      ]
    },
    {
      "parameters": {
        "jsCode": "// Функция для очистки контента и сокращения текста для Telegram\nfunction getTelegramContent(content) {\n  if (!content || typeof content !== 'string') {\n    return '';  // Если контент отсутствует или не является строкой, возвращаем пустую строку\n  }\n  const cleanedContent = content.replace(/<[^>]+>/g, '');  // Удаление всех HTML-тегов\n  return cleanedContent.length > 200 ? cleanedContent.substring(0, 200) + '...' : cleanedContent;\n}\n\n// Генерация списка новостей для Telegram\nfunction generateTelegramNewsList(newsArray) {\n  let newsList = 'Список новостей для рерайта:\\n\\n';\n\n  if (Array.isArray(newsArray)) {\n    newsArray.forEach((item, index) => {\n      const title = item.title ? item.title : 'Без заголовка';\n      const link = item.link ? item.link : '#';\n      const topic = item.topic ? `<strong>${item.topic}</strong>` : '<strong>Без темы</strong>';\n      const percentage = item.percentage ? `<strong>${item.percentage}%</strong>` : '<strong>0%</strong>';\n      const content = item.content ? getTelegramContent(item.content) : 'Контент отсутствует';\n\n      newsList += `${index + 1}. <strong><a href=\"${link}\">${title}</a></strong> (${topic} и ${percentage})\\n<i>${content}</i>\\n\\n`;\n    });\n  } else {\n    newsList = 'Данные не являются массивом.';\n  }\n\n  return newsList;\n}\n\n// Генерация списка новостей для веб-версии (таблица без рамки и с картинками)\nfunction generateWebNewsList(newsArray) {\n  let newsList = '<h2>Список новостей для рерайта</h2>\\n<table style=\"border-collapse:collapse; width:100%;\">\\n';\n\n  if (Array.isArray(newsArray)) {\n    newsArray.forEach((item, index) => {\n      const title = item.title ? item.title : 'Без заголовка';\n      const link = item.link ? item.link : '#';\n      const topic = item.topic ? item.topic : 'Без темы';\n      const percentage = item.percentage ? `${item.percentage}%` : '0%';\n      const content = item.content ? item.content.replace(/<[^>]+>/g, '').substring(0, 200) + '...' : 'Контент отсутствует';\n      \n      // Используем image_gen, если оно не пустое; если пустое — используем image\n      const image = (item.image_gen && item.image_gen.trim() !== '') ? item.image_gen : (item.image || '');\n\n      newsList += `<tr><td style=\"padding: 10px;\">\n        <strong>${index + 1}. <a href=\"${link}\">${title}</a></strong><br>\n        <strong>${topic}</strong> и <strong>${percentage}</strong><br>\n        ${content}<br>\n        ${image ? `<img src=\"${image}\" alt=\"${title}\" style=\"max-width: 100%; height: auto;\">` : ''}\n      </td></tr>\\n`;\n    });\n  } else {\n    newsList += '<tr><td>Данные не являются массивом.</td></tr>';\n  }\n\n  newsList += '</table>\\n';\n  return newsList;\n}\n\n// Получаем данные из ноды Read DB\nconst combinedData = $json.combinedData;  // Используем данные из ноды Read DB\n\n// Генерируем списки новостей для Telegram и веб-версии\nconst telegramNewsList = generateTelegramNewsList(combinedData);\nconst webNewsList = generateWebNewsList(combinedData);\n\n// Возвращаем оба результата в виде строк\nreturn {\n  telegram: telegramNewsList,\n  web: webNewsList\n};\n"
      },
      "id": "851da950-95b5-4df7-a283-41eb4d676eaf",
      "name": "Code2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1840,
        560
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "4efc391c-7e8e-417f-ac97-0805d8a4941c",
        "options": {}
      },
      "id": "c06f7930-7814-4b94-8d61-6273e1814452",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        340,
        760
      ],
      "webhookId": "4efc391c-7e8e-417f-ac97-0805d8a4941c"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"temperature\": 1,\n    \"messages\": [\n        {\n            \"role\": \"system\",\n            \"content\": \"Верни массив объектов JSON, где каждый объект содержит следующие поля: \\n1. \\\"id\\\" (ID статьи, соответствующий полю guid), \\n2. \\\"topic\\\" (название тематики), \\n3. \\\"percentage\\\" (процент соответствия). Оцени, насколько статья соответствует одной или нескольким из перечисленных тематик: \\n1. Фахверковые дома, \\n2. Строительство фахверковых домов, \\n3. Современные фахверковые дома, \\n4. Технологии фахверковых построек, \\n5. Энергоэффективность в фахверковых домах.\\n6. Остекление: Панорамное остекление, \\n7. Энергоэффективные стеклопакеты, \\n8. Остекление фасадов, \\n9. Современные технологии остекления.\\nДополнительные темы: \\n10. Эко-архитектура, \\n11. Остекление деревянных домов, \\n12. Утепление и звукоизоляция окон, \\n13. Влияние остекления на микроклимат в доме.\\nОтвет должен быть в формате: [{\\\"id\\\": \\\"<guid>\\\", \\\"topic\\\": \\\"<Название тематики>\\\", \\\"percentage\\\": <Процент соответствия>}]. Если тематика не найдена, то напиши Без темы и percentage: 0\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": {{ JSON.stringify($json.combinedData.toJsonString()) }}\n        }\n    ]\n}",
        "options": {}
      },
      "id": "5bbf531e-c25d-4ae1-bb8e-6b77ababf0de",
      "name": "GPT News List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2520,
        140
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из всех элементов\nconst items = $items();  // Получаем массив всех элементов\n\n// Создаем массив для объединенных данных\nlet combinedData = [];\n\n// Проходим по каждому элементу в массиве\nitems.forEach(item => {\n  // Добавляем каждый объект в общий массив\n  combinedData.push(item.json);\n});\n\n// Возвращаем объединенные данные\nreturn [\n  {\n    json: {\n      combinedData\n    }\n  }\n];\n"
      },
      "id": "e771fcc4-e6c5-4549-b4a5-bcffd8a99eef",
      "name": "Collect data1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        720
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все данные из предыдущих элементов\nconst items = $items();  // Получаем массив всех элементов\n\n// Создаем массив для объединения данных\nlet combinedData = [];\n\n// Проходим по каждому элементу и добавляем его в общий массив\nitems.forEach(item => {\n  combinedData.push(item.json);\n});\n\n// Возвращаем один элемент с массивом combinedData внутри\nreturn [\n  {\n    json: {\n      combinedData: combinedData,\n      count: items.length\n    }\n  }\n];\n"
      },
      "id": "9b1c1bb0-220b-47cc-a931-28bcc2982d81",
      "name": "Collect data2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2280,
        140
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"messages\": [\n        {\n            \"role\": \"system\",\n            \"content\": \"Верни массив объектов JSON, где каждый объект содержит следующие поля: \\n1. \\\"id\\\" (ID статьи, соответствующий полю guid), \\n2. \\\"topic\\\" (название тематики), \\n3. \\\"percentage\\\" (процент соответствия). Оцени, насколько статья соответствует одной или нескольким из перечисленных тематик: \\n1. Фахверковые дома, \\n2. Строительство фахверковых домов, \\n3. Современные фахверковые дома, \\n4. Технологии фахверковых построек, \\n5. Энергоэффективность в фахверковых домах.\\n6. Остекление: Панорамное остекление, \\n7. Энергоэффективные стеклопакеты, \\n8. Остекление фасадов, \\n9. Современные технологии остекления.\\nДополнительные темы: \\n10. Эко-архитектура, \\n11. Остекление деревянных домов, \\n12. Утепление и звукоизоляция окон, \\n13. Влияние остекления на микроклимат в доме.\\nОтвет должен быть в формате: [{\\\"id\\\": \\\"<guid>\\\", \\\"topic\\\": \\\"<Название тематики>\\\", \\\"percentage\\\": <Процент соответствия>}]. Если тематика не найдена, то напиши Без темы.\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": {{ JSON.stringify($json.toJsonString()) }}\n        }\n    ]\n}\n",
        "options": {}
      },
      "id": "dbd43c44-1556-4bac-83d9-822e3e992850",
      "name": "GPT News List1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2280,
        -440
      ]
    },
    {
      "parameters": {
        "url": "http://88.218.171.139:5000/news",
        "options": {}
      },
      "id": "a69521ec-fc76-413b-8184-debc3b3eb92f",
      "name": "https://larta.com/ru/news1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1400,
        -300
      ]
    },
    {
      "parameters": {
        "jsCode": "const cheerio = require('cheerio');\n\nconst baseUrl = 'https://alutech.ru';\nconst newsUrl = baseUrl + '/novosti-i-akcii/';\n\n// Выполняем HTTP-запрос для получения страницы\nconst response = await this.helpers.request({\n    method: 'GET',\n    uri: newsUrl,\n});\n\n// Парсим HTML-ответ с помощью Cheerio\nconst $ = cheerio.load(response);\n\n// Функция для парсинга содержимого новости\nconst parseNewsContent = async (newsUrl) => {\n    const newsResponse = await this.helpers.request({\n        method: 'GET',\n        uri: newsUrl,\n    });\n    const $news = cheerio.load(newsResponse);\n\n    // Извлекаем текст новости из блока с классом 'content-area'\n    const contentBlock = $news('.content-area');\n    const contentText = contentBlock.text().trim();\n\n    // Извлекаем изображение из атрибута `src` или `srcset`\n    let newsImage = $news('.content-area img').attr('src');\n    \n    if (!newsImage || newsImage === '') {\n        const srcset = $news('.content-area img').attr('srcset');\n        if (srcset) {\n            // Извлекаем ссылки на изображения из srcset\n            const srcsetParts = srcset.split(', ');\n            \n            // Ищем JPG-изображение\n            const jpgImage = srcsetParts.find(part => part.includes('.jpg'));\n            newsImage = jpgImage ? jpgImage.split(' ')[0] : srcsetParts[0].split(' ')[0]; // Берём JPG или первое изображение\n        }\n    }\n\n    // Добавляем базовый URL к изображению, если оно найдено и является относительным\n    newsImage = newsImage && newsImage.startsWith('/upload') ? baseUrl + newsImage : newsImage;\n\n    return { content: contentText || 'Контент не найден', image: newsImage || null };\n};\n\n// Функция для преобразования даты в формат ISO 8601 (dateTime)\nconst formatDate = (dateString) => {\n    const months = {\n        'января': '01', 'февраля': '02', 'марта': '03', 'апреля': '04',\n        'мая': '05', 'июня': '06', 'июля': '07', 'августа': '08',\n        'сентября': '09', 'октября': '10', 'ноября': '11', 'декабря': '12'\n    };\n\n    // Преобразуем дату, заменяя русские месяцы на их числовое представление\n    const [day, month, year] = dateString.split(' ');\n    const formattedDate = `${year}-${months[month]}-${day.padStart(2, '0')}T00:00:00.000Z`;\n\n    return new Date(formattedDate).toISOString();\n};\n\n// Массив для хранения промисов, которые будут обрабатывать новости\nlet newsPromises = [];\n\n// Ищем все блоки с новостями\n$('.news__item').each((index, element) => {\n    const newsTitle = $(element).find('.news__title').text().trim();\n    \n    // Извлекаем ссылку на новость\n    const relativeLink = $(element).find('a').attr('href');\n    const newsLink = relativeLink ? baseUrl + relativeLink : null;\n\n    const newsDate = $(element).find('time').text().trim();\n\n    // Преобразуем дату в формат ISO 8601 (dateTime)\n    const formattedDate = formatDate(newsDate);\n\n    // Извлекаем картинку из атрибута `src` внутри основного блока\n    let newsImage = $(element).find('img').attr('src');\n    \n    // Если `src` отсутствует или имеет некорректное значение, пробуем извлечь из `srcset`\n    if (!newsImage || newsImage === \"\") {\n        const srcset = $(element).find('img').attr('srcset');\n        if (srcset) {\n            const srcsetParts = srcset.split(', ');\n\n            // Ищем JPG-изображение\n            const jpgImage = srcsetParts.find(part => part.includes('.jpg'));\n            newsImage = jpgImage ? jpgImage.split(' ')[0] : srcsetParts[0].split(' ')[0]; // Берём JPG или первое изображение\n        }\n    }\n\n    // Добавляем базовый URL к изображению, если оно найдено и является относительным\n    newsImage = newsImage && newsImage.startsWith('/upload') ? baseUrl + newsImage : newsImage;\n\n    // Обрабатываем каждую новость в асинхронной функции и добавляем промисы в массив\n    const newsPromise = parseNewsContent(newsLink).then((newsData) => {\n        return {\n            title: newsTitle,\n            link: newsLink,\n            date: formattedDate, // Преобразованная дата\n            image: newsImage || newsData.image,\n            content: newsData.content\n        };\n    });\n\n    newsPromises.push(newsPromise);\n});\n\n// Ожидаем завершения всех промисов\nconst newsList = await Promise.all(newsPromises);\n\n// Логируем результаты, чтобы убедиться, что они корректны\nconsole.log('Список новостей:', newsList);\n\n// Возвращаем список новостей с изображениями и контентом\nreturn newsList;\n"
      },
      "id": "4f848ead-1dbb-48fb-9846-92a8c134f446",
      "name": "https://alutech.ru/novosti-i-akcii/1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        -500
      ]
    },
    {
      "parameters": {
        "content": "## Получение новостей и оценка соответствия тематике",
        "height": 464.2606281434697,
        "width": 1967.5395050415307,
        "color": 3
      },
      "id": "74a7b4a8-c103-49b0-8b87-78a12a238ff6",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1180,
        -540
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 24
            }
          ]
        }
      },
      "id": "476a23d7-f4e4-432d-94a7-4550ea3761ee",
      "name": "Schedule Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        1000,
        -400
      ]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "guid": "={{ $json.link }}",
            "title": "={{ $json.title }}",
            "link": "={{ $json.link }}",
            "content": "={{ $json.content }}",
            "pubDate": "={{ $json.date }}",
            "isoDate": "={{ $json.date }}",
            "image": "={{ $json.image }}"
          },
          "matchingColumns": [
            "guid"
          ],
          "schema": [
            {
              "id": "guid",
              "displayName": "guid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "pubDate",
              "displayName": "pubDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "isoDate",
              "displayName": "isoDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "image",
              "displayName": "image",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            }
          ]
        },
        "options": {}
      },
      "id": "3c42b943-2213-40db-9bf5-d2c5eec1eaf0",
      "name": "SaveToDB2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1640,
        -300
      ],
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let results = [];\n\nfor (let index = 0; index < items.length; index++) {\n  let item = items[index];\n  let content = item.json.choices[0].message.content;\n  content = content.trim();\n\n  // Удаляем обертки ```json и ```\n  if (content.startsWith('```json')) {\n    content = content.slice(7, -3).trim();\n  } else if (content.startsWith('```')) {\n    content = content.slice(3, -3).trim();\n  }\n\n  let jsonData;\n  try {\n    jsonData = JSON.parse(content);\n  } catch (error) {\n    // Если не удалось распарсить, добавляем элемент с информацией об ошибке\n    results.push({\n      json: {\n        guid: item.json.id || '',\n        topic: 'Ошибка парсинга JSON',\n        percentage: 0,\n        error: 'JSON parsing error',\n      },\n    });\n    continue;\n  }\n\n  // Проверяем, что jsonData является массивом\n  if (Array.isArray(jsonData)) {\n    if (jsonData.length > 0) {\n      // Выбираем один объект, например, с наибольшим percentage\n      let entry = jsonData.reduce((max, obj) => (obj.percentage > max.percentage ? obj : max), jsonData[0]);\n\n      let guid = entry.id || item.json.id || '';\n      let topic = entry.topic || '';\n      let percentage = entry.percentage || 0;\n\n      results.push({\n        json: {\n          guid,\n          topic,\n          percentage,\n        },\n      });\n    } else {\n      // Массив пустой, добавляем элемент с информацией о пустых данных\n      results.push({\n        json: {\n          guid: item.json.id || '',\n          topic: 'Данные отсутствуют',\n          percentage: 0,\n        },\n      });\n    }\n  } else {\n    // Если jsonData не массив, добавляем элемент с информацией об ошибке\n    results.push({\n      json: {\n        guid: item.json.id || '',\n        topic: 'Некорректные данные',\n        percentage: 0,\n        error: 'jsonData is not an array',\n      },\n    });\n  }\n}\n\nreturn results;\n"
      },
      "id": "c70a3c40-4c40-4192-a81f-2882268bdfcd",
      "name": "Extract topic and correspondence",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2500,
        -440
      ]
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "guid": "={{ $json.guid }}",
            "topic": "={{ $json.topic }}",
            "percentage": "={{ $json.percentage }}"
          },
          "matchingColumns": [
            "guid"
          ],
          "schema": [
            {
              "id": "guid",
              "displayName": "guid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "pubDate",
              "displayName": "pubDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "isoDate",
              "displayName": "isoDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "image",
              "displayName": "image",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "image_gen",
              "displayName": "image_gen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "topic",
              "displayName": "topic",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "percentage",
              "displayName": "percentage",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            }
          ]
        },
        "options": {}
      },
      "id": "40ac4f50-0e45-467d-9e68-7351b45386b9",
      "name": "Postgres",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2720,
        -440
      ],
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "guid": "={{ $json.link }}",
            "title": "={{ $json.title }}",
            "link": "={{ $json.link }}",
            "content": "={{ $json.content }}",
            "pubDate": "={{ $json.date }}",
            "isoDate": "={{ $json.date }}",
            "image": "={{ $json.image }}"
          },
          "matchingColumns": [
            "guid"
          ],
          "schema": [
            {
              "id": "guid",
              "displayName": "guid",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "pubDate",
              "displayName": "pubDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "isoDate",
              "displayName": "isoDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "image",
              "displayName": "image",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            }
          ]
        },
        "options": {}
      },
      "id": "b8daffb2-228e-4751-a823-ebb91c8689a4",
      "name": "SaveToDB3",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1640,
        -500
      ],
      "executeOnce": false,
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "news",
          "mode": "list",
          "cachedResultName": "news"
        },
        "options": {}
      },
      "id": "12464cad-65a3-4436-a357-d4b0a3ed0c85",
      "name": "Postgres4",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2060,
        -440
      ],
      "credentials": {
        "postgres": {
          "id": "OGLaL0xoD8bs2EJd",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "id": "ee0fe72b-7c27-4dcc-b299-a85275eea6d5",
      "name": "Schedule Trigger2",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        1840,
        140
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 25
            }
          ]
        }
      },
      "id": "467004e5-9d7e-4040-bb6b-d8b5e4b56d23",
      "name": "Schedule Trigger3",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        1840,
        -420
      ]
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.api-ai.net",
            "user-agent": "python-requests/2.31.0",
            "content-length": "95",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate",
            "content-type": "application/json",
            "x-forwarded-for": "158.160.42.134",
            "x-forwarded-host": "n8n.api-ai.net",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "318b0a7e186c",
            "x-real-ip": "158.160.42.134"
          },
          "params": {},
          "query": {},
          "body": {
            "api_key": "ed09ac5a0f2c095a9d124faa32e33da7",
            "client_id": "546566517",
            "dialog": "Hi",
            "page": "1"
          },
          "webhookUrl": "https://n8n.api-ai.net/webhook/4efc391c-7e8e-417f-ac97-0805d8a4941c",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Postgres2": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Correspondence": {
      "main": [
        [
          {
            "node": "Topic-Correspondence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Topic-Correspondence": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read DB": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect data": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Parse News",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse News": {
      "main": [
        [
          {
            "node": "Correspondence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SendToSalebot1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "https://larta.com/ru/news": {
      "main": [
        [
          {
            "node": "SaveToDB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "https://alutech.ru/novosti-i-akcii/": {
      "main": [
        [
          {
            "node": "SaveToDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "https://alutech.ru/novosti-i-akcii/",
            "type": "main",
            "index": 0
          },
          {
            "node": "https://larta.com/ru/news",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "SendToSalebot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Collect data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Collect data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract topic and correspondence1": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres3": {
      "main": [
        [
          {
            "node": "Collect data2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "SendToSalebot3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Read DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT News List": {
      "main": [
        [
          {
            "node": "Extract topic and correspondence1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect data1": {
      "main": [
        [
          {
            "node": "SendToSalebot1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect data2": {
      "main": [
        [
          {
            "node": "GPT News List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT News List1": {
      "main": [
        [
          {
            "node": "Extract topic and correspondence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "https://larta.com/ru/news1": {
      "main": [
        [
          {
            "node": "SaveToDB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "https://alutech.ru/novosti-i-akcii/1": {
      "main": [
        [
          {
            "node": "SaveToDB3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "https://alutech.ru/novosti-i-akcii/1",
            "type": "main",
            "index": 0
          },
          {
            "node": "https://larta.com/ru/news1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract topic and correspondence": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres4": {
      "main": [
        [
          {
            "node": "GPT News List1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger2": {
      "main": [
        [
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger3": {
      "main": [
        [
          {
            "node": "Postgres4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "24a5f59c-2987-42c6-973a-197d771f5d14",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "332f4e2842ac35bdf92bcf45820374737b808cfde08870402695ef84706bff04"
  },
  "id": "mtG7UK0Ms95Drf85",
  "tags": []
}