const fs = require('fs');

// –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é instagram-private-service.js —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ES module –∏–º–ø–æ—Ä—Ç–∞–º–∏/—ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏

const fixedCode = `/**
 * Instagram Private Service
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Instagram —á–µ—Ä–µ–∑ instagram-private-api
 * –í–∫–ª—é—á–∞–µ—Ç SOCKS5 proxy –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏ Stories
 */

import { IgApiClient } from 'instagram-private-api';
import { SocksProxyAgent } from 'socks-proxy-agent';
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';

class InstagramPrivateService {
  constructor() {
    this.clients = new Map(); // –ö–µ—à –∫–ª–∏–µ–Ω—Ç–æ–≤ Instagram
    this.sessions = new Map(); // –ö–µ—à —Å–µ—Å—Å–∏–π
    
    // SOCKS5 proxy –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    this.proxyConfig = {
      host: 'mobpool.proxy.market',
      port: 10001, // –ü–æ—Ä—Ç—ã 10000-10999
      username: 'WeBZDZ7p9lh5',
      password: 'iOPNYl8D',
      type: 5 // SOCKS5
    };
    
    console.log('[Instagram Service] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å SOCKS5 proxy:', {
      host: this.proxyConfig.host,
      port: this.proxyConfig.port,
      username: this.proxyConfig.username.substring(0, 4) + '***'
    });
    
    // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupCache();
    }, 30 * 60 * 1000);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç SOCKS5 proxy agent –¥–ª—è Instagram –∫–ª–∏–µ–Ω—Ç–∞
   */
  createProxyAgent() {
    const proxyUrl = \`socks5://\${this.proxyConfig.username}:\${this.proxyConfig.password}@\${this.proxyConfig.host}:\${this.proxyConfig.port}\`;
    return new SocksProxyAgent(proxyUrl);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Instagram –∫–ª–∏–µ–Ω—Ç–∞ —Å proxy
   */
  async createInstagramClient(username, password) {
    const sessionKey = \`\${username}:\${crypto.createHash('md5').update(password).digest('hex')}\`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (this.clients.has(sessionKey)) {
      const cached = this.clients.get(sessionKey);
      console.log(\`[Instagram Service] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è \${username}\`);
      return cached;
    }

    try {
      const ig = new IgApiClient();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SOCKS5 proxy –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const proxyAgent = this.createProxyAgent();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º proxy agent –¥–ª—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ Instagram API
      ig.request.defaults.httpsAgent = proxyAgent;
      ig.request.defaults.agent = proxyAgent;

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º user agent –∏ device
      ig.state.generateDevice(username);
      ig.state.proxyUrl = \`socks5://\${this.proxyConfig.username}:\${this.proxyConfig.password}@\${this.proxyConfig.host}:\${this.proxyConfig.port}\`;

      console.log(\`[Instagram Service] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${username} —á–µ—Ä–µ–∑ SOCKS5\`);
      
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      const auth = await ig.account.login(username, password);
      console.log(\`[Instagram Service] ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: \${username}, User ID: \${auth.pk}\`);
      
      // –ö–µ—à–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ 1 —á–∞—Å
      this.clients.set(sessionKey, {
        client: ig,
        username: username,
        timestamp: Date.now(),
        authenticated: true
      });
      
      return this.clients.get(sessionKey);
      
    } catch (error) {
      console.error(\`[Instagram Service] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ \${username}:\`, error.message);
      
      // –ï—Å–ª–∏ challenge —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
      if (error.message.includes('challenge_required')) {
        console.log(\`[Instagram Service] –¢—Ä–µ–±—É–µ—Ç—Å—è challenge –¥–ª—è \${username}\`);
      }
      
      throw new Error(\`–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Instagram: \${error.message}\`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  async checkStatus(username, password) {
    try {
      const clientData = await this.createInstagramClient(username, password);
      return {
        authenticated: true,
        username: clientData.username,
        hasProxy: true
      };
    } catch (error) {
      return {
        authenticated: false,
        error: error.message,
        hasProxy: true
      };
    }
  }

  /**
   * –ü—É–±–ª–∏–∫—É–µ—Ç Stories —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
   */
  async publishStory(username, password, storyData) {
    console.log(\`[Instagram Service] –ü—É–±–ª–∏–∫–∞—Ü–∏—è Stories –¥–ª—è \${username}\`);
    
    try {
      const clientData = await this.createInstagramClient(username, password);
      const ig = clientData.client;

      // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å–ª–∞–π–¥–æ–≤ Stories
      if (Array.isArray(storyData.slides)) {
        const results = [];
        
        for (let i = 0; i < storyData.slides.length; i++) {
          const slide = storyData.slides[i];
          console.log(\`[Instagram Service] –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ª–∞–π–¥–∞ \${i + 1}/\${storyData.slides.length}\`);
          
          try {
            const result = await this.publishSingleStorySlide(ig, slide);
            results.push(result);
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ª–∞–π–¥–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            if (i < storyData.slides.length - 1) {
              await new Promise(resolve => setTimeout(resolve, 2000));
            }
          } catch (error) {
            console.error(\`[Instagram Service] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞ \${i + 1}:\`, error.message);
            results.push({ success: false, error: error.message });
          }
        }
        
        return {
          success: true,
          slidesPublished: results.filter(r => r.success).length,
          totalSlides: storyData.slides.length,
          results: results
        };
      } else {
        // –û–¥–∏–Ω–æ—á–Ω—ã–π Stories
        return await this.publishSingleStorySlide(ig, storyData);
      }
      
    } catch (error) {
      console.error(\`[Instagram Service] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories:\`, error);
      throw error;
    }
  }

  /**
   * –ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–∏–Ω —Å–ª–∞–π–¥ Stories
   */
  async publishSingleStorySlide(ig, slideData) {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
      let mediaBuffer;
      
      if (slideData.imageUrl) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const response = await fetch(slideData.imageUrl);
        mediaBuffer = Buffer.from(await response.arrayBuffer());
      } else if (slideData.videoUrl) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        const response = await fetch(slideData.videoUrl);
        mediaBuffer = Buffer.from(await response.arrayBuffer());
      } else {
        throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω imageUrl –∏–ª–∏ videoUrl –¥–ª—è Stories');
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è Stories
      const storyOptions = {};
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (slideData.interactiveElements && slideData.interactiveElements.length > 0) {
        storyOptions.stickers = [];
        
        for (const element of slideData.interactiveElements) {
          if (element.type === 'poll') {
            storyOptions.stickers.push({
              type: 'poll',
              poll: {
                question: element.question || '–í–∞—à–µ –º–Ω–µ–Ω–∏–µ?',
                leftChoice: element.leftChoice || '–î–∞',
                rightChoice: element.rightChoice || '–ù–µ—Ç'
              }
            });
          } else if (element.type === 'question') {
            storyOptions.stickers.push({
              type: 'question',
              question: {
                question: element.question || '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å'
              }
            });
          } else if (element.type === 'slider') {
            storyOptions.stickers.push({
              type: 'slider',
              slider: {
                question: element.question || '–û—Ü–µ–Ω–∏—Ç–µ',
                emoji: element.emoji || 'üî•'
              }
            });
          }
        }
      }

      let result;
      
      if (slideData.videoUrl) {
        // –ü—É–±–ª–∏–∫—É–µ–º –≤–∏–¥–µ–æ Stories
        result = await ig.publish.story({
          video: mediaBuffer,
          ...storyOptions
        });
      } else {
        // –ü—É–±–ª–∏–∫—É–µ–º —Ñ–æ—Ç–æ Stories
        result = await ig.publish.story({
          file: mediaBuffer,
          ...storyOptions
        });
      }
      
      console.log(\`[Instagram Service] ‚úÖ Stories –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: \${result.media?.id || 'ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\`);
      
      return {
        success: true,
        storyId: result.media?.id,
        storyUrl: \`https://instagram.com/stories/\${slideData.username || 'unknown'}/\${result.media?.id || ''}\`
      };
      
    } catch (error) {
      console.error(\`[Instagram Service] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞ Stories:\`, error);
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
   */
  cleanupCache() {
    const now = Date.now();
    const expired = [];
    
    for (const [key, session] of this.sessions.entries()) {
      if (session.expiresAt < now) {
        expired.push(key);
      }
    }
    
    expired.forEach(key => {
      this.sessions.delete(key);
      this.clients.delete(key);
    });
    
    if (expired.length > 0) {
      console.log(\`[Instagram Service] –û—á–∏—â–µ–Ω–æ \${expired.length} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π\`);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
const instagramService = new InstagramPrivateService();
export default instagramService;
`;

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
fs.writeFileSync('server/services/instagram-private-service.js', fixedCode);

console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π instagram-private-service.js —Å ES modules');