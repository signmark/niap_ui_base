/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ API
 * –ó–∞–ø—É—Å–∫: node telegram-simple-test.js
 */

import fetch from 'node-fetch';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {string} text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendMessage(text) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  if (!token || !chatId) {
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID');
  }
  
  console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –≤ —á–∞—Ç ${chatId}`);
  console.log(`–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${text}`);
  
  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
      }),
    });
    
    const result = await response.json();
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {string} html HTML-—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendHtml(html) {
  return sendMessage(html);
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function runSimpleTest() {
  console.log('=== –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===');
  const result = await sendMessage('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ telegram-simple-test.js');
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É HTML-—Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function runHtmlTest() {
  console.log('\n=== –¢–µ—Å—Ç HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===');
  const html = '<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> –∏ <i>–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>, –∞ —Ç–∞–∫–∂–µ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>.';
  const result = await sendHtml(html);
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ø–∏—Å–∫–∞ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
async function runListTest() {
  console.log('\n=== –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===');
  const html = `<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞:</b>
  
‚Ä¢ –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç
‚Ä¢ <b>–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç</b> —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç —Å <i>–∫—É—Ä—Å–∏–≤–æ–º</i>`;
  
  const result = await sendHtml(html);
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
 */
async function runComplexTest() {
  console.log('\n=== –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ ===');
  const html = `üî• <b>–ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!</b> üî•
  
–°–µ–≥–æ–¥–Ω—è –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ:
  
‚Ä¢ üçé –Ø–±–ª–æ–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π 20%
‚Ä¢ üçå –ë–∞–Ω–∞–Ω—ã - 2 –∫–≥ –ø–æ —Ü–µ–Ω–µ 1
‚Ä¢ üçì –°–≤–µ–∂–∞—è –∫–ª—É–±–Ω–∏–∫–∞
  
üõí –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏!`;
  
  const result = await sendHtml(html);
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
async function runAllTests() {
  try {
    console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram...\n');
    
    await runSimpleTest();
    await runHtmlTest();
    await runListTest();
    await runComplexTest();
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
  }
}

runAllTests();