/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç Stories workflow: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è + –ø—É–±–ª–∏–∫–∞—Ü–∏—è
 */
const axios = require('axios');

async function testCompleteStoriesFlow() {
  const SERVER_URL = 'http://localhost:5000';
  
  console.log('üé¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π Stories workflow');
  
  // –®–∞–≥ 1: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
  console.log('\n1Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ...');
  
  const testVideoUrl = 'https://sample-videos.com/zip/10/webm/SampleVideo_360x240_1mb.webm';
  
  try {
    const conversionResponse = await axios.post(`${SERVER_URL}/api/real-video-converter/convert`, {
      videoUrl: testVideoUrl
    }, {
      timeout: 300000
    });
    
    console.log('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', conversionResponse.data.convertedUrl);
    
    // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º Stories –∫–æ–Ω—Ç–µ–Ω—Ç
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º Stories –∫–æ–Ω—Ç–µ–Ω—Ç...');
    
    const storyData = {
      campaign_id: 'test_campaign',
      content_type: 'video',
      title: 'Test Video Story',
      content: '<p>–¢–µ—Å—Ç–æ–≤–∞—è Stories</p>',
      video_url: conversionResponse.data.convertedUrl,
      status: 'draft'
    };
    
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–æ–∫–µ–Ω (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π)
    const AUTH_TOKEN = `Bearer ${process.env.DIRECTUS_ADMIN_TOKEN || 'test_token'}`;
    
    const createResponse = await axios.post(`${SERVER_URL}/api/campaign-content`, storyData, {
      headers: {
        'Authorization': AUTH_TOKEN,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ Stories –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', createResponse.data.data.id);
    
    // –®–∞–≥ 3: –ü—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ N8N
    console.log('\n3Ô∏è‚É£ –ü—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ N8N Stories webhook...');
    
    const n8nPayload = {
      contentId: createResponse.data.data.id,
      contentType: 'video_story',
      platforms: ['instagram'],
      scheduledAt: new Date().toISOString(),
      content: {
        title: storyData.title,
        description: storyData.content,
        videoUrl: conversionResponse.data.convertedUrl,
        mediaType: 'VIDEO',
        storyType: 'instagram_stories'
      },
      metadata: {
        converted: true,
        videoFormat: 'mp4',
        resolution: '1080x1920',
        codec: 'H.264'
      },
      media_type: 'VIDEO',
      video_url: conversionResponse.data.convertedUrl,
      publish_mode: 'instagram_stories'
    };
    
    const webhookResponse = await axios.post('https://n8n.roboflow.space/webhook/publish-stories', n8nPayload, {
      timeout: 60000,
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ N8N –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å—Ç–∞—Ç—É—Å:', webhookResponse.status);
    
    console.log('\nüéâ –ü–û–õ–ù–´–ô WORKFLOW –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('Story ID:', createResponse.data.data.id);
    console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ:', conversionResponse.data.convertedUrl);
    console.log('N8N —Å—Ç–∞—Ç—É—Å:', webhookResponse.status);
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤ workflow:');
    
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–û—à–∏–±–∫–∞:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
  }
}

testCompleteStoriesFlow();