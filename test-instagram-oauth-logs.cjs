const axios = require('axios');
require('dotenv').config();

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ Instagram OAuth callback
 */

async function testInstagramOAuthLogs() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Instagram OAuth –ª–æ–≥–æ–≤');
  
  const campaignId = '46868c44-c6a4-4bed-accf-9ad07bba790e';
  const testData = {
    appId: '1234567890123456',
    appSecret: 'test_app_secret_12345',
    redirectUri: 'http://localhost:5000/instagram-callback',
    webhookUrl: 'https://n8n.roboflow.space/webhook/instagram-auth',
    instagramId: '17841422578516105',
    campaignId: campaignId
  };
  
  try {
    console.log('\n1. –ó–∞–ø—É—Å–∫–∞–µ–º OAuth flow...');
    
    // –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ OAuth flow
    const startResponse = await axios.post(
      'http://localhost:5000/api/instagram/auth/start',
      testData,
      {
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('OAuth flow –∑–∞–ø—É—â–µ–Ω:', {
      hasAuthUrl: !!startResponse.data.authUrl,
      state: startResponse.data.state
    });
    
    console.log('\n2. –°–∏–º—É–ª–∏—Ä—É–µ–º callback —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    
    // –®–∞–≥ 2: –°–∏–º—É–ª—è—Ü–∏—è callback (–≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Facebook OAuth)
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ Facebook –≤–µ—Ä–Ω—É–ª –±—ã –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const mockCode = 'AQD8test_authorization_code_from_facebook_oauth_flow_12345';
    const state = startResponse.data.state;
    
    console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è callback:', {
      code: mockCode.substring(0, 20) + '...',
      state: state
    });
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º callback
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—à–∏–±–∫–æ–π –Ω–∞ —ç—Ç–∞–ø–µ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω,
    // —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥, –Ω–æ –º—ã —É–≤–∏–¥–∏–º –ª–æ–≥–∏ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
    try {
      const callbackResponse = await axios.get(
        `http://localhost:5000/api/instagram/auth/callback?code=${mockCode}&state=${state}`,
        {
          timeout: 10000
        }
      );
      
      console.log('‚úÖ Callback completed successfully:', callbackResponse.data);
    } catch (callbackError) {
      if (callbackError.response) {
        console.log('üìã Callback response (expected error):', {
          status: callbackError.response.status,
          error: callbackError.response.data?.error || 'Unknown error',
          details: callbackError.response.data?.details
        });
        console.log('‚ÑπÔ∏è  –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      } else {
        console.log('‚ùå Network error:', callbackError.message);
      }
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏ –≤—ã—à–µ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    if (error.response) {
      console.error('Response data:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testInstagramOAuthLogs();