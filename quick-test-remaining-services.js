/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏" –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤
 */

import axios from 'axios';

const CONFIG = {
  baseUrl: 'http://localhost:5000',
  authToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjUzOTIxZjE2LWY1MWQtNDU5MS04MGI5LThjYWE0ZmRlNGQxMyIsInJvbGUiOiIyODViZGU2OS0yZjA0LTRmM2YtOTg5Yy1mN2RmZWMzZGQ0MDUiLCJhcHBfYWNjZXNzIjp0cnVlLCJhZG1pbl9hY2Nlc3MiOnRydWUsImlhdCI6MTc0ODQ0NzgwNywiZXhwIjoxNzQ4NDQ4NzA3LCJpc3MiOiJkaXJlY3R1cyJ9.4dqTV1zL7jdY03K9L2aCp4djbvwy7lonlU-DPtWShbc',
  campaignId: '46868c44-c6a4-4bed-accf-9ad07bba790e'
};

async function testService(service) {
  try {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${service}...`);
    
    const response = await axios.post(`${CONFIG.baseUrl}/api/generate-content`, {
      prompt: '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –ø—Ä–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å',
      service: service,
      useCampaignData: true,
      campaignId: CONFIG.campaignId
    }, {
      headers: { 'Authorization': `Bearer ${CONFIG.authToken}` },
      timeout: 25000
    });
    
    if (response.data.success) {
      const content = response.data.content;
      const hasRealData = content.toLowerCase().includes('nplanner') || content.toLowerCase().includes('–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫');
      console.log(`‚úÖ ${service}: ${hasRealData ? '–î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω—ã' : '–ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏'}`);
      console.log(`üìù –§—Ä–∞–≥–º–µ–Ω—Ç: ${content.substring(0, 100)}...`);
      return { success: true, hasRealData };
    } else {
      console.log(`‚ùå ${service}: ${response.data.error}`);
      return { success: false, error: response.data.error };
    }
  } catch (error) {
    console.log(`‚ùå ${service}: ${error.message}`);
    return { success: false, error: error.message };
  }
}

async function main() {
  console.log('üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏"\n');
  
  const services = ['gemini', 'deepseek', 'qwen'];
  const results = {};
  
  for (const service of services) {
    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º ${service}...`);
    const result = await testService(service);
    results[service] = result;
    console.log('');
    // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('========================');
  
  for (const [service, result] of Object.entries(results)) {
    const status = result.success ? (result.hasRealData ? '‚úÖ –° –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏–∏' : '‚ö†Ô∏è –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏') : '‚ùå –û—à–∏–±–∫–∞';
    console.log(`${service.toUpperCase()}: ${status}`);
  }
  
  const successCount = Object.values(results).filter(r => r.success && r.hasRealData).length;
  console.log(`\nüéØ –£—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏–∏: ${successCount}/${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤`);
  console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

main().catch(console.error);