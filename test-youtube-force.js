/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YouTube –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

import axios from 'axios';

async function testYouTubeIntegration() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º YouTube –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –±–∞–∑–µ...');
    
    const response = await axios.get(
      'https://directus.roboflow.tech/items/campaign_content/bea24ff7-9c75-4404-812b-06d355bd98ac',
      {
        headers: {
          'Authorization': 'Bearer _cYEZbtGwG2biL0UnpdI6Q58EaW22VRm'
        }
      }
    );
    
    const content = response.data.data;
    console.log('üìã –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:');
    console.log(`  ID: ${content.id}`);
    console.log(`  –°—Ç–∞—Ç—É—Å: ${content.status}`);
    console.log(`  –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${content.title}`);
    console.log(`  –í–∏–¥–µ–æ URL: ${content.video_url ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
    console.log(`  –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${JSON.stringify(content.social_platforms, null, 2)}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ YouTube
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏...');
    
    const campaignResponse = await axios.get(
      `https://directus.roboflow.tech/items/user_campaigns/${content.campaign_id}`,
      {
        headers: {
          'Authorization': 'Bearer _cYEZbtGwG2biL0UnpdI6Q58EaW22VRm'
        }
      }
    );
    
    const campaign = campaignResponse.data.data;
    console.log('üìã –ö–∞–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞:');
    console.log(`  ID: ${campaign.id}`);
    console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${campaign.name}`);
    
    const youtubeSettings = campaign.social_media_settings?.youtube;
    if (youtubeSettings) {
      console.log('‚úÖ YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:');
      console.log(`  API Key: ${youtubeSettings.apiKey ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
      console.log(`  Channel ID: ${youtubeSettings.channelId || '–ù–µ—Ç'}`);
      console.log(`  Access Token: ${youtubeSettings.accessToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
      console.log(`  Refresh Token: ${youtubeSettings.refreshToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
    } else {
      console.log('‚ùå YouTube –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å YouTube –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    const youtube = content.social_platforms?.youtube;
    if (youtube) {
      console.log('\nüì± YouTube –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:');
      console.log(`  –°—Ç–∞—Ç—É—Å: ${youtube.status}`);
      console.log(`  –í–∫–ª—é—á–µ–Ω–∞: ${youtube.enabled}`);
      console.log(`  –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${youtube.scheduledAt}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º—è
      const scheduledTime = new Date(youtube.scheduledAt);
      const now = new Date();
      console.log(`  –í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ: ${now > scheduledTime ? '–î–∞' : '–ù–µ—Ç'}`);
    } else {
      console.log('‚ùå YouTube –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    if (error.response) {
      console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.status, error.response.data);
    }
  }
}

testYouTubeIntegration();