/**
 * –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è YouTube —Ç–æ–∫–µ–Ω–æ–≤
 */

const axios = require('axios');

async function testYouTubeTokenRefresh() {
  try {
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã)
    const campaignId = '46868c44-c6a4-4bed-accf-9ad07bba790e';
    const refreshToken = '1//05vtpMD2L6mM6CgYIARAAGAUSNwF-L9IrMdMT8CFmdeuT7SUk-5WqAOwC_nvu2h-2WxrwPfXcYZUvCT7rO-6p921etz8tbdwE0dU';
    
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è YouTube —Ç–æ–∫–µ–Ω–æ–≤...');
    console.log(`Campaign ID: ${campaignId}`);
    console.log(`Refresh Token: ${refreshToken.substring(0, 20)}...`);
    
    // –í—ã–∑—ã–≤–∞–µ–º API endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    const response = await axios.post('http://localhost:5000/api/youtube/refresh-token', {
      campaignId: campaignId,
      refreshToken: refreshToken
    }, {
      headers: {
        'Content-Type': 'application/json',
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º admin —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        'Authorization': `Bearer ${process.env.DIRECTUS_TOKEN}`
      }
    });
    
    console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    console.log('–û—Ç–≤–µ—Ç API:', JSON.stringify(response.data, null, 2));
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if (response.data.expiresAt) {
      const expiresDate = new Date(response.data.expiresAt);
      const now = new Date();
      const timeLeft = expiresDate - now;
      const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
      const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
      
      console.log(`‚è∞ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç: ${expiresDate.toLocaleString()}`);
      console.log(`‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${hoursLeft}—á ${minutesLeft}–º–∏–Ω`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:');
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    }
  }
}

async function testTokenRefreshService() {
  try {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞–ø—Ä—è–º—É—é...');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é
    const { YouTubeTokenRefresh } = require('./server/services/youtube-token-refresh');
    const tokenService = new YouTubeTokenRefresh();
    
    const refreshToken = '1//05vtpMD2L6mM6CgYIARAAGAUSNwF-L9IrMdMT8CFmdeuT7SUk-5WqAOwC_nvu2h-2WxrwPfXcYZUvCT7rO-6p921etz8tbdwE0dU';
    
    const newTokens = await tokenService.refreshAccessToken(refreshToken);
    
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('–ù–æ–≤—ã–π access token:', newTokens.accessToken.substring(0, 50) + '...');
    console.log('Refresh token:', newTokens.refreshToken ? newTokens.refreshToken.substring(0, 20) + '...' : '–ù–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
    console.log('–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:', newTokens.expiresIn, '—Å–µ–∫—É–Ω–¥');
    console.log('–ò—Å—Ç–µ–∫–∞–µ—Ç –≤:', new Date(newTokens.expiresAt).toLocaleString());
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è YouTube —Ç–æ–∫–µ–Ω–æ–≤\n');
  
  // –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
  await testTokenRefreshService();
  
  // –¢–µ—Å—Ç 2: –ß–µ—Ä–µ–∑ API endpoint
  await testYouTubeTokenRefresh();
  
  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

main().catch(console.error);