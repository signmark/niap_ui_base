/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è HTML –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
 * –ó–∞–ø—É—Å–∫: node telegram-integration-test.js
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã HTML
const testCases = require('./telegram-html-test-cases');

// –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE_URL = 'http://localhost:3000/api/test';

// –¢–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
 * @param {string} message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
 */
function log(message) {
  const now = new Date();
  const timestamp = `[${now.toLocaleTimeString()}]`;
  console.log(`${timestamp} ${message}`);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
 * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function checkEnvVariables() {
  if (!TELEGRAM_BOT_TOKEN) {
    log('‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN');
    log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Ñ–∞–π–ª–µ .env –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É');
    return false;
  }

  if (!TELEGRAM_CHAT_ID) {
    log('‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_CHAT_ID');
    log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Ñ–∞–π–ª–µ .env –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É');
    return false;
  }

  return true;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —á–µ—Ä–µ–∑ API –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
 * @param {string} html HTML-—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} testName –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
 * @returns {Promise<void>}
 */
async function testHtmlFormattingAndSend(html, testName) {
  log(`–¢–µ—Å—Ç: ${testName}`);
  
  try {
    // –®–∞–≥ 1: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —á–µ—Ä–µ–∑ API
    log(`1. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —á–µ—Ä–µ–∑ API`);
    const formatResponse = await axios.post(`${API_BASE_URL}/telegram/format-html`, { html });
    
    if (!formatResponse.data.success) {
      throw new Error(`–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML: ${formatResponse.data.error}`);
    }
    
    const formattedHtml = formatResponse.data.formattedHtml;
    log(`HTML —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω: ${formattedHtml.substring(0, 50)}${formattedHtml.length > 50 ? '...' : ''}`);
    
    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ HTML –≤ Telegram
    log(`2. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ HTML –≤ Telegram`);
    const telegramResponse = await axios.post(`${API_BASE_URL}/raw-html-telegram`, {
      text: formattedHtml,
      chatId: TELEGRAM_CHAT_ID,
      token: TELEGRAM_BOT_TOKEN
    });
    
    if (!telegramResponse.data.success) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${telegramResponse.data.error}`);
    }
    
    log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. Message ID: ${telegramResponse.data.messageId}`);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return true;
  } catch (error) {
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ "${testName}": ${error.message}`);
    if (error.response) {
      log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${error.response.status}`);
      log(`–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(error.response.data)}`);
    }
    return false;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ Telegram
 * @param {string} html HTML-—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {string} imageUrl URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} testName –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
async function testSendWithImage(html, imageUrl, testName) {
  log(`–¢–µ—Å—Ç: ${testName}`);
  
  try {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ HTML —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ Telegram
    log(`–û—Ç–ø—Ä–∞–≤–∫–∞ HTML —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ Telegram`);
    const response = await axios.post(`${API_BASE_URL}/optimized-platform-publish`, {
      content: html,
      chatId: TELEGRAM_CHAT_ID,
      imageUrl: imageUrl
    });
    
    if (!response.data.success) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: ${response.data.error}`);
    }
    
    log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return true;
  } catch (error) {
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ "${testName}": ${error.message}`);
    if (error.response) {
      log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${error.response.status}`);
      log(`–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(error.response.data)}`);
    }
    return false;
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
 */
async function runAllTests() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!checkEnvVariables()) {
    return;
  }
  
  log('–ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
  
  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
  const results = {
    total: 0,
    passed: 0,
    failed: 0
  };
  
  // –¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML
  const htmlTests = [
    { name: '–ü—Ä–æ—Å—Ç–æ–π HTML —Å –±–∞–∑–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º', html: testCases.basicHtml },
    { name: 'HTML —Å–æ —Å–ø–∏—Å–∫–∞–º–∏', html: testCases.listHtml },
    { name: 'HTML —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏', html: testCases.nestedListHtml },
    { name: 'HTML —Å —ç–º–æ–¥–∑–∏', html: testCases.emojiHtml },
    { name: 'HTML —Å–æ —Å—Å—ã–ª–∫–∞–º–∏', html: testCases.linksHtml },
    { name: 'HTML —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Ç–µ–≥–∞–º–∏', html: testCases.unclosedTagsHtml },
    { name: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π HTML', html: testCases.complexHtml }
  ];
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML
  for (const test of htmlTests) {
    results.total++;
    const success = await testHtmlFormattingAndSend(test.html, test.name);
    if (success) {
      results.passed++;
    } else {
      results.failed++;
    }
  }
  
  // –¢–µ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  const imageTests = [
    {
      name: 'HTML —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–ø—Ä–æ—Å—Ç–æ–π)',
      html: testCases.basicHtml,
      imageUrl: 'https://via.placeholder.com/500'
    },
    {
      name: 'HTML —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (—Å–ª–æ–∂–Ω—ã–π)',
      html: testCases.complexHtml,
      imageUrl: 'https://via.placeholder.com/800x400'
    }
  ];
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  for (const test of imageTests) {
    results.total++;
    const success = await testSendWithImage(test.html, test.imageUrl, test.name);
    if (success) {
      results.passed++;
    } else {
      results.failed++;
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.total}`);
  log(`–£—Å–ø–µ—à–Ω–æ: ${results.passed}`);
  log(`–ù–µ—É–¥–∞—á–Ω–æ: ${results.failed}`);
  
  if (results.failed === 0) {
    log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã');
  } else {
    log(`‚ö†Ô∏è –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${results.failed}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests();