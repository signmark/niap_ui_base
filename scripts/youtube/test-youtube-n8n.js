/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ YouTube N8N workflow
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –≤ N8N –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
 */

const fetch = require('node-fetch');

const N8N_YOUTUBE_WEBHOOK = 'https://n8n.nplanner.ru/webhook/publish-youtube';

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç YouTube N8N workflow —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
async function testYouTubeN8nWorkflow() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YouTube N8N Workflow');
  console.log('üåê Webhook URL:', N8N_YOUTUBE_WEBHOOK);
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ N8N
  const testData = {
    contentId: 'ea5a4482-8885-408e-9495-bca8293b7f85', // –†–µ–∞–ª—å–Ω—ã–π ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –≤–∏–¥–µ–æ
    platform: 'youtube'
  };
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(testData, null, 2));
  
  try {
    console.log('‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–∞...');
    
    const response = await fetch(N8N_YOUTUBE_WEBHOOK, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(response.headers.entries()));
    
    const responseText = await response.text();
    
    if (response.ok) {
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      
      try {
        const result = JSON.parse(responseText);
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
        console.log(JSON.stringify(result, null, 2));
        
        if (result.success) {
          console.log('üéâ YouTube –ø—É–±–ª–∏–∫–∞—Ü–∏—è –£–°–ü–ï–®–ù–ê!');
          if (result.postUrl) {
            console.log('üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ:', result.postUrl);
          }
        } else {
          console.log('‚ùå YouTube –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ù–ï–£–î–ê–ß–ù–ê:');
          console.log('üíÄ –û—à–∏–±–∫–∞:', result.error);
          console.log('üìä –°—Ç–∞—Ç—É—Å:', result.status);
        }
        
      } catch (parseError) {
        console.log('üìÑ –û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):', responseText);
      }
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ webhook:');
      console.log('üìÑ –û—Ç–≤–µ—Ç:', responseText);
    }
    
  } catch (error) {
    console.log('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:');
    console.log(error.message);
    console.log(error.stack);
  }
  
  console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
async function testValidation() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  
  const invalidTests = [
    { name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç contentId', data: { platform: 'youtube' } },
    { name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç platform', data: { contentId: 'test-id' } },
    { name: '–ù–µ–≤–µ—Ä–Ω–∞—è platform', data: { contentId: 'test-id', platform: 'tiktok' } },
    { name: '–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ', data: {} }
  ];
  
  for (const test of invalidTests) {
    console.log(`\nüìù –¢–µ—Å—Ç: ${test.name}`);
    console.log('üì§ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(test.data));
    
    try {
      const response = await fetch(N8N_YOUTUBE_WEBHOOK, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(test.data)
      });
      
      const responseText = await response.text();
      console.log('üìä –°—Ç–∞—Ç—É—Å:', response.status);
      
      try {
        const result = JSON.parse(responseText);
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
      } catch {
        console.log('üìÑ –û—Ç–≤–µ—Ç:', responseText);
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å N8N —Å–µ—Ä–≤–µ—Ä–∞
 */
async function checkN8nAvailability() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ N8N —Å–µ—Ä–≤–µ—Ä–∞');
  
  try {
    const response = await fetch('https://n8n.nplanner.ru/', {
      method: 'GET'
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å N8N —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
    
    if (response.ok) {
      console.log('‚úÖ N8N —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è N8N —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
    }
    
  } catch (error) {
    console.log('‚ùå N8N —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è YouTube N8N Integration');
  console.log('=' * 50);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ N8N
  await checkN8nAvailability();
  
  // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  await testValidation();
  
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  await testYouTubeN8nWorkflow();
  
  console.log('\nüéØ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  console.log('\n–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ workflow –≤ N8N:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ N8N: https://n8n.nplanner.ru/');
  console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Workflows');
  console.log('3. Import from JSON');
  console.log('4. –í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ youtube-posting.json');
  console.log('5. –ó–∞–º–µ–Ω–∏—Ç–µ DIRECTUS_TOKEN_PLACEHOLDER –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
  console.log('6. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ workflow');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testYouTubeN8nWorkflow,
  testValidation,
  checkN8nAvailability
};