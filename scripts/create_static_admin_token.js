/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ Directus API
 * 
 * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –∏–º–µ—é—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç
 * –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/create_static_admin_token.js EMAIL PASSWORD
 */

require('dotenv').config();
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// URL Directus API
const DIRECTUS_URL = process.env.DIRECTUS_URL || 'https://directus.nplanner.ru';
const ENV_FILE = path.resolve(__dirname, '../.env');

async function createStaticToken(email, password) {
  if (!email || !password) {
    console.error('–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email –∏ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node create_static_admin_token.js EMAIL PASSWORD');
    process.exit(1);
  }

  try {
    console.log(`–®–∞–≥ 1/3: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authResponse = await axios.post(`${DIRECTUS_URL}/auth/login`, {
      email,
      password
    });
    
    if (!authResponse.data?.data?.access_token) {
      console.error('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      process.exit(1);
    }
    
    const temporaryToken = authResponse.data.data.access_token;
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è`);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω
    console.log(`\n–®–∞–≥ 2/3: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...`);
    
    const tokenName = `scheduler_token_${new Date().toISOString().slice(0, 10)}`;
    
    const tokenResponse = await axios.post(
      `${DIRECTUS_URL}/users/me/tokens`,
      {
        name: tokenName,
        // –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º
      },
      {
        headers: {
          'Authorization': `Bearer ${temporaryToken}`
        }
      }
    );
    
    if (!tokenResponse.data?.data?.token) {
      console.error('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞');
      process.exit(1);
    }
    
    const staticToken = tokenResponse.data.data.token;
    console.log(`‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    console.log(`\n–®–∞–≥ 3/3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª...`);
    
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞
    let envContent = fs.readFileSync(ENV_FILE, 'utf8');
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å DIRECTUS_ADMIN_TOKEN
    const tokenRegex = /DIRECTUS_ADMIN_TOKEN=".*"/;
    
    if (envContent.match(tokenRegex)) {
      // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
      envContent = envContent.replace(tokenRegex, `DIRECTUS_ADMIN_TOKEN="${staticToken}"`);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
      envContent += `\nDIRECTUS_ADMIN_TOKEN="${staticToken}"\n`;
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
    fs.writeFileSync(ENV_FILE, envContent);
    
    console.log(`‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª`);
    
    console.log(`\nüéâ –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    console.log(`\n–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:`);
    console.log(`\nDIRECTUS_ADMIN_TOKEN="${staticToken}"`);
    console.log(`\n–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.`);
    console.log(`\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω –≤—Å—Ç—É–ø–∏–ª –≤ —Å–∏–ª—É.`);
    
    return staticToken;
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
    
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API:');
      console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`–î–∞–Ω–Ω—ã–µ:`, JSON.stringify(error.response.data, null, 2));
    }
    
    process.exit(1);
  }
}

// –ü–æ–ª—É—á–∞–µ–º email –∏ –ø–∞—Ä–æ–ª—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const email = process.argv[2];
const password = process.argv[3];

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
createStaticToken(email, password);