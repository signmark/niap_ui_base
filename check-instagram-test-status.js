/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Instagram —á–µ—Ä–µ–∑ Directus
 */
import axios from 'axios';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function checkInstagramTestStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–π Instagram –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...');
  
  const DIRECTUS_URL = process.env.DIRECTUS_URL || 'https://directus.roboflow.tech';
  const DIRECTUS_TOKEN = process.env.DIRECTUS_TOKEN;
  
  if (!DIRECTUS_TOKEN) {
    console.error('‚ùå DIRECTUS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return;
  }
  
  console.log(`üì° Directus URL: ${DIRECTUS_URL}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ campaign_content, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const response = await axios.get(`${DIRECTUS_URL}/items/campaign_content`, {
      headers: {
        'Authorization': `Bearer ${DIRECTUS_TOKEN}`
      },
      params: {
        limit: 10,
        fields: [
          'id',
          'content',
          'social_platforms',
          'status',
          'scheduled_at'
        ]
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${response.data.data.length} –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞`);
    
    // –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å Instagram –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
    const instagramContent = response.data.data.filter(item => {
      const socialPlatforms = item.social_platforms;
      return socialPlatforms && 
             typeof socialPlatforms === 'object' && 
             socialPlatforms.instagram;
    });
    
    console.log(`üì± –ù–∞–π–¥–µ–Ω–æ ${instagramContent.length} –∑–∞–ø–∏—Å–µ–π —Å Instagram –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π`);
    
    if (instagramContent.length > 0) {
      console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ Instagram –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:');
      
      instagramContent.forEach((item, index) => {
        const instagramData = item.social_platforms.instagram;
        console.log(`\n${index + 1}. ID: ${item.id}`);
        console.log(`   –ö–æ–Ω—Ç–µ–Ω—Ç: ${item.content?.substring(0, 100)}...`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${item.status}`);
        console.log(`   Instagram —Å—Ç–∞—Ç—É—Å: ${instagramData.status || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        if (instagramData.error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${instagramData.error}`);
        }
        
        if (instagramData.postUrl) {
          console.log(`   üîó URL –ø–æ—Å—Ç–∞: ${instagramData.postUrl}`);
        }
      });
    } else {
      console.log('üì≠ –ó–∞–ø–∏—Å–µ–π —Å Instagram –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    const testContent = response.data.data.filter(item => 
      item.content && item.content.includes('—Ç–µ—Å—Ç')
    );
    
    if (testContent.length > 0) {
      console.log('\nüß™ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:');
      testContent.forEach((item, index) => {
        console.log(`\n${index + 1}. ID: ${item.id}`);
        console.log(`   –ö–æ–Ω—Ç–µ–Ω—Ç: ${item.content?.substring(0, 100)}...`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${item.status}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:');
    
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    } else {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkInstagramTestStatus();