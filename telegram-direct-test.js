/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * –ó–∞–ø—É—Å–∫: node telegram-direct-test.js
 */

import axios from 'axios';
import fs from 'fs';
import FormData from 'form-data';
import dotenv from 'dotenv';
import process from 'process';
import path from 'path';
import { fileURLToPath } from 'url';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dotenv
dotenv.config();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const CONTENT_ID = process.argv[2];

if (!CONTENT_ID) {
  console.error('–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏');
  console.error('–ü—Ä–∏–º–µ—Ä: node telegram-direct-test.js 094bb372-d8ae-4759-8d0e-1c6c63391a04');
  process.exit(1);
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const testCaption = `<b>üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram</b>

<i>–£—Å—Ç–∞–ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é?</i> –•–æ—Ç–∏—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –∏ —Å–∏–ª—ã?

–¢–æ–≥–¥–∞ <b>–∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥</b> - <u>–∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ</u>! 

‚úÖ –ó–∞–±—É–¥—å—Ç–µ –æ —Ä—É—Ç–∏–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ Telegram, –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, Instagram –∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö.

–ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç, –∑–∞–¥–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏! –í–∞—à–∏ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Ç–æ—á–Ω–æ –≤ —Å—Ä–æ–∫, –±–µ–∑ –æ–ø–æ–∑–¥–∞–Ω–∏–π –∏ –æ—à–∏–±–æ–∫.

–≠–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è, –ø–æ–≤—ã—à–∞–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏!

<a href="https://example.com">–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ</a>`;

// –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
// const TEST_IMAGE_PATH = path.join(path.dirname(fileURLToPath(import.meta.url)), 'test-image.jpg');

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
 */
function log(message) {
  const timestamp = new Date().toLocaleTimeString();
  console.log(`[${timestamp}] ${message}`);
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ HTML-—Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏ –¥–µ–ª–∞–µ—Ç –∏—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ —Å Telegram
 * @param {string} html HTML-—Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * @returns {string} –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç
 */
function fixHtmlForTelegram(html) {
  if (!html) return '';
  
  try {
    // –°–∞–º—ã–π —Ä–∞–¥–∏–∫–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å –∏—Ö –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const stripAllTags = (htmlContent) => {
      return htmlContent.replace(/<[^>]+>/g, '');
    };
    
    // –®–∞–≥ 1: –û—á–∏—â–∞–µ–º HTML –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    let cleanedHtml = html
      .replace(/<!--[\s\S]*?-->/g, '')
      .replace(/<\?([\s\S]*?)\?>/g, '')
      .replace(/<!DOCTYPE[^>]*>/i, '')
      .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '');
    
    // –®–∞–≥ 2: –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    cleanedHtml = cleanedHtml
      .replace(/<p[^>]*>([\s\S]*?)<\/p>/gi, '$1\n\n')
      .replace(/<div[^>]*>([\s\S]*?)<\/div>/gi, '$1\n')
      .replace(/<h[1-6][^>]*>([\s\S]*?)<\/h[1-6]>/gi, '<b>$1</b>\n\n')
      .replace(/<br\s*\/?>/gi, '\n')
      .replace(/<li[^>]*>([\s\S]*?)<\/li>/gi, '‚Ä¢ $1\n')
      .replace(/<ul[^>]*>([\s\S]*?)<\/ul>/gi, '$1\n')
      .replace(/<ol[^>]*>([\s\S]*?)<\/ol>/gi, '$1\n');
    
    // –®–∞–≥ 3: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–≥–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram —Ñ–æ—Ä–º–∞—Ç—ã
    cleanedHtml = cleanedHtml
      .replace(/<strong[^>]*>([\s\S]*?)<\/strong>/gi, '<b>$1</b>')
      .replace(/<b[^>]*>([\s\S]*?)<\/b>/gi, '<b>$1</b>')
      .replace(/<em[^>]*>([\s\S]*?)<\/em>/gi, '<i>$1</i>')
      .replace(/<i[^>]*>([\s\S]*?)<\/i>/gi, '<i>$1</i>')
      .replace(/<u[^>]*>([\s\S]*?)<\/u>/gi, '<u>$1</u>')
      .replace(/<ins[^>]*>([\s\S]*?)<\/ins>/gi, '<u>$1</u>')
      .replace(/<s[^>]*>([\s\S]*?)<\/s>/gi, '<s>$1</s>')
      .replace(/<strike[^>]*>([\s\S]*?)<\/strike>/gi, '<s>$1</s>')
      .replace(/<del[^>]*>([\s\S]*?)<\/del>/gi, '<s>$1</s>');
    
    // –®–∞–≥ 4: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ - —É–¥–∞–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Å—ã–ª–∫–∏
    cleanedHtml = cleanedHtml.replace(/<a\s+(?:[^>]*?\s+)?href=["']([^"']*)["'][^>]*>([\s\S]*?)<\/a>/gi, 
      (match, url, text) => {
        const cleanText = stripAllTags(text);
        return `<a href="${url}">${cleanText}</a>`;
      }
    );
    
    // –®–∞–≥ 5: –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏, –∫—Ä–æ–º–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö Telegram
    const supportedTags = ['b', 'i', 'u', 's', 'code', 'pre', 'a'];
    const unsupportedTagPattern = new RegExp(`<\\/?(?!${supportedTags.join('|')}\\b)[^>]+>`, 'gi');
    cleanedHtml = cleanedHtml.replace(unsupportedTagPattern, '');
    
    // –®–∞–≥ 6: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ç–µ–≥–æ–≤
    cleanedHtml = cleanedHtml
      .replace(/<(b|i|u|s|code|pre)\s+[^>]*>/gi, '<$1>')
      .replace(/<a\s+(?:[^>]*?\s+)?href=["']([^"']*)["'][^>]*>/gi, '<a href="$1">');
    
    // –®–∞–≥ 7: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±
    // –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    const paragraphs = cleanedHtml.split(/\n{2,}/);
    let formattedHtml = '';
    
    for (const paragraph of paragraphs) {
      if (!paragraph.trim()) continue;
      
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (!/<[^>]+>/.test(paragraph)) {
        formattedHtml += paragraph.trim() + '\n\n';
        continue;
      }
      
      // –¢–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      // –î–ª—è Telegram –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Ç–µ–≥–∏ –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–∏—Å—å, –ø–æ—ç—Ç–æ–º—É —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
      
      // 1. –í—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º
      let boldText = paragraph.replace(/<b>([\s\S]*?)<\/b>/gi, (match, content) => {
        // –í–Ω—É—Ç—Ä–∏ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const cleanContent = content
          .replace(/<\/?[bi]>/gi, '')
          .replace(/<\/?[us]>/gi, '');
        return `<b>${cleanContent}</b>`;
      });
      
      // 2. –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∏–≤–æ–º
      let italicText = boldText.replace(/<i>([\s\S]*?)<\/i>/gi, (match, content) => {
        // –í–Ω—É—Ç—Ä–∏ –∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const cleanContent = content
          .replace(/<\/?[bus]>/gi, '');
        return `<i>${cleanContent}</i>`;
      });
      
      // 3. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
      let underlineText = italicText.replace(/<u>([\s\S]*?)<\/u>/gi, (match, content) => {
        // –í–Ω—É—Ç—Ä–∏ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const cleanContent = content
          .replace(/<\/?[bis]>/gi, '');
        return `<u>${cleanContent}</u>`;
      });
      
      // 4. –ó–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
      let strikeText = underlineText.replace(/<s>([\s\S]*?)<\/s>/gi, (match, content) => {
        // –í–Ω—É—Ç—Ä–∏ –∑–∞—á–µ—Ä–∫–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const cleanContent = content
          .replace(/<\/?[biu]>/gi, '');
        return `<s>${cleanContent}</s>`;
      });
      
      formattedHtml += strikeText.trim() + '\n\n';
    }
    
    // –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤
    const tagStack = [];
    let tempHtml = '';
    let i = 0;
    
    while (i < formattedHtml.length) {
      if (formattedHtml[i] === '<') {
        if (formattedHtml[i + 1] === '/') {
          // –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
          const closeTagMatch = formattedHtml.substring(i).match(/<\/([a-z]+)>/i);
          if (closeTagMatch) {
            const closeTag = closeTagMatch[1].toLowerCase();
            
            if (tagStack.length > 0 && tagStack[tagStack.length - 1] === closeTag) {
              // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
              tagStack.pop();
              tempHtml += closeTagMatch[0];
              i += closeTagMatch[0].length;
            } else {
              // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
              i += closeTagMatch[0].length;
            }
          } else {
            // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
            i++;
          }
        } else {
          // –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
          const openTagMatch = formattedHtml.substring(i).match(/<([a-z]+)(\s+[^>]*)?>/i);
          if (openTagMatch) {
            const openTag = openTagMatch[1].toLowerCase();
            
            if (supportedTags.includes(openTag)) {
              // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–µ–≥
              tagStack.push(openTag);
              tempHtml += openTagMatch[0];
              i += openTagMatch[0].length;
            } else {
              // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–µ–≥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
              i += openTagMatch[0].length;
            }
          } else {
            tempHtml += formattedHtml[i];
            i++;
          }
        }
      } else {
        tempHtml += formattedHtml[i];
        i++;
      }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
    const reversedStack = [...tagStack].reverse();
    for (const tag of reversedStack) {
      if (tag !== 'a') { // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
        tempHtml += `</${tag}>`;
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    return tempHtml
      .replace(/\n{3,}/g, '\n\n')
      .replace(/^\s+|\s+$/g, '')
      .replace(/<\/b><b>/g, '')
      .replace(/<\/i><i>/g, '')
      .replace(/<\/u><u>/g, '')
      .replace(/<\/s><s>/g, '');
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ HTML: ${error}`);
    return html.replace(/<[^>]*>/g, ''); // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Telegram
 * @param {string} html HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendTextMessage(html) {
  log(`–û—Ç–ø—Ä–∞–≤–∫–∞ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...`);
  
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    log(`‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (—Ç–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞)`);
    log(`–¢–æ–∫–µ–Ω: ${TELEGRAM_BOT_TOKEN ? '–∑–∞–¥–∞–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}, Chat ID: ${TELEGRAM_CHAT_ID ? '–∑–∞–¥–∞–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (—Ç–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞)');
  }
  
  try {
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º HTML –¥–ª—è Telegram
    const fixedHtml = fixHtmlForTelegram(html);
    
    log(`–ò—Å—Ö–æ–¥–Ω—ã–π HTML (${html.length} —Å–∏–º–≤–æ–ª–æ–≤): ${html.substring(0, 100)}...`);
    log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π HTML (${fixedHtml.length} —Å–∏–º–≤–æ–ª–æ–≤): ${fixedHtml.substring(0, 100)}...`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –∫ API Telegram
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    const response = await axios.post(url, {
      chat_id: TELEGRAM_CHAT_ID,
      text: fixedHtml,
      parse_mode: 'HTML'
    }, {
      headers: { 'Content-Type': 'application/json' },
      validateStatus: () => true // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞
    });
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    log(`–û—Ç–≤–µ—Ç –æ—Ç Telegram API (sendMessage): —Å—Ç–∞—Ç—É—Å ${response.status}`);
    
    if (response.status === 200 && response.data && response.data.ok) {
      const messageId = response.data.result.message_id;
      let messageUrl = formatTelegramUrl(messageId);
      
      log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —Å ID: ${messageId}`);
      log(`URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageUrl}`);
      
      return {
        success: true,
        messageId,
        messageUrl,
        result: response.data.result
      };
    } else {
      const errorMessage = response.data?.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${errorMessage}`);
      
      return {
        success: false,
        error: errorMessage,
        status: response.status,
        data: response.data
      };
    }
  } catch (error) {
    log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${error.message}`);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å HTML-–ø–æ–¥–ø–∏—Å—å—é –≤ Telegram
 * @param {string} imageUrl URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
 * @param {string} caption HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendImageWithCaption(imageUrl, caption) {
  log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å HTML-–ø–æ–¥–ø–∏—Å—å—é –≤ Telegram...`);
  
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    log(`‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (—Ç–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞)`);
    log(`–¢–æ–∫–µ–Ω: ${TELEGRAM_BOT_TOKEN ? '–∑–∞–¥–∞–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}, Chat ID: ${TELEGRAM_CHAT_ID ? '–∑–∞–¥–∞–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (—Ç–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞)');
  }
  
  try {
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º HTML –¥–ª—è Telegram
    const fixedCaption = fixHtmlForTelegram(caption);
    
    log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π HTML –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (${fixedCaption.length} —Å–∏–º–≤–æ–ª–æ–≤): ${fixedCaption.substring(0, 100)}...`);
    
    // –û–±—Ä–µ–∑–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∏–º–∏—Ç Telegram)
    const finalCaption = fixedCaption.length > 1024 
      ? fixedCaption.substring(0, 1021) + '...' 
      : fixedCaption;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º FormData
    const formData = new FormData();
    formData.append('chat_id', TELEGRAM_CHAT_ID);
    formData.append('parse_mode', 'HTML');
    formData.append('caption', finalCaption);
    
    // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
      log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL: ${imageUrl}`);
      
      // –î–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º URL –Ω–∞–ø—Ä—è–º—É—é
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º—ã –Ω–µ –±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–¥–∏–º URL
      formData.append('photo', imageUrl);
    } else {
      log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl}`);
      
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ formData
      formData.append('photo', fs.createReadStream(imageUrl));
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`;
    const response = await axios.post(url, formData, { 
      headers: formData.getHeaders(),
      validateStatus: () => true // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞
    });
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    log(`–û—Ç–≤–µ—Ç –æ—Ç Telegram API (sendPhoto): —Å—Ç–∞—Ç—É—Å ${response.status}`);
    
    if (response.status === 200 && response.data && response.data.ok) {
      const messageId = response.data.result.message_id;
      let messageUrl = formatTelegramUrl(messageId);
      
      log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å HTML-–ø–æ–¥–ø–∏—Å—å—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —Å ID: ${messageId}`);
      log(`URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageUrl}`);
      
      return {
        success: true,
        messageId,
        messageUrl,
        result: response.data.result
      };
    } else {
      const errorMessage = response.data?.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å HTML-–ø–æ–¥–ø–∏—Å—å—é –≤ Telegram: ${errorMessage}`);
      
      return {
        success: false,
        error: errorMessage,
        status: response.status,
        data: response.data
      };
    }
  } catch (error) {
    log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å HTML-–ø–æ–¥–ø–∏—Å—å—é –≤ Telegram: ${error.message}`);
    throw error;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç URL –¥–ª—è Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {number|string} messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {string} URL —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function formatTelegramUrl(messageId) {
  let chatId = TELEGRAM_CHAT_ID;
  let url = '';
  
  if (chatId.startsWith('@')) {
    // –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å username (@channel)
    url = `https://t.me/${chatId.substring(1)}/${messageId}`;
  } else if (chatId.startsWith('-100')) {
    // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
    const channelId = chatId.substring(4);
    url = `https://t.me/c/${channelId}/${messageId}`;
  } else if (chatId.startsWith('-')) {
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø
    const groupId = chatId.substring(1);
    url = `https://t.me/c/${groupId}/${messageId}`;
  } else {
    // –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç
    url = `https://t.me/c/${chatId}/${messageId}`;
  }
  
  return url;
}

/**
 * –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –≤ Directus –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @returns {Promise<string|null>} –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
async function getAdminToken() {
  try {
    log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Directus...');
    log(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: lbrspb@gmail.com`);
    
    const response = await axios.post('https://directus.nplanner.ru/auth/login', {
      email: 'lbrspb@gmail.com',
      password: 'QtpZ3dh7'
    });
    
    if (response.data && response.data.data && response.data.data.access_token) {
      log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API');
      return response.data.data.access_token;
    } else {
      log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
      return null;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    if (error.response) {
      log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data)}`);
    }
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å Directus –ø–æ ID
 * @param {string} token –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ 
 * @param {string} contentId ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @returns {Promise<object|null>} –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
async function getContentData(token, contentId) {
  try {
    log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${contentId} –∏–∑ Directus...`);
    
    const response = await axios.get(`https://directus.nplanner.ru/items/campaign_content/${contentId}`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });
    
    if (response.data && response.data.data) {
      log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã`);
      return response.data.data;
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞`);
      return null;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${error.message}`);
    if (error.response) {
      log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data)}`);
    }
    return null;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Directus
 * @param {string} token –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ 
 * @param {string} contentId ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @param {object} result –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
async function updatePublicationStatus(token, contentId, result) {
  try {
    log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${contentId}...`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    const publicationData = {
      telegram: {
        status: result.success ? 'published' : 'failed',
        publishedAt: result.success ? new Date().toISOString() : null,
        postUrl: result.messageUrl || null,
        error: result.success ? null : result.error
      }
    };
    
    log(`–î–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${JSON.stringify(publicationData)}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ social_publications
    const response = await axios.patch(
      `https://directus.nplanner.ru/items/campaign_content/${contentId}`, 
      { 
        social_publications: publicationData
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    if (response.status === 200) {
      log('‚úÖ –°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      return true;
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${response.status}`);
      return false;
    }
  } catch (error) {
    log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${error.message}`);
    if (error.response) {
      log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data)}`);
    }
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  log('=== –ù–∞—á–∞–ª–æ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    log(`‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram.`);
    log(`TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN ? '‚úÖ –ó–∞–¥–∞–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    log(`TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID ? '‚úÖ –ó–∞–¥–∞–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    return;
  }
  
  log(`–¢–µ—Å—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:`);
  log(`- –¢–æ–∫–µ–Ω –±–æ—Ç–∞: ${TELEGRAM_BOT_TOKEN.substring(0, 10)}...`);
  log(`- ID —á–∞—Ç–∞: ${TELEGRAM_CHAT_ID}`);
  log(`- ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${CONTENT_ID}`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Directus
  const adminToken = await getAdminToken();
  if (!adminToken) {
    log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Directus`);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Directus
  const contentData = await getContentData(adminToken, CONTENT_ID);
  if (!contentData) {
    log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å ID: ${CONTENT_ID}`);
    return;
  }
  
  log(`\n=== –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ===`);
  log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${contentData.title || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
  log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${contentData.imageUrl || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
  log(`–ö–æ–Ω—Ç–µ–Ω—Ç: ${contentData.content ? contentData.content.substring(0, 100) + '...' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
  
  if (!contentData.content) {
    log(`‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.`);
    return;
  }
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º HTML –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  let caption = '';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (contentData.title) {
    caption += `<b>${contentData.title}</b>\n\n`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
  caption += contentData.content;
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º HTML –¥–ª—è Telegram
  const fixedCaption = fixHtmlForTelegram(caption);
  
  log(`\n–ò—Å—Ö–æ–¥–Ω—ã–π HTML (${caption.length} —Å–∏–º–≤–æ–ª–æ–≤):`);
  log(caption.substring(0, 200) + (caption.length > 200 ? '...' : ''));
  
  log(`\n–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π HTML –¥–ª—è Telegram (${fixedCaption.length} —Å–∏–º–≤–æ–ª–æ–≤):`);
  log(fixedCaption.substring(0, 200) + (fixedCaption.length > 200 ? '...' : ''));
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  if (contentData.imageUrl) {
    log('\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å HTML-–ø–æ–¥–ø–∏—Å—å—é ===');
    try {
      const imageResult = await sendImageWithCaption(contentData.imageUrl, fixedCaption);
      
      if (imageResult.success) {
        log(`‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å HTML-–ø–æ–¥–ø–∏—Å—å—é`);
        log(`URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${imageResult.messageUrl}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Directus
        await updatePublicationStatus(adminToken, CONTENT_ID, imageResult);
      } else {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${imageResult.error}`);
      }
    } catch (error) {
      log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`);
    }
  } else {
    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    log('\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–∫ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è ===');
    try {
      const textResult = await sendTextMessage(fixedCaption);
      
      if (textResult.success) {
        log(`‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –∫–∞–∫ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ`);
        log(`URL —Å–æ–æ–±—â–µ–Ω–∏—è: ${textResult.messageUrl}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Directus
        await updatePublicationStatus(adminToken, CONTENT_ID, textResult);
      } else {
        log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${textResult.error}`);
      }
    } catch (error) {
      log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: ${error.message}`);
    }
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
  if (contentData.additionalImages && Array.isArray(contentData.additionalImages) && contentData.additionalImages.length > 0) {
    log(`\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (${contentData.additionalImages.length}) ===`);
    
    for (let i = 0; i < contentData.additionalImages.length; i++) {
      const imageUrl = contentData.additionalImages[i];
      if (!imageUrl) continue;
      
      log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i+1}/${contentData.additionalImages.length}: ${imageUrl}`);
      
      try {
        // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
        const caption = contentData.title ? `<b>${contentData.title}</b> (${i+1}/${contentData.additionalImages.length})` : '';
        
        const imageResult = await sendImageWithCaption(imageUrl, caption);
        
        if (imageResult.success) {
          log(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i+1} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        } else {
          log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i+1}: ${imageResult.error}`);
        }
      } catch (error) {
        log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i+1}: ${error.message}`);
      }
    }
  }
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  log('\n=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Telegram ===');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
try {
  main().catch(error => {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: ${error.message}`);
    if (error.stack) {
      log(error.stack);
    }
  });
} catch (error) {
  log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: ${error.message}`);
  if (error.stack) {
    log(error.stack);
  }
}