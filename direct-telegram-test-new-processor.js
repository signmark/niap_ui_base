/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ HTML –¥–ª—è Telegram
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å telegram-content-processor.js
 * 
 * –ó–∞–ø—É—Å–∫: node direct-telegram-test-new-processor.js
 */

import * as dotenv from 'dotenv';
import { formatHtmlForTelegram, sendTelegramMessage } from './server/utils/telegram-content-processor.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã HTML –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
const testCases = [
  {
    name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏',
    html: `<h1>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</h1>
<p>–≠—Ç–æ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å <strong>–∂–∏—Ä–Ω—ã–º</strong> –∏ <em>–∫—É—Ä—Å–∏–≤–Ω—ã–º</em> —Ç–µ–∫—Å—Ç–æ–º.</p>
<p>–í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º</u> —Ç–µ–∫—Å—Ç–æ–º.</p>`
  },
  {
    name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏',
    html: `<h2>–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–∫–∏</h2>
<ul>
  <li>–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞</li>
  <li>–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç —Å <strong>–∂–∏—Ä–Ω—ã–º</strong> —Ç–µ–∫—Å—Ç–æ–º</li>
</ul>
<ol>
  <li>–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞</li>
  <li>–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç —Å <em>–∫—É—Ä—Å–∏–≤–æ–º</em></li>
</ol>`
  },
  {
    name: '–°—Å—ã–ª–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    html: `<h3>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫</h3>
<p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å <a href="https://telegram.org">—Å—Å—ã–ª–∫–æ–π –Ω–∞ Telegram</a>.</p>
<p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å <b>–∂–∏—Ä–Ω—ã–º</b>, <i>–∫—É—Ä—Å–∏–≤–æ–º</i> –∏ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º</u> —Ç–µ–∫—Å—Ç–æ–º –≤–º–µ—Å—Ç–µ.</p>
<p>–ü—Ä–∏–º–µ—Ä <code>–ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞</code> –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞.</p>`
  }
];

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
async function runTest() {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID');
    console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ');
    return;
  }

  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å –Ω–æ–≤—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º HTML\n');

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
  for (const testCase of testCases) {
    console.log(`\nüìù –¢–µ—Å—Ç: ${testCase.name}`);
    console.log(`–ò—Å—Ö–æ–¥–Ω—ã–π HTML:\n${testCase.html}`);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º HTML –¥–ª—è Telegram
    const formattedHtml = formatHtmlForTelegram(testCase.html);
    console.log(`\n–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML –¥–ª—è Telegram:\n${formattedHtml}`);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      console.log('\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      const result = await sendTelegramMessage(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, formattedHtml);

      if (result.success) {
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        console.log(`ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.message_id}`);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', result.error);
        if (result.data) {
          console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(result.data, null, 2));
        }
      }
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
    console.log('\n–û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...');
    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest().catch(error => {
  console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
});