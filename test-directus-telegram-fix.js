/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Directus —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 * –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
 */
require('dotenv').config();
const { downloadDirectusImage, uploadImageToTelegram, sendDirectusImageToTelegram } = require('./server/services/social-publishing-fix');

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const directusUrl = 'https://directus.nplanner.ru/assets/3b34be64-9579-4b1d-b4e2-98d3de5c2a14'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
const telegramToken = process.env.TELEGRAM_TOKEN; // –¢–æ–∫–µ–Ω –∏–∑ .env
const telegramChatId = process.env.TELEGRAM_CHAT_ID; // ID —á–∞—Ç–∞ –∏–∑ .env

// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
async function testFullProcess() {
  try {
    console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Directus –≤ Telegram');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!telegramToken || !telegramChatId) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (TELEGRAM_TOKEN, TELEGRAM_CHAT_ID) –≤ .env —Ñ–∞–π–ª–µ');
      return;
    }
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${directusUrl} –≤ Telegram —á–∞—Ç: ${telegramChatId}`);
    
    const result = await sendDirectusImageToTelegram(
      directusUrl,
      telegramChatId,
      '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π Directus üöÄ',
      telegramToken
    );
    
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    console.log(`üÜî ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${result.result.message_id}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
      console.error('üìù –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFullProcess().catch(err => {
  console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
});